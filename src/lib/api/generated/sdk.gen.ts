// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	formDataBodySerializer,
	type Options as Options2,
	type TDataShape,
	urlSearchParamsBodySerializer
} from './client';
import { client } from './client.gen';
import type {
	AccountDeleteAccountConfirmAd2Fc06fData,
	AccountDeleteAccountConfirmAd2Fc06fResponses,
	AccountDeleteAccountRequest955C6C07Data,
	AccountDeleteAccountRequest955C6C07Responses,
	AccountExportDataAfe120C1Data,
	AccountExportDataAfe120C1Responses,
	AccountMe24Bacaa6Data,
	AccountMe24Bacaa6Responses,
	AccountRegisterFd08B2A7Data,
	AccountRegisterFd08B2A7Responses,
	AccountResendVerificationEmail91B4EeacData,
	AccountResendVerificationEmail91B4EeacErrors,
	AccountResendVerificationEmail91B4EeacResponses,
	AccountResetPassword6783A58cData,
	AccountResetPassword6783A58cResponses,
	AccountResetPasswordRequestFd35F180Data,
	AccountResetPasswordRequestFd35F180Responses,
	AccountUpdateProfile9153A9EdData,
	AccountUpdateProfile9153A9EdResponses,
	AccountVerifyEmail491D3E73Data,
	AccountVerifyEmail491D3E73Responses,
	ApiApiHealthcheckData,
	ApiApiHealthcheckResponses,
	ApiApiVersionData,
	ApiApiVersionResponses,
	AuthDemoObtainTokenC7Afd43eData,
	AuthDemoObtainTokenC7Afd43eResponses,
	AuthGoogleLoginB5A94684Data,
	AuthGoogleLoginB5A94684Responses,
	AuthObtainToken15Ffd9F5Data,
	AuthObtainToken15Ffd9F5Responses,
	AuthObtainTokenWithOtp34A3A540Data,
	AuthObtainTokenWithOtp34A3A540Responses,
	CityGetCityC671E9A0Data,
	CityGetCityC671E9A0Responses,
	CityListCitiesDf392B53Data,
	CityListCitiesDf392B53Responses,
	CityListCountries59082182Data,
	CityListCountries59082182Responses,
	DashboardDashboardEvents1B15D0A3Data,
	DashboardDashboardEvents1B15D0A3Responses,
	DashboardDashboardEventSeries1A412B6eData,
	DashboardDashboardEventSeries1A412B6eResponses,
	DashboardDashboardInvitationsE6A99E10Data,
	DashboardDashboardInvitationsE6A99E10Responses,
	DashboardDashboardOrganizationsF9B66D2bData,
	DashboardDashboardOrganizationsF9B66D2bResponses,
	EventadminAddTagsFf2E6A58Data,
	EventadminAddTagsFf2E6A58Responses,
	EventadminCancelTicket61A99A04Data,
	EventadminCancelTicket61A99A04Responses,
	EventadminCheckInTicketEeb67498Data,
	EventadminCheckInTicketEeb67498Errors,
	EventadminCheckInTicketEeb67498Responses,
	EventadminClearTags3D621C50Data,
	EventadminClearTags3D621C50Responses,
	EventadminConfirmTicketPayment2Cf8E158Data,
	EventadminConfirmTicketPayment2Cf8E158Responses,
	EventadminCreateEventToken3249A21dData,
	EventadminCreateEventToken3249A21dResponses,
	EventadminCreateInvitationsC009773bData,
	EventadminCreateInvitationsC009773bErrors,
	EventadminCreateInvitationsC009773bResponses,
	EventadminCreateRsvp2D0C0A5cData,
	EventadminCreateRsvp2D0C0A5cResponses,
	EventadminCreateTicketTierB8Bf74A9Data,
	EventadminCreateTicketTierB8Bf74A9Responses,
	EventadminDecideInvitationRequestFeefb06fData,
	EventadminDecideInvitationRequestFeefb06fResponses,
	EventadminDeleteCoverArt1A2B8De7Data,
	EventadminDeleteCoverArt1A2B8De7Responses,
	EventadminDeleteEventToken95C75F5eData,
	EventadminDeleteEventToken95C75F5eResponses,
	EventadminDeleteInvitationEndpointD1971F03Data,
	EventadminDeleteInvitationEndpointD1971F03Errors,
	EventadminDeleteInvitationEndpointD1971F03Responses,
	EventadminDeleteLogoDaad655dData,
	EventadminDeleteLogoDaad655dResponses,
	EventadminDeleteRsvp601Fb486Data,
	EventadminDeleteRsvp601Fb486Responses,
	EventadminDeleteTicketTierD1B87F3aData,
	EventadminDeleteTicketTierD1B87F3aResponses,
	EventadminGetRsvp19Bab3C3Data,
	EventadminGetRsvp19Bab3C3Responses,
	EventadminGetTicketB243Ed07Data,
	EventadminGetTicketB243Ed07Responses,
	EventadminListEventInvitationRequestsF499892cData,
	EventadminListEventInvitationRequestsF499892cResponses,
	EventadminListEventTokens041Bc1A3Data,
	EventadminListEventTokens041Bc1A3Responses,
	EventadminListInvitationsA80E9Bd8Data,
	EventadminListInvitationsA80E9Bd8Responses,
	EventadminListPendingInvitations97B79356Data,
	EventadminListPendingInvitations97B79356Responses,
	EventadminListRsvps79A37E29Data,
	EventadminListRsvps79A37E29Responses,
	EventadminListTicketsCd223F8eData,
	EventadminListTicketsCd223F8eResponses,
	EventadminListTicketTiers280Bd473Data,
	EventadminListTicketTiers280Bd473Responses,
	EventadminMarkTicketRefundedCaeacbedData,
	EventadminMarkTicketRefundedCaeacbedResponses,
	EventadminRemoveTags1B17E480Data,
	EventadminRemoveTags1B17E480Responses,
	EventadminUpdateEvent66009328Data,
	EventadminUpdateEvent66009328Errors,
	EventadminUpdateEvent66009328Responses,
	EventadminUpdateEventStatusD52Bc9EdData,
	EventadminUpdateEventStatusD52Bc9EdResponses,
	EventadminUpdateEventTokenDe8C4F7bData,
	EventadminUpdateEventTokenDe8C4F7bResponses,
	EventadminUpdateRsvpE81A506eData,
	EventadminUpdateRsvpE81A506eResponses,
	EventadminUpdateTicketTier46168F17Data,
	EventadminUpdateTicketTier46168F17Responses,
	EventadminUploadCoverArt46C05FfdData,
	EventadminUploadCoverArt46C05FfdResponses,
	EventadminUploadLogo345F664bData,
	EventadminUploadLogo345F664bResponses,
	EventClaimInvitation331Da609Data,
	EventClaimInvitation331Da609Errors,
	EventClaimInvitation331Da609Responses,
	EventDeleteInvitationRequestCe1F1Ba2Data,
	EventDeleteInvitationRequestCe1F1Ba2Responses,
	EventGetEvent8C855B0cData,
	EventGetEvent8C855B0cResponses,
	EventGetEventAttendeesDb1E1A9fData,
	EventGetEventAttendeesDb1E1A9fResponses,
	EventGetEventBySlugs768E8D40Data,
	EventGetEventBySlugs768E8D40Responses,
	EventGetMyEventStatusAa32B357Data,
	EventGetMyEventStatusAa32B357Responses,
	EventGetQuestionnaire30850BedData,
	EventGetQuestionnaire30850BedResponses,
	EventListEvents8E334676Data,
	EventListEvents8E334676Responses,
	EventListResources0190Bf0dData,
	EventListResources0190Bf0dResponses,
	EventListTiers8C403E03Data,
	EventListTiers8C403E03Responses,
	EventListUserInvitationRequests2F5F4C6bData,
	EventListUserInvitationRequests2F5F4C6bResponses,
	EventRequestInvitationF160A39fData,
	EventRequestInvitationF160A39fErrors,
	EventRequestInvitationF160A39fResponses,
	EventRsvpEvent1E924Ee4Data,
	EventRsvpEvent1E924Ee4Errors,
	EventRsvpEvent1E924Ee4Responses,
	EventseriesadminAddTags4E2D64C9Data,
	EventseriesadminAddTags4E2D64C9Responses,
	EventseriesadminClearTagsBf176644Data,
	EventseriesadminClearTagsBf176644Responses,
	EventseriesadminDeleteCoverArt8275189aData,
	EventseriesadminDeleteCoverArt8275189aResponses,
	EventseriesadminDeleteEventSeries459C81E0Data,
	EventseriesadminDeleteEventSeries459C81E0Responses,
	EventseriesadminDeleteLogoDd1F64B0Data,
	EventseriesadminDeleteLogoDd1F64B0Responses,
	EventseriesadminRemoveTags3A6964A4Data,
	EventseriesadminRemoveTags3A6964A4Responses,
	EventseriesadminUpdateEventSeries9E890928Data,
	EventseriesadminUpdateEventSeries9E890928Errors,
	EventseriesadminUpdateEventSeries9E890928Responses,
	EventseriesadminUploadCoverArtD7D4C16fData,
	EventseriesadminUploadCoverArtD7D4C16fResponses,
	EventseriesadminUploadLogo10Ea000cData,
	EventseriesadminUploadLogo10Ea000cResponses,
	EventseriesGetEventSeries4E879B59Data,
	EventseriesGetEventSeries4E879B59Responses,
	EventseriesGetEventSeriesBySlugs5445C708Data,
	EventseriesGetEventSeriesBySlugs5445C708Responses,
	EventseriesListEventSeries2C0AbecaData,
	EventseriesListEventSeries2C0AbecaResponses,
	EventseriesListResources84978C0cData,
	EventseriesListResources84978C0cResponses,
	EventSubmitQuestionnaire3D2Bc01aData,
	EventSubmitQuestionnaire3D2Bc01aErrors,
	EventSubmitQuestionnaire3D2Bc01aResponses,
	EventTicketCheckoutC182Bc84Data,
	EventTicketCheckoutC182Bc84Errors,
	EventTicketCheckoutC182Bc84Responses,
	EventTicketPwycCheckoutC6Fa6BebData,
	EventTicketPwycCheckoutC6Fa6BebErrors,
	EventTicketPwycCheckoutC6Fa6BebResponses,
	OrganizationadminAddStaff59537205Data,
	OrganizationadminAddStaff59537205Responses,
	OrganizationadminAddTagsE5Ad4164Data,
	OrganizationadminAddTagsE5Ad4164Responses,
	OrganizationadminApproveMembershipRequest9C00554fData,
	OrganizationadminApproveMembershipRequest9C00554fResponses,
	OrganizationadminClearTagsEa26Fba5Data,
	OrganizationadminClearTagsEa26Fba5Responses,
	OrganizationadminCreateEvent577152FeData,
	OrganizationadminCreateEvent577152FeErrors,
	OrganizationadminCreateEvent577152FeResponses,
	OrganizationadminCreateEventSeries6F1F5799Data,
	OrganizationadminCreateEventSeries6F1F5799Errors,
	OrganizationadminCreateEventSeries6F1F5799Responses,
	OrganizationadminCreateOrganizationTokenEc1B7921Data,
	OrganizationadminCreateOrganizationTokenEc1B7921Responses,
	OrganizationadminCreateResource4Da14Ad1Data,
	OrganizationadminCreateResource4Da14Ad1Responses,
	OrganizationadminDeleteCoverArtF0051698Data,
	OrganizationadminDeleteCoverArtF0051698Responses,
	OrganizationadminDeleteLogoBeee1C3bData,
	OrganizationadminDeleteLogoBeee1C3bResponses,
	OrganizationadminDeleteOrganizationToken43391429Data,
	OrganizationadminDeleteOrganizationToken43391429Responses,
	OrganizationadminDeleteResource5B368A78Data,
	OrganizationadminDeleteResource5B368A78Responses,
	OrganizationadminGetOrganizationEe051DfcData,
	OrganizationadminGetOrganizationEe051DfcResponses,
	OrganizationadminGetResourceC341F241Data,
	OrganizationadminGetResourceC341F241Responses,
	OrganizationadminListMembers6Ebb5B27Data,
	OrganizationadminListMembers6Ebb5B27Responses,
	OrganizationadminListMembershipRequests1916899cData,
	OrganizationadminListMembershipRequests1916899cResponses,
	OrganizationadminListOrganizationTokens5Eef77EaData,
	OrganizationadminListOrganizationTokens5Eef77EaResponses,
	OrganizationadminListResources65D0E23dData,
	OrganizationadminListResources65D0E23dResponses,
	OrganizationadminListStaff8Adb77C2Data,
	OrganizationadminListStaff8Adb77C2Responses,
	OrganizationadminRejectMembershipRequest9A76Ea52Data,
	OrganizationadminRejectMembershipRequest9A76Ea52Responses,
	OrganizationadminRemoveMember8Db3F8FbData,
	OrganizationadminRemoveMember8Db3F8FbResponses,
	OrganizationadminRemoveStaff7Ad222C1Data,
	OrganizationadminRemoveStaff7Ad222C1Responses,
	OrganizationadminRemoveTagsBba1Cf6dData,
	OrganizationadminRemoveTagsBba1Cf6dResponses,
	OrganizationadminStripeAccountVerify28A2Edf8Data,
	OrganizationadminStripeAccountVerify28A2Edf8Responses,
	OrganizationadminStripeConnectBd1985A7Data,
	OrganizationadminStripeConnectBd1985A7Responses,
	OrganizationadminUpdateOrganization647Dd787Data,
	OrganizationadminUpdateOrganization647Dd787Responses,
	OrganizationadminUpdateOrganizationTokenE93748F4Data,
	OrganizationadminUpdateOrganizationTokenE93748F4Responses,
	OrganizationadminUpdateResourceCb50D37cData,
	OrganizationadminUpdateResourceCb50D37cResponses,
	OrganizationadminUpdateStaffPermissions30C00DeeData,
	OrganizationadminUpdateStaffPermissions30C00DeeResponses,
	OrganizationadminUploadCoverArt88711373Data,
	OrganizationadminUploadCoverArt88711373Responses,
	OrganizationadminUploadLogoA63F5Bb2Data,
	OrganizationadminUploadLogoA63F5Bb2Responses,
	OrganizationClaimInvitationAff0B7BdData,
	OrganizationClaimInvitationAff0B7BdErrors,
	OrganizationClaimInvitationAff0B7BdResponses,
	OrganizationCreateMembershipRequestD65F2E88Data,
	OrganizationCreateMembershipRequestD65F2E88Responses,
	OrganizationGetOrganization9Ca2E10dData,
	OrganizationGetOrganization9Ca2E10dResponses,
	OrganizationListOrganizations35E65Ea8Data,
	OrganizationListOrganizations35E65Ea8Responses,
	OrganizationListResourcesE306E083Data,
	OrganizationListResourcesE306E083Responses,
	OtpDisableOtp57Ae806fData,
	OtpDisableOtp57Ae806fResponses,
	OtpEnableOtp26F81030Data,
	OtpEnableOtp26F81030Responses,
	OtpSetupOtp02090510Data,
	OtpSetupOtp02090510Responses,
	PermissionMyPermissions0Ff0B5BcData,
	PermissionMyPermissions0Ff0B5BcResponses,
	PotluckClaimPotluckItem369B6De6Data,
	PotluckClaimPotluckItem369B6De6Responses,
	PotluckCreatePotluckItem7C5C51D8Data,
	PotluckCreatePotluckItem7C5C51D8Responses,
	PotluckDeletePotluckItem1017740dData,
	PotluckDeletePotluckItem1017740dResponses,
	PotluckListPotluckItems4B7694CaData,
	PotluckListPotluckItems4B7694CaResponses,
	PotluckUnclaimPotluckItem7A831Bb1Data,
	PotluckUnclaimPotluckItem7A831Bb1Responses,
	PotluckUpdatePotluckItem30A0Eb7aData,
	PotluckUpdatePotluckItem30A0Eb7aResponses,
	QuestionnaireAssignEventFd28Ce9fData,
	QuestionnaireAssignEventFd28Ce9fResponses,
	QuestionnaireAssignEventSeries6Bd6Af5dData,
	QuestionnaireAssignEventSeries6Bd6Af5dResponses,
	QuestionnaireCreateFtQuestion0D3258A3Data,
	QuestionnaireCreateFtQuestion0D3258A3Responses,
	QuestionnaireCreateMcOptionC2Ac408eData,
	QuestionnaireCreateMcOptionC2Ac408eResponses,
	QuestionnaireCreateMcQuestionC6Cae14cData,
	QuestionnaireCreateMcQuestionC6Cae14cResponses,
	QuestionnaireCreateOrgQuestionnaire72Bc9Ad6Data,
	QuestionnaireCreateOrgQuestionnaire72Bc9Ad6Errors,
	QuestionnaireCreateOrgQuestionnaire72Bc9Ad6Responses,
	QuestionnaireCreateSection791B116fData,
	QuestionnaireCreateSection791B116fResponses,
	QuestionnaireDeleteFtQuestionE19C7CfeData,
	QuestionnaireDeleteFtQuestionE19C7CfeResponses,
	QuestionnaireDeleteMcOption9D470B45Data,
	QuestionnaireDeleteMcOption9D470B45Responses,
	QuestionnaireDeleteMcQuestion4B88094fData,
	QuestionnaireDeleteMcQuestion4B88094fResponses,
	QuestionnaireDeleteOrgQuestionnaire5Ece812dData,
	QuestionnaireDeleteOrgQuestionnaire5Ece812dResponses,
	QuestionnaireDeleteSectionBd512996Data,
	QuestionnaireDeleteSectionBd512996Responses,
	QuestionnaireEvaluateSubmission201Fbb98Data,
	QuestionnaireEvaluateSubmission201Fbb98Errors,
	QuestionnaireEvaluateSubmission201Fbb98Responses,
	QuestionnaireGetOrgQuestionnaireEe365C9bData,
	QuestionnaireGetOrgQuestionnaireEe365C9bResponses,
	QuestionnaireGetSubmissionDetailA7F91711Data,
	QuestionnaireGetSubmissionDetailA7F91711Responses,
	QuestionnaireListOrgQuestionnaires049Ecff2Data,
	QuestionnaireListOrgQuestionnaires049Ecff2Responses,
	QuestionnaireListSubmissions1E29E1DdData,
	QuestionnaireListSubmissions1E29E1DdResponses,
	QuestionnaireReplaceEvents61B9B424Data,
	QuestionnaireReplaceEvents61B9B424Responses,
	QuestionnaireReplaceEventSeries16Ff6230Data,
	QuestionnaireReplaceEventSeries16Ff6230Responses,
	QuestionnaireUnassignEvent53Ab14F2Data,
	QuestionnaireUnassignEvent53Ab14F2Responses,
	QuestionnaireUnassignEventSeriesF4900983Data,
	QuestionnaireUnassignEventSeriesF4900983Responses,
	QuestionnaireUpdateFtQuestionD104Fb8fData,
	QuestionnaireUpdateFtQuestionD104Fb8fResponses,
	QuestionnaireUpdateMcOption30D7B38dData,
	QuestionnaireUpdateMcOption30D7B38dResponses,
	QuestionnaireUpdateMcQuestion522B54FfData,
	QuestionnaireUpdateMcQuestion522B54FfResponses,
	QuestionnaireUpdateOrgQuestionnaire3F1Fd61bData,
	QuestionnaireUpdateOrgQuestionnaire3F1Fd61bResponses,
	QuestionnaireUpdateQuestionnaireStatusD407F0B8Data,
	QuestionnaireUpdateQuestionnaireStatusD407F0B8Responses,
	QuestionnaireUpdateSection46243473Data,
	QuestionnaireUpdateSection46243473Responses,
	StripewebhookHandleWebhook9C445F3eData,
	StripewebhookHandleWebhook9C445F3eResponses,
	TagListTags186B44C3Data,
	TagListTags186B44C3Responses,
	TokenRefreshData,
	TokenRefreshResponses,
	UserpreferencesGetEventPreferencesFf07EabfData,
	UserpreferencesGetEventPreferencesFf07EabfResponses,
	UserpreferencesGetEventSeriesPreferences7381C375Data,
	UserpreferencesGetEventSeriesPreferences7381C375Responses,
	UserpreferencesGetGeneralPreferencesA2D19E5eData,
	UserpreferencesGetGeneralPreferencesA2D19E5eResponses,
	UserpreferencesGetOrganizationPreferences1Be188BbData,
	UserpreferencesGetOrganizationPreferences1Be188BbResponses,
	UserpreferencesUpdateEventPreferences97Fe8C70Data,
	UserpreferencesUpdateEventPreferences97Fe8C70Responses,
	UserpreferencesUpdateEventSeriesPreferencesEbddef9bData,
	UserpreferencesUpdateEventSeriesPreferencesEbddef9bResponses,
	UserpreferencesUpdateGlobalPreferences6C21504aData,
	UserpreferencesUpdateGlobalPreferences6C21504aResponses,
	UserpreferencesUpdateOrganizationPreferences1347Ae9bData,
	UserpreferencesUpdateOrganizationPreferences1347Ae9bResponses
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Version
 *
 * Get the API version.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiVersion = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiVersionData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiVersionResponses, unknown, ThrowOnError>({
		url: '/api/version',
		...options
	});
};

/**
 * Healthcheck
 *
 * Check the health of the API.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiHealthcheck = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiHealthcheckData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiHealthcheckResponses, unknown, ThrowOnError>({
		url: '/api/healthcheck',
		...options
	});
};

/**
 * Obtain Token
 *
 * Authenticate with email and password to obtain JWT access/refresh tokens.
 *
 * For users without 2FA: Returns standard JWT token pair for immediate access.
 * For users with TOTP enabled: Returns a temporary token that must be exchanged for
 * a full token pair via POST /auth/token/pair/otp along with the TOTP code.
 * Users registered via Google SSO must use POST /auth/google/login instead.
 */
export const authObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainToken15Ffd9F5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthObtainToken15Ffd9F5Responses, unknown, ThrowOnError>({
		url: '/api/auth/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Refresh Token
 */
export const tokenRefresh = <ThrowOnError extends boolean = false>(
	options: Options<TokenRefreshData, ThrowOnError>
) => {
	return (options.client ?? client).post<TokenRefreshResponses, unknown, ThrowOnError>({
		url: '/api/auth/refresh',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Demo Obtain Token
 *
 * Create and authenticate a demo user account (demo mode only).
 *
 * Automatically creates a user account with the provided credentials if it doesn't exist,
 * then returns JWT tokens. Only available when DEMO_MODE is enabled in settings.
 * Email must end with @example.com.
 */
export const authDemoObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthDemoObtainTokenC7Afd43eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthDemoObtainTokenC7Afd43eResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/demo/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Obtain Token With Otp
 *
 * Complete 2FA authentication by exchanging temporary token and TOTP code for JWT tokens.
 *
 * Call this after POST /auth/token/pair returns a temporary token for a 2FA-enabled user.
 * Validates the TOTP code from the user's authenticator app and returns a standard JWT token
 * pair on success. Returns 401 if the TOTP code is invalid.
 */
export const authObtainTokenWithOtp = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainTokenWithOtp34A3A540Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthObtainTokenWithOtp34A3A540Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/token/pair/otp',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Google Login
 *
 * Authenticate or register via Google SSO using a Google ID token.
 *
 * Verifies the Google ID token, creates a new user if needed, and returns JWT tokens.
 * For existing Google SSO users, this is the only valid login method - they cannot
 * use password-based authentication.
 */
export const authGoogleLogin = <ThrowOnError extends boolean = false>(
	options: Options<AuthGoogleLoginB5A94684Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthGoogleLoginB5A94684Responses, unknown, ThrowOnError>({
		url: '/api/auth/google/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Setup Otp
 *
 * Get the TOTP provisioning URI to configure an authenticator app.
 *
 * Returns a URI (often as QR code) to scan with authenticator apps like Google Authenticator
 * or Authy. Returns 400 if 2FA is already enabled. After scanning, verify the setup with
 * POST /otp/verify to activate 2FA.
 */
export const otpSetupOtp = <ThrowOnError extends boolean = false>(
	options?: Options<OtpSetupOtp02090510Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<OtpSetupOtp02090510Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/setup',
		...options
	});
};

/**
 * Enable Otp
 *
 * Activate 2FA by verifying the TOTP code from the authenticator app.
 *
 * Call this after GET /otp/setup with a code from your authenticator app to confirm
 * it's configured correctly. On success, activates 2FA for the account. Future logins
 * will require the TOTP code via POST /auth/token/pair/otp. Returns 403 if code is invalid.
 */
export const otpEnableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpEnableOtp26F81030Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpEnableOtp26F81030Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Disable Otp
 *
 * Deactivate 2FA after verifying the current TOTP code.
 *
 * Requires the current TOTP code to prevent unauthorized disabling. After disabling,
 * login will only require email and password via POST /auth/token/pair. Returns 403
 * if the TOTP code is invalid.
 */
export const otpDisableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpDisableOtp57Ae806fData, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpDisableOtp57Ae806fResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/disable',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Export Data
 *
 * Request a GDPR-compliant export of all personal data.
 *
 * Initiates an asynchronous export of all user data including profile, events, tickets,
 * and submissions. The export will be emailed to the user when ready. Rate-limited to
 * prevent abuse.
 */
export const accountExportData = <ThrowOnError extends boolean = false>(
	options?: Options<AccountExportDataAfe120C1Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountExportDataAfe120C1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/export-data',
		...options
	});
};

/**
 * Me
 *
 * Retrieve the authenticated user's profile information.
 *
 * Returns complete user profile including email, name, location preferences, and 2FA status.
 * Use this to display user info in the UI or verify authentication status.
 */
export const accountMe = <ThrowOnError extends boolean = false>(
	options?: Options<AccountMe24Bacaa6Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<AccountMe24Bacaa6Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options
	});
};

/**
 * Update Profile
 *
 * Update the authenticated user's profile information.
 *
 * Allows updating name, location preferences, and other profile fields. Only provided
 * fields are updated. Returns the updated user profile.
 */
export const accountUpdateProfile = <ThrowOnError extends boolean = false>(
	options: Options<AccountUpdateProfile9153A9EdData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		AccountUpdateProfile9153A9EdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Register
 *
 * Create a new user account with email and password.
 *
 * Creates a new account and sends a verification email. The account is created but not
 * fully active until email is verified via POST /account/verify. If an unverified account
 * with the same email exists, resends the verification email. Returns 400 if a verified
 * account already exists.
 */
export const accountRegister = <ThrowOnError extends boolean = false>(
	options: Options<AccountRegisterFd08B2A7Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AccountRegisterFd08B2A7Responses, unknown, ThrowOnError>({
		url: '/api/account/register',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Verify Email
 *
 * Verify email address using the token from the verification email.
 *
 * Call this with the token received via email after registration. On success, activates
 * the account and returns the verified user profile along with JWT tokens for immediate login.
 * The verification token is single-use and expires after a set period.
 */
export const accountVerifyEmail = <ThrowOnError extends boolean = false>(
	options: Options<AccountVerifyEmail491D3E73Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountVerifyEmail491D3E73Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Resend Verification Email
 *
 * Resend the email verification link to the authenticated user.
 *
 * Use this if the original verification email was lost or expired. Returns 400 if the
 * email is already verified. Requires authentication with the unverified account's JWT.
 */
export const accountResendVerificationEmail = <ThrowOnError extends boolean = false>(
	options?: Options<AccountResendVerificationEmail91B4EeacData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountResendVerificationEmail91B4EeacResponses,
		AccountResendVerificationEmail91B4EeacErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/verify-resend',
		...options
	});
};

/**
 * Delete Account Request
 *
 * Initiate GDPR-compliant account deletion by sending confirmation email.
 *
 * Sends an email with a deletion confirmation link. The account is not deleted until
 * the user confirms via POST /account/delete-confirm with the token from the email.
 * This two-step process prevents accidental deletions.
 */
export const accountDeleteAccountRequest = <ThrowOnError extends boolean = false>(
	options?: Options<AccountDeleteAccountRequest955C6C07Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountDeleteAccountRequest955C6C07Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/delete-request',
		...options
	});
};

/**
 * Delete Account Confirm
 *
 * Permanently delete the account using the confirmation token from email.
 *
 * Call this with the token received via email after POST /account/delete-request.
 * This action is irreversible and deletes all user data. The deletion token is
 * single-use and expires after a set period.
 */
export const accountDeleteAccountConfirm = <ThrowOnError extends boolean = false>(
	options: Options<AccountDeleteAccountConfirmAd2Fc06fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountDeleteAccountConfirmAd2Fc06fResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/delete-confirm',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password Request
 *
 * Request a password reset by email.
 *
 * Sends a password reset link to the provided email if an account exists. Always returns
 * a success message to prevent user enumeration attacks. Google SSO users cannot use this
 * endpoint. After receiving the email, use POST /account/password/reset with the token.
 */
export const accountResetPasswordRequest = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordRequestFd35F180Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordRequestFd35F180Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset-request',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password
 *
 * Reset password using the token from the password reset email.
 *
 * Call this with the token received via email after POST /account/password/reset-request.
 * The new password must meet security requirements. The reset token is single-use and
 * expires after a set period. After reset, the user must login again with the new password.
 */
export const accountResetPassword = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPassword6783A58cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPassword6783A58cResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Dashboard Organizations
 *
 * View organizations for your dashboard filtered by your relationship to them.
 *
 * Filter by: organizations you own, are staff of, are a member of, or have pending requests to.
 * Shows only organizations you have permission to view. Use this to display "My Organizations"
 * sections in the UI.
 */
export const dashboardDashboardOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardOrganizationsF9B66D2bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardOrganizationsF9B66D2bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/organizations',
		...options
	});
};

/**
 * Dashboard Events
 *
 * View upcoming events for your dashboard filtered by your relationship to them.
 *
 * Filter by: events you're organizing, attending (RSVP'd or have tickets), invited to, or have
 * requested invitations to. Only shows future events you have permission to view. Use this to
 * display "My Events" sections in the UI.
 */
export const dashboardDashboardEvents = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEvents1B15D0A3Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEvents1B15D0A3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/events',
		...options
	});
};

/**
 * Dashboard Event Series
 *
 * View event series for your dashboard filtered by your relationship to them.
 *
 * Filter by: series you're organizing or series you're attending events in. Shows only
 * series you have permission to view. Use this to display "My Series" sections in the UI.
 */
export const dashboardDashboardEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventSeries1A412B6eData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventSeries1A412B6eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/event_series',
		...options
	});
};

/**
 * Dashboard Invitations
 *
 * View your pending event invitations.
 *
 * Returns invitations you've received but not yet acted on, sorted by event date (soonest first).
 * Use this to display a "Pending Invitations" section prompting users to RSVP or purchase tickets.
 */
export const dashboardDashboardInvitations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardInvitationsE6A99E10Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardInvitationsE6A99E10Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/invitations',
		...options
	});
};

/**
 * List Organizations
 *
 * Browse and search organizations visible to the current user.
 *
 * Results are filtered by visibility settings and user memberships. By default orders by
 * 'distance' (nearest first based on user location). Can also sort alphabetically by 'name'
 * or reverse with '-name'. Supports text search and filtering.
 */
export const organizationListOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<OrganizationListOrganizations35E65Ea8Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		OrganizationListOrganizations35E65Ea8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/',
		...options
	});
};

/**
 * Get Organization
 *
 * Retrieve organization details using its unique slug.
 *
 * Returns full organization information including description, location, member count, and
 * settings. Use this to display the organization profile page.
 */
export const organizationGetOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationGetOrganization9Ca2E10dData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationGetOrganization9Ca2E10dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this organization and marked for display on organization page.
 *
 * Returns documents, links, or media files provided by organization admins. Resources may
 * be public or restricted to members only. Supports filtering by type and text search.
 */
export const organizationListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationListResourcesE306E083Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationListResourcesE306E083Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/resources',
		...options
	});
};

/**
 * Create Membership Request
 *
 * Submit a request to become a member of this organization.
 *
 * Creates a membership request that organization admins can approve or reject. Being a
 * member may be required to access certain members-only events. Returns the created
 * request for tracking status.
 */
export const organizationCreateMembershipRequest = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationCreateMembershipRequestD65F2E88Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationCreateMembershipRequestD65F2E88Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/membership-requests',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an organization membership invitation using a token from invitation link.
 *
 * Creates an OrganizationMember record, granting you member status. Members may have
 * access to members-only events and resources. Returns the organization on success,
 * or 400 if the token is invalid/expired.
 */
export const organizationClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationClaimInvitationAff0B7BdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationClaimInvitationAff0B7BdResponses,
		OrganizationClaimInvitationAff0B7BdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Organization
 *
 * Get comprehensive organization details including all platform fee and Stripe fields.
 */
export const organizationadminGetOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetOrganizationEe051DfcData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetOrganizationEe051DfcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options
	});
};

/**
 * Update Organization
 *
 * Update organization by slug.
 */
export const organizationadminUpdateOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateOrganization647Dd787Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganization647Dd787Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Stripe Connect
 *
 * Get a link to onboard the organization to Stripe.
 */
export const organizationadminStripeConnect = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeConnectBd1985A7Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeConnectBd1985A7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/connect',
		...options
	});
};

/**
 * Stripe Account Verify
 *
 * Get the organization's Stripe account status.
 */
export const organizationadminStripeAccountVerify = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeAccountVerify28A2Edf8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeAccountVerify28A2Edf8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/account/verify',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to organization.
 */
export const organizationadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadLogoA63F5Bb2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadLogoA63F5Bb2Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to organization.
 */
export const organizationadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadCoverArt88711373Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadCoverArt88711373Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from organization.
 */
export const organizationadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteLogoBeee1C3bData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteLogoBeee1C3bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from organization.
 */
export const organizationadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteCoverArtF0051698Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteCoverArtF0051698Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-cover-art',
		...options
	});
};

/**
 * Create Event Series
 *
 * Create a new event series.
 */
export const organizationadminCreateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEventSeries6F1F5799Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEventSeries6F1F5799Responses,
		OrganizationadminCreateEventSeries6F1F5799Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Event
 *
 * Create a new event.
 */
export const organizationadminCreateEvent = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEvent577152FeData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEvent577152FeResponses,
		OrganizationadminCreateEvent577152FeErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Organization Tokens
 *
 * List all tokens for an organization that the user has admin rights for.
 */
export const organizationadminListOrganizationTokens = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListOrganizationTokens5Eef77EaData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListOrganizationTokens5Eef77EaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens',
		...options
	});
};

/**
 * Create Organization Token
 *
 * Create a new token for an organization.
 */
export const organizationadminCreateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminCreateOrganizationTokenEc1B7921Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateOrganizationTokenEc1B7921Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Organization Token
 *
 * Delete an organization token.
 */
export const organizationadminDeleteOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminDeleteOrganizationToken43391429Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteOrganizationToken43391429Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options
	});
};

/**
 * Update Organization Token
 *
 * Update an organization token.
 */
export const organizationadminUpdateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateOrganizationTokenE93748F4Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationTokenE93748F4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Membership Requests
 *
 * List all membership requests for an organization.
 */
export const organizationadminListMembershipRequests = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListMembershipRequests1916899cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembershipRequests1916899cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests',
		...options
	});
};

/**
 * Approve Membership Request
 *
 * Approve a membership request.
 */
export const organizationadminApproveMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminApproveMembershipRequest9C00554fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminApproveMembershipRequest9C00554fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/approve',
		...options
	});
};

/**
 * Reject Membership Request
 *
 * Reject a membership request.
 */
export const organizationadminRejectMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminRejectMembershipRequest9A76Ea52Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRejectMembershipRequest9A76Ea52Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/reject',
		...options
	});
};

/**
 * List Resources
 *
 * List all resources for a specific organization.
 */
export const organizationadminListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListResources65D0E23dData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListResources65D0E23dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options
	});
};

/**
 * Create Resource
 *
 * Create a new resource for the organization.
 *
 * Accepts multipart/form-data with individual form fields for each schema property.
 * For FILE type resources, include the file parameter.
 */
export const organizationadminCreateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateResource4Da14Ad1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateResource4Da14Ad1Responses,
		unknown,
		ThrowOnError
	>({
		...urlSearchParamsBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options,
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded',
			...options.headers
		}
	});
};

/**
 * Delete Resource
 *
 * Delete a resource from the organization.
 */
export const organizationadminDeleteResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteResource5B368A78Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteResource5B368A78Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Get Resource
 *
 * Retrieve a specific resource for the organization.
 */
export const organizationadminGetResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetResourceC341F241Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetResourceC341F241Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Update Resource
 *
 * Update a resource for the organization.
 */
export const organizationadminUpdateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateResourceCb50D37cData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateResourceCb50D37cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Members
 *
 * List all members of an organization.
 */
export const organizationadminListMembers = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListMembers6Ebb5B27Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembers6Ebb5B27Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members',
		...options
	});
};

/**
 * Remove Member
 *
 * Remove a member from an organization.
 */
export const organizationadminRemoveMember = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveMember8Db3F8FbData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveMember8Db3F8FbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members/{user_id}',
		...options
	});
};

/**
 * List Staff
 *
 * List all staff of an organization.
 */
export const organizationadminListStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListStaff8Adb77C2Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListStaff8Adb77C2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff',
		...options
	});
};

/**
 * Remove Staff
 *
 * Remove a staff member from an organization.
 */
export const organizationadminRemoveStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveStaff7Ad222C1Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveStaff7Ad222C1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options
	});
};

/**
 * Add Staff
 *
 * Add a staff member to an organization.
 */
export const organizationadminAddStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddStaff59537205Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddStaff59537205Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Staff Permissions
 *
 * Update a staff member's permissions.
 */
export const organizationadminUpdateStaffPermissions = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateStaffPermissions30C00DeeData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateStaffPermissions30C00DeeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}/permissions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Clear akk tags from the organization.
 */
export const organizationadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminClearTagsEa26Fba5Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminClearTagsEa26Fba5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const organizationadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddTagsE5Ad4164Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddTagsE5Ad4164Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const organizationadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveTagsBba1Cf6dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRemoveTagsBba1Cf6dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Events
 *
 * Browse and search events visible to the current user.
 *
 * Results are filtered by visibility rules (public/private), event status, and user permissions.
 * By default shows only upcoming events; set include_past=true to see past events.
 * Ordering: 'distance' (default) shows nearest events based on user location, 'start' shows
 * soonest first, '-start' shows latest first. Supports filtering by organization, series,
 * tags, and text search.
 */
export const eventListEvents = <ThrowOnError extends boolean = false>(
	options?: Options<EventListEvents8E334676Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<EventListEvents8E334676Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an event invitation using a token from an invitation link or email.
 *
 * Creates an EventInvitation record for the user, granting access to the event.
 * Invitations can bypass certain eligibility requirements like membership, capacity limits,
 * and RSVP deadlines. Returns the event on success, or 400 if the token is invalid/expired.
 */
export const eventClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventClaimInvitation331Da609Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventClaimInvitation331Da609Responses,
		EventClaimInvitation331Da609Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Event Attendees
 *
 * Get the list of confirmed attendees for this event.
 *
 * Returns users who have RSVPed 'yes' or have active tickets. Visibility is controlled by
 * event settings - attendee lists may be hidden from regular attendees. Organization staff
 * and event creators always have access.
 */
export const eventGetEventAttendees = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventAttendeesDb1E1A9fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventAttendeesDb1E1A9fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/attendee-list',
		...options
	});
};

/**
 * Get My Event Status
 *
 * Check the authenticated user's current status and eligibility for an event.
 *
 * Returns either the user's RSVP/ticket status if they've already joined, or an eligibility
 * check result explaining what steps are needed to attend. The eligibility check validates:
 * event status, RSVP deadline, invitations, organization membership, required questionnaires,
 * capacity limits, and ticket availability. Use this to determine which action to show users
 * (RSVP button, buy ticket, fill questionnaire, etc.).
 */
export const eventGetMyEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventGetMyEventStatusAa32B357Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetMyEventStatusAa32B357Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/my-status',
		...options
	});
};

/**
 * Request Invitation
 *
 * Submit a request to be invited to a private or invite-only event.
 *
 * Creates an invitation request that event organizers can approve or reject. Include an
 * optional message explaining why you want to attend. Returns 400 if you've already
 * submitted a request for this event. Check GET /{event_id}/my-status to see if you
 * need an invitation.
 */
export const eventRequestInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventRequestInvitationF160A39fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRequestInvitationF160A39fResponses,
		EventRequestInvitationF160A39fErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/request-invitation',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Resources
 *
 * Get supplementary resources attached to this event.
 *
 * Returns resources like documents, links, or media files provided by event organizers.
 * Resources may be public or restricted to attendees only. Supports filtering by type
 * (file, link, etc.) and text search.
 */
export const eventListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventListResources0190Bf0dData, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListResources0190Bf0dResponses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/events/{event_id}/resources',
			...options
		}
	);
};

/**
 * Delete Invitation Request
 *
 * Cancel a pending invitation request.
 *
 * Withdraws your invitation request for an event. Only works for your own requests
 * that haven't been decided yet. Returns 404 if the request doesn't exist or doesn't
 * belong to you.
 */
export const eventDeleteInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventDeleteInvitationRequestCe1F1Ba2Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventDeleteInvitationRequestCe1F1Ba2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/invitation-request/{request_id}',
		...options
	});
};

/**
 * List User Invitation Requests
 *
 * View your invitation requests across all events.
 *
 * Returns your invitation requests with their current status (pending/approved/rejected).
 * Filter by event_id to see requests for a specific event, or by status to see approved/
 * rejected requests. Use this to track which events you've requested access to.
 */
export const eventListUserInvitationRequests = <ThrowOnError extends boolean = false>(
	options?: Options<EventListUserInvitationRequests2F5F4C6bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventListUserInvitationRequests2F5F4C6bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/me/pending_invitation_requests',
		...options
	});
};

/**
 * Get Event By Slugs
 *
 * Retrieve event details using human-readable organization and event slugs.
 *
 * Use this for clean URLs like /events/tech-meetup/monthly-session. Returns 404 if
 * the event doesn't exist or you don't have permission to view it.
 */
export const eventGetEventBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventBySlugs768E8D40Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventBySlugs768E8D40Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{org_slug}/{event_slug}',
		...options
	});
};

/**
 * Get Event
 *
 * Retrieve full event details by ID.
 *
 * Returns comprehensive event information including description, location, times, organization,
 * ticket tiers, and visibility settings. Use this to display the event detail page.
 */
export const eventGetEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEvent8C855B0cData, ThrowOnError>
) => {
	return (options.client ?? client).get<EventGetEvent8C855B0cResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}',
		...options
	});
};

/**
 * Rsvp Event
 *
 * RSVP to a non-ticketed event (answer: 'yes', 'no', or 'maybe').
 *
 * Only works for events where requires_ticket=false. Runs full eligibility check including
 * event status, RSVP deadline, invitations, membership requirements, required questionnaires,
 * and capacity limits. Returns RSVP record on success. On failure, returns eligibility details
 * explaining what's blocking you and what next_step to take (e.g., complete questionnaire,
 * request invitation).
 */
export const eventRsvpEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventRsvpEvent1E924Ee4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRsvpEvent1E924Ee4Responses,
		EventRsvpEvent1E924Ee4Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/rsvp/{answer}',
		...options
	});
};

/**
 * List Tiers
 *
 * Get all ticket tiers available for purchase at this event.
 *
 * Returns ticket types with pricing, availability, and sales windows. Filters tiers based
 * on user eligibility - you'll only see tiers you're allowed to purchase. Check visibility
 * settings and sales_start_at/sales_end_at to determine which are currently on sale.
 */
export const eventListTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventListTiers8C403E03Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListTiers8C403E03Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/tiers',
		...options
	});
};

/**
 * Ticket Checkout
 *
 * Purchase a fixed-price event ticket.
 *
 * Runs eligibility checks before allowing purchase. For online payment: returns Stripe
 * checkout URL to redirect user for payment. For free/offline/at-the-door tickets: creates
 * ticket immediately and returns it. Cannot be used for pay-what-you-can (PWYC) tiers -
 * use POST /{event_id}/tickets/{tier_id}/checkout/pwyc instead. On eligibility failure,
 * returns 400 with eligibility details explaining what's blocking you and what next_step
 * to take (e.g., complete questionnaire, request invitation, wait for tickets to go on sale).
 */
export const eventTicketCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketCheckoutC182Bc84Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketCheckoutC182Bc84Responses,
		EventTicketCheckoutC182Bc84Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout',
		...options
	});
};

/**
 * Ticket Pwyc Checkout
 *
 * Purchase a pay-what-you-can (PWYC) ticket with a user-specified amount.
 *
 * Only works for ticket tiers with price_type=PWYC. Validates the amount is within the
 * tier's min/max bounds. Returns Stripe checkout URL for online payment, or creates ticket
 * immediately for free/offline payment methods. Returns 400 for non-PWYC tiers, if amount
 * is out of bounds, or on eligibility failure (with eligibility details explaining what's
 * blocking you and what next_step to take).
 */
export const eventTicketPwycCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketPwycCheckoutC6Fa6BebData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketPwycCheckoutC6Fa6BebResponses,
		EventTicketPwycCheckoutC6Fa6BebErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout/pwyc',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Questionnaire
 *
 * Retrieve a questionnaire required for event admission.
 *
 * Returns the questionnaire structure with all sections and questions. Questions may be
 * shuffled based on questionnaire settings. Use this to display the form that users must
 * complete before accessing the event.
 */
export const eventGetQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventGetQuestionnaire30850BedData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetQuestionnaire30850BedResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}',
		...options
	});
};

/**
 * Submit Questionnaire
 *
 * Submit answers to an event admission questionnaire.
 *
 * Validates all required questions are answered. If submission status is 'ready', triggers
 * automatic evaluation (may use LLM for free-text answers). Depending on the questionnaire's
 * evaluation_mode (automatic/manual/hybrid), results may be immediate or pending staff review.
 * Passing the questionnaire may be required before you can RSVP or purchase tickets.
 */
export const eventSubmitQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventSubmitQuestionnaire3D2Bc01aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventSubmitQuestionnaire3D2Bc01aResponses,
		EventSubmitQuestionnaire3D2Bc01aErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}/submit',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Event Token
 *
 * Delete an event token.
 */
export const eventadminDeleteEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteEventToken95C75F5eData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteEventToken95C75F5eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens/{token_id}',
		...options
	});
};

/**
 * Update Event Token
 *
 * Update an event token.
 */
export const eventadminUpdateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventTokenDe8C4F7bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventTokenDe8C4F7bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Event Tokens
 *
 * List all event tokens.
 */
export const eventadminListEventTokens = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventTokens041Bc1A3Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventTokens041Bc1A3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options
	});
};

/**
 * Create Event Token
 *
 * Create a new event token.
 */
export const eventadminCreateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateEventToken3249A21dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateEventToken3249A21dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Decide Invitation Request
 *
 * Request an invitation to an event.
 */
export const eventadminDecideInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDecideInvitationRequestFeefb06fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminDecideInvitationRequestFeefb06fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-request/{request_id}/{decision}',
		...options
	});
};

/**
 * List Event Invitation Requests
 *
 * List all pending invitation requests for the current user.
 */
export const eventadminListEventInvitationRequests = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventInvitationRequestsF499892cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventInvitationRequestsF499892cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation_requests',
		...options
	});
};

/**
 * Update Event
 *
 * Update event by ID.
 */
export const eventadminUpdateEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEvent66009328Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEvent66009328Responses,
		EventadminUpdateEvent66009328Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Event Status
 *
 * Update event status to the specified value.
 */
export const eventadminUpdateEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventStatusD52Bc9EdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUpdateEventStatusD52Bc9EdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/actions/update-status/{status}',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to event.
 */
export const eventadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadLogo345F664bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadLogo345F664bResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to event.
 */
export const eventadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadCoverArt46C05FfdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadCoverArt46C05FfdResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event.
 */
export const eventadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteLogoDaad655dData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteLogoDaad655dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event.
 */
export const eventadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteCoverArt1A2B8De7Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteCoverArt1A2B8De7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminClearTags3D621C50Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminClearTags3D621C50Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const eventadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminAddTagsFf2E6A58Data, ThrowOnError>
) => {
	return (options.client ?? client).post<EventadminAddTagsFf2E6A58Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/event-admin/{event_id}/tags',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options.headers
			}
		}
	);
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminRemoveTags1B17E480Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminRemoveTags1B17E480Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Ticket Tiers
 *
 * List all ticket tiers for an event.
 */
export const eventadminListTicketTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketTiers280Bd473Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketTiers280Bd473Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tiers',
		...options
	});
};

/**
 * Create Ticket Tier
 *
 * Create a new ticket tier for an event.
 */
export const eventadminCreateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateTicketTierB8Bf74A9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateTicketTierB8Bf74A9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ticket Tier
 *
 * Delete a ticket tier.
 *
 * Note this might raise a 400 if ticket with this tier where already bought.
 */
export const eventadminDeleteTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteTicketTierD1B87F3aData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteTicketTierD1B87F3aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options
	});
};

/**
 * Update Ticket Tier
 *
 * Update a ticket tier.
 */
export const eventadminUpdateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateTicketTier46168F17Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateTicketTier46168F17Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Tickets
 *
 * List tickets for an event with optional filters.
 *
 * Supports filtering by:
 * - status: Filter by ticket status (PENDING, ACTIVE, CANCELLED, CHECKED_IN)
 * - tier__payment_method: Filter by payment method (ONLINE, OFFLINE, AT_THE_DOOR, FREE)
 */
export const eventadminListTickets = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketsCd223F8eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketsCd223F8eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets',
		...options
	});
};

/**
 * Get Ticket
 *
 * Get a ticket by its ID.
 */
export const eventadminGetTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminGetTicketB243Ed07Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminGetTicketB243Ed07Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}',
		...options
	});
};

/**
 * Confirm Ticket Payment
 *
 * Confirm payment for a pending offline ticket and activate it.
 */
export const eventadminConfirmTicketPayment = <ThrowOnError extends boolean = false>(
	options: Options<EventadminConfirmTicketPayment2Cf8E158Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminConfirmTicketPayment2Cf8E158Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/confirm-payment',
		...options
	});
};

/**
 * Mark Ticket Refunded
 *
 * Mark a manual payment ticket as refunded and cancel it.
 *
 * This endpoint is for offline/at-the-door tickets only.
 * Online tickets (Stripe) are automatically managed via webhooks.
 */
export const eventadminMarkTicketRefunded = <ThrowOnError extends boolean = false>(
	options: Options<EventadminMarkTicketRefundedCaeacbedData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminMarkTicketRefundedCaeacbedResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/mark-refunded',
		...options
	});
};

/**
 * Cancel Ticket
 *
 * Cancel a manual payment ticket.
 *
 * This endpoint is for offline/at-the-door tickets only.
 * Online tickets (Stripe) should be refunded via Stripe Dashboard.
 */
export const eventadminCancelTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCancelTicket61A99A04Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCancelTicket61A99A04Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/cancel',
		...options
	});
};

/**
 * Check In Ticket
 *
 * Check in an attendee by scanning their ticket.
 */
export const eventadminCheckInTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCheckInTicketEeb67498Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCheckInTicketEeb67498Responses,
		EventadminCheckInTicketEeb67498Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/check-in',
		...options
	});
};

/**
 * List Invitations
 *
 * List all invitations for registered users.
 */
export const eventadminListInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListInvitationsA80E9Bd8Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListInvitationsA80E9Bd8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options
	});
};

/**
 * Create Invitations
 *
 * Create direct invitations for users by email addresses.
 */
export const eventadminCreateInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateInvitationsC009773bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateInvitationsC009773bResponses,
		EventadminCreateInvitationsC009773bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Invitations
 *
 * List all pending invitations for unregistered users.
 */
export const eventadminListPendingInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingInvitations97B79356Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingInvitations97B79356Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-invitations',
		...options
	});
};

/**
 * Delete Invitation Endpoint
 *
 * Delete an invitation (registered or pending).
 */
export const eventadminDeleteInvitationEndpoint = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteInvitationEndpointD1971F03Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteInvitationEndpointD1971F03Responses,
		EventadminDeleteInvitationEndpointD1971F03Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations/{invitation_type}/{invitation_id}',
		...options
	});
};

/**
 * List Rsvps
 *
 * List all RSVPs for an event.
 *
 * Shows all users who have RSVPed to the event with their status.
 * Use this to see who is attending, not attending, or maybe attending.
 * Supports filtering by status and user_id.
 */
export const eventadminListRsvps = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListRsvps79A37E29Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListRsvps79A37E29Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps',
		...options
	});
};

/**
 * Create Rsvp
 *
 * Create an RSVP on behalf of a user.
 *
 * Use this when a user contacts the organization to RSVP outside the platform
 * (e.g., via text, email, or in person).
 */
export const eventadminCreateRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateRsvp2D0C0A5cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateRsvp2D0C0A5cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Rsvp
 *
 * Delete an RSVP.
 *
 * Use this to remove a user's RSVP entirely from the event.
 * Note: This is different from setting status to "no" - it completely removes the RSVP record.
 */
export const eventadminDeleteRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteRsvp601Fb486Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteRsvp601Fb486Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps/{rsvp_id}',
		...options
	});
};

/**
 * Get Rsvp
 *
 * Get details of a specific RSVP.
 */
export const eventadminGetRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminGetRsvp19Bab3C3Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventadminGetRsvp19Bab3C3Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps/{rsvp_id}',
		...options
	});
};

/**
 * Update Rsvp
 *
 * Update an existing RSVP.
 *
 * Use this to change a user's RSVP status when they contact you to update their response.
 */
export const eventadminUpdateRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateRsvpE81A506eData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateRsvpE81A506eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps/{rsvp_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * My Permissions
 *
 * Get a user's permission map, per organization.
 */
export const permissionMyPermissions = <ThrowOnError extends boolean = false>(
	options?: Options<PermissionMyPermissions0Ff0B5BcData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		PermissionMyPermissions0Ff0B5BcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/permissions/my-permissions',
		...options
	});
};

/**
 * List Event Series
 *
 * Browse event series (recurring event collections) visible to the current user.
 *
 * Event series group related recurring events (e.g., "Monthly Tech Meetup"). Results are
 * filtered by visibility and permissions. Supports filtering by organization and text search.
 */
export const eventseriesListEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<EventseriesListEventSeries2C0AbecaData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventseriesListEventSeries2C0AbecaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/',
		...options
	});
};

/**
 * Get Event Series By Slugs
 *
 * Retrieve event series details using human-readable organization and series slugs.
 *
 * Use this for clean URLs like /event-series/tech-meetup/monthly-sessions. Returns 404
 * if the series doesn't exist or you don't have permission to view it.
 */
export const eventseriesGetEventSeriesBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesBySlugs5445C708Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesBySlugs5445C708Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{org_slug}/{series_slug}',
		...options
	});
};

/**
 * Get Event Series
 *
 * Retrieve full event series details by ID.
 *
 * Returns series information including description, organization, and settings. Use this
 * to display the series profile page and list related events.
 */
export const eventseriesGetEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeries4E879B59Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeries4E879B59Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this event series.
 *
 * Returns documents, links, or media files that apply to all events in the series.
 * Resources may be public or restricted based on visibility settings. Supports filtering
 * by type and text search.
 */
export const eventseriesListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesListResources84978C0cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesListResources84978C0cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}/resources',
		...options
	});
};

/**
 * Delete Event Series
 *
 * Permanently delete an event series (admin only).
 *
 * Removes the series. Events in the series are not deleted but become standalone.
 * Requires 'delete_event_series' permission (typically organization owners only).
 */
export const eventseriesadminDeleteEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteEventSeries459C81E0Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteEventSeries459C81E0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options
	});
};

/**
 * Update Event Series
 *
 * Update event series details (admin only).
 *
 * Modify series name, description, or settings. Requires 'edit_event_series' permission
 * (organization staff/owners). Changes apply to the series but not individual events.
 */
export const eventseriesadminUpdateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUpdateEventSeries9E890928Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventseriesadminUpdateEventSeries9E890928Responses,
		EventseriesadminUpdateEventSeries9E890928Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Upload Logo
 *
 * Upload a logo image for the event series (admin only).
 *
 * Replaces the existing logo. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadLogo10Ea000cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadLogo10Ea000cResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art/banner image for the event series (admin only).
 *
 * Replaces the existing cover art. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadCoverArtD7D4C16fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadCoverArtD7D4C16fResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event series (admin only).
 *
 * Removes the logo image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteLogoDd1F64B0Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteLogoDd1F64B0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event series (admin only).
 *
 * Removes the cover art image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteCoverArt8275189aData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteCoverArt8275189aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove all tags from the event series (admin only).
 *
 * Clears all categorization tags. Requires 'edit_event_series' permission.
 */
export const eventseriesadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminClearTagsBf176644Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminClearTagsBf176644Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add tags to categorize the event series (admin only).
 *
 * Tags help users discover series through filtering and search. Returns the updated tag list.
 * Requires 'edit_event_series' permission.
 */
export const eventseriesadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminAddTags4E2D64C9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminAddTags4E2D64C9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove specific tags from the event series (admin only).
 *
 * Removes only the specified tags, keeping others. Returns the updated tag list. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminRemoveTags3A6964A4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminRemoveTags3A6964A4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Potluck Items
 *
 * View all potluck items for this event.
 *
 * Returns items users can bring, with flags indicating if each item is assigned and if you
 * own it. Available when event.potluck_open=true. Use this to display what's needed and
 * what you've claimed.
 */
export const potluckListPotluckItems = <ThrowOnError extends boolean = false>(
	options: Options<PotluckListPotluckItems4B7694CaData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		PotluckListPotluckItems4B7694CaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options
	});
};

/**
 * Create Potluck Item
 *
 * Add a new item to the event's potluck list.
 *
 * Specify item name, quantity, and optional notes. Attendees can claim items via
 * POST /{event_id}/potluck/{item_id}/claim. Requires permission to create potluck items.
 */
export const potluckCreatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckCreatePotluckItem7C5C51D8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckCreatePotluckItem7C5C51D8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Potluck Item
 *
 * Remove a potluck item from the event.
 *
 * Deletes the item even if it's been claimed. Requires permission to manage potluck items.
 */
export const potluckDeletePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckDeletePotluckItem1017740dData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		PotluckDeletePotluckItem1017740dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options
	});
};

/**
 * Update Potluck Item
 *
 * Update a potluck item's details.
 *
 * Modify item name, quantity, or notes. Requires permission to manage potluck items
 * (typically event organizers).
 */
export const potluckUpdatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUpdatePotluckItem30A0Eb7aData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		PotluckUpdatePotluckItem30A0Eb7aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Claim Potluck Item
 *
 * Claim a potluck item to bring to the event.
 *
 * Assigns the item to you. Returns 400 if already claimed by someone else. Use this when
 * you want to commit to bringing a specific item.
 */
export const potluckClaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckClaimPotluckItem369B6De6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckClaimPotluckItem369B6De6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/claim',
		...options
	});
};

/**
 * Unclaim Potluck Item
 *
 * Release a potluck item you previously claimed.
 *
 * Makes the item available for others to claim. Returns 404 if the item isn't claimed
 * by you.
 */
export const potluckUnclaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUnclaimPotluckItem7A831Bb1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckUnclaimPotluckItem7A831Bb1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/unclaim',
		...options
	});
};

/**
 * List Org Questionnaires
 *
 * Browse questionnaires you have permission to view or manage.
 *
 * Returns questionnaires from organizations where you have staff/owner access. Use this to
 * find questionnaires to attach to events or review submissions. Supports filtering by
 * event_id or event_series_id to find questionnaires assigned to specific events or series.
 *
 * Each questionnaire includes a count of pending evaluations (submissions with no evaluation
 * or evaluations with "pending review" status).
 */
export const questionnaireListOrgQuestionnaires = <ThrowOnError extends boolean = false>(
	options?: Options<QuestionnaireListOrgQuestionnaires049Ecff2Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		QuestionnaireListOrgQuestionnaires049Ecff2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/',
		...options
	});
};

/**
 * Create Org Questionnaire
 *
 * Create a new questionnaire for an organization (admin only).
 *
 * Creates a questionnaire with specified type (admission, membership, feedback, or generic)
 * and optional max_submission_age. After creation, add sections and questions via
 * POST /questionnaires/{id}/sections and /multiple-choice-questions endpoints. Requires
 * 'create_questionnaire' permission (organization staff/owners).
 */
export const questionnaireCreateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateOrgQuestionnaire72Bc9Ad6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateOrgQuestionnaire72Bc9Ad6Responses,
		QuestionnaireCreateOrgQuestionnaire72Bc9Ad6Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{organization_id}/create-questionnaire',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Org Questionnaire
 *
 * Delete an organization questionnaire (admin only).
 *
 * Permanently removes the questionnaire. Requires 'delete_questionnaire' permission.
 */
export const questionnaireDeleteOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteOrgQuestionnaire5Ece812dData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteOrgQuestionnaire5Ece812dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Get Org Questionnaire
 *
 * Retrieve a questionnaire's details and structure (admin only).
 *
 * Returns the questionnaire with all sections, questions, and settings. Use this to view or
 * edit an existing questionnaire. Requires permission to manage the organization's questionnaires.
 */
export const questionnaireGetOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetOrgQuestionnaireEe365C9bData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetOrgQuestionnaireEe365C9bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Update Org Questionnaire
 *
 * Update organization questionnaire and underlying questionnaire settings (admin only).
 *
 * Allows updating both OrganizationQuestionnaire wrapper fields (max_submission_age,
 * questionnaire_type) and the underlying Questionnaire fields (name, min_score, llm_guidelines,
 * shuffle_questions, shuffle_sections, evaluation_mode, can_retake_after, max_attempts).
 * Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateOrgQuestionnaire3F1Fd61bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateOrgQuestionnaire3F1Fd61bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Section
 *
 * Add a section to organize questions in the questionnaire (admin only).
 *
 * Sections group related questions. Specify section name and display order. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateSection791B116fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateSection791B116fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Section
 *
 * Delete a questionnaire section (admin only).
 *
 * Removes the section and all questions within it. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteSectionBd512996Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteSectionBd512996Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options
	});
};

/**
 * Update Section
 *
 * Update a questionnaire section's details (admin only).
 *
 * Modify section name or display order. Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateSection46243473Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateSection46243473Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Question
 *
 * Add a multiple-choice question to the questionnaire (admin only).
 *
 * Create a question with predefined answer options. After creation, add options via
 * POST /questionnaires/{id}/multiple-choice-questions/{question_id}/options. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcQuestionC6Cae14cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcQuestionC6Cae14cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Question
 *
 * Delete a multiple choice question (admin only).
 *
 * Removes the question and all its options. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcQuestion4B88094fData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcQuestion4B88094fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options
	});
};

/**
 * Update Mc Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcQuestion522B54FfData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcQuestion522B54FfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireCreateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcOptionC2Ac408eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcOptionC2Ac408eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}/options',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Option
 *
 * Delete a multiple choice option (admin only).
 *
 * Removes the option from a question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcOption9D470B45Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcOption9D470B45Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options
	});
};

/**
 * Update Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcOption30D7B38dData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcOption30D7B38dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Ft Question
 *
 * Add a free-text question to the questionnaire (admin only).
 *
 * Create an open-ended question for text responses. Can be auto-evaluated by LLM based on
 * scoring criteria. Requires 'edit_questionnaire' permission.
 */
export const questionnaireCreateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateFtQuestion0D3258A3Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateFtQuestion0D3258A3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ft Question
 *
 * Delete a free text question (admin only).
 *
 * Removes the question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteFtQuestionE19C7CfeData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteFtQuestionE19C7CfeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options
	});
};

/**
 * Update Ft Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateFtQuestionD104Fb8fData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateFtQuestionD104Fb8fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Submissions
 *
 * View user submissions for this questionnaire (admin only).
 *
 * Returns submitted questionnaires ready for review. Use this to see who has applied for
 * event access and their responses. Requires 'evaluate_questionnaire' permission.
 *
 * Filtering:
 * - evaluation_status: Filter by evaluation status (approved/rejected/pending review/no_evaluation)
 *
 * Ordering:
 * - submitted_at: Oldest submissions first
 * - -submitted_at: Newest submissions first (default)
 */
export const questionnaireListSubmissions = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireListSubmissions1E29E1DdData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireListSubmissions1E29E1DdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions',
		...options
	});
};

/**
 * Get Submission Detail
 *
 * View detailed answers for a specific submission (admin only).
 *
 * Returns all questions and the user's answers, plus automatic evaluation results if available.
 * Use this to review a submission before manual approval/rejection. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireGetSubmissionDetail = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetSubmissionDetailA7F91711Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetSubmissionDetailA7F91711Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}',
		...options
	});
};

/**
 * Evaluate Submission
 *
 * Manually approve or reject a questionnaire submission (admin only).
 *
 * Overrides automatic evaluation or provides decision for manual-review questionnaires.
 * Approved users can then RSVP or purchase tickets for the event. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireEvaluateSubmission = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireEvaluateSubmission201Fbb98Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireEvaluateSubmission201Fbb98Responses,
		QuestionnaireEvaluateSubmission201Fbb98Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}/evaluate',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Questionnaire Status
 *
 * Update the status of a questionnaire (admin only).
 *
 * Changes the questionnaire status between DRAFT, READY, and PUBLISHED.
 * - DRAFT: Questionnaire is being created/edited
 * - READY: Questionnaire is complete but not yet published
 * - PUBLISHED: Questionnaire is live and can be taken by users
 *
 * Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateQuestionnaireStatus = <
	ThrowOnError extends boolean = false
>(
	options: Options<QuestionnaireUpdateQuestionnaireStatusD407F0B8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireUpdateQuestionnaireStatusD407F0B8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/status/{status}',
		...options
	});
};

/**
 * Replace Events
 *
 * Replace all assigned events for this questionnaire (admin only).
 *
 * Batch operation to set exactly which events require this questionnaire. Validates that
 * events belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEvents = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEvents61B9B424Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEvents61B9B424Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event
 *
 * Unassign a single event from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEvent53Ab14F2Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEvent53Ab14F2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Assign Event
 *
 * Assign a single event to this questionnaire (admin only).
 *
 * Adds one event that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEventFd28Ce9fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEventFd28Ce9fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Replace Event Series
 *
 * Replace all assigned event series for this questionnaire (admin only).
 *
 * Batch operation to set exactly which event series require this questionnaire. Validates that
 * series belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEventSeries16Ff6230Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEventSeries16Ff6230Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event Series
 *
 * Unassign a single event series from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event series. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEventSeriesF4900983Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEventSeriesF4900983Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Assign Event Series
 *
 * Assign a single event series to this questionnaire (admin only).
 *
 * Adds one event series that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEventSeries6Bd6Af5dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEventSeries6Bd6Af5dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Get General Preferences
 *
 * Get your global preferences that apply across all organizations and events.
 *
 * Returns default notification and privacy settings. These serve as defaults that can be
 * overridden at organization, series, or event level.
 */
export const userpreferencesGetGeneralPreferences = <ThrowOnError extends boolean = false>(
	options?: Options<UserpreferencesGetGeneralPreferencesA2D19E5eData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		UserpreferencesGetGeneralPreferencesA2D19E5eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options
	});
};

/**
 * Update Global Preferences
 *
 * Update your global preference defaults.
 *
 * Modify notification and privacy settings. Set overwrite_children=true to cascade changes
 * to all organization/series/event-level preferences, overriding custom settings.
 */
export const userpreferencesUpdateGlobalPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateGlobalPreferences6C21504aData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateGlobalPreferences6C21504aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Organization Preferences
 *
 * Get your preferences for a specific organization.
 *
 * Returns organization-level overrides for notifications and privacy. Falls back to global
 * preferences if not customized.
 */
export const userpreferencesGetOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetOrganizationPreferences1Be188BbData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetOrganizationPreferences1Be188BbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options
	});
};

/**
 * Update Organization Preferences
 *
 * Update preferences for a specific organization.
 *
 * Overrides global defaults for this organization. Set overwrite_children=true to cascade
 * changes to all series/event-level preferences within this organization.
 */
export const userpreferencesUpdateOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateOrganizationPreferences1347Ae9bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateOrganizationPreferences1347Ae9bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Series Preferences
 *
 * Get your preferences for a specific event series.
 *
 * Returns series-level overrides for notifications. Falls back to organization or global
 * preferences if not customized.
 */
export const userpreferencesGetEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetEventSeriesPreferences7381C375Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventSeriesPreferences7381C375Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options
	});
};

/**
 * Update Event Series Preferences
 *
 * Update preferences for a specific event series.
 *
 * Overrides organization/global defaults for this series. Set overwrite_children=true to
 * cascade changes to all individual event preferences within this series.
 */
export const userpreferencesUpdateEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateEventSeriesPreferencesEbddef9bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventSeriesPreferencesEbddef9bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Preferences
 *
 * Get your preferences for a specific event.
 *
 * Returns event-level overrides for notifications. Falls back to series, organization, or
 * global preferences if not customized.
 */
export const userpreferencesGetEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesGetEventPreferencesFf07EabfData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventPreferencesFf07EabfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options
	});
};

/**
 * Update Event Preferences
 *
 * Update preferences for a specific event.
 *
 * Overrides series/organization/global defaults for this event. The most specific preference
 * level always takes precedence.
 */
export const userpreferencesUpdateEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesUpdateEventPreferences97Fe8C70Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventPreferences97Fe8C70Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Handle Webhook
 *
 * Process Stripe webhook events for payment processing.
 *
 * Handles payment confirmations, failures, and refunds. Verifies webhook signature for
 * security. This endpoint is called by Stripe, not by clients directly.
 */
export const stripewebhookHandleWebhook = <ThrowOnError extends boolean = false>(
	options?: Options<StripewebhookHandleWebhook9C445F3eData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		StripewebhookHandleWebhook9C445F3eResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/stripe/webhook',
		...options
	});
};

/**
 * List Tags
 *
 * Browse and search all available tags in the system.
 *
 * Tags are used to categorize organizations, events, and series. Supports autocomplete via
 * the 'search' query parameter (e.g., /api/tags/?search=tech). Use this to populate tag
 * selection dropdowns or filters.
 */
export const tagListTags = <ThrowOnError extends boolean = false>(
	options?: Options<TagListTags186B44C3Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<TagListTags186B44C3Responses, unknown, ThrowOnError>({
		url: '/api/tags/',
		...options
	});
};

/**
 * List Cities
 *
 * Search and browse cities from the global database.
 *
 * Supports filtering by country and searching by city name. Use the 'search' parameter
 * for autocomplete functionality. Useful for setting user location preferences or
 * filtering events by location.
 */
export const cityListCities = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCitiesDf392B53Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCitiesDf392B53Responses, unknown, ThrowOnError>({
		url: '/api/cities/',
		...options
	});
};

/**
 * List Countries
 *
 * Get a list of all countries with cities in the database.
 *
 * Returns country names for filtering cities. Use this to populate country
 * selection dropdowns in location pickers.
 */
export const cityListCountries = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCountries59082182Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCountries59082182Responses, unknown, ThrowOnError>(
		{
			url: '/api/cities/countries',
			...options
		}
	);
};

/**
 * Get City
 *
 * Retrieve detailed information for a specific city by ID.
 *
 * Returns city details including name, coordinates, and country. Use this to
 * get full city information after selecting from a search result.
 */
export const cityGetCity = <ThrowOnError extends boolean = false>(
	options: Options<CityGetCityC671E9A0Data, ThrowOnError>
) => {
	return (options.client ?? client).get<CityGetCityC671E9A0Responses, unknown, ThrowOnError>({
		url: '/api/cities/{city_id}',
		...options
	});
};
