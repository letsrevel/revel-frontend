// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	formDataBodySerializer,
	type Options as Options2,
	type TDataShape
} from './client';
import { client } from './client.gen';
import type {
	AccountDeleteAccountConfirmDf87109aData,
	AccountDeleteAccountConfirmDf87109aResponses,
	AccountDeleteAccountRequestBfed9E9cData,
	AccountDeleteAccountRequestBfed9E9cResponses,
	AccountExportDataFb4E5B30Data,
	AccountExportDataFb4E5B30Responses,
	AccountMeD8441F6bData,
	AccountMeD8441F6bResponses,
	AccountRegisterE40E7009Data,
	AccountRegisterE40E7009Responses,
	AccountResendVerificationEmailF37Edb18Data,
	AccountResendVerificationEmailF37Edb18Errors,
	AccountResendVerificationEmailF37Edb18Responses,
	AccountResetPassword11226E1bData,
	AccountResetPassword11226E1bResponses,
	AccountResetPasswordRequest26B625E6Data,
	AccountResetPasswordRequest26B625E6Responses,
	AccountUpdateProfile0Abfea16Data,
	AccountUpdateProfile0Abfea16Responses,
	AccountVerifyEmail559273EcData,
	AccountVerifyEmail559273EcResponses,
	ApiApiHealthcheckData,
	ApiApiHealthcheckResponses,
	ApiApiVersionData,
	ApiApiVersionResponses,
	AuthDemoObtainToken1C973532Data,
	AuthDemoObtainToken1C973532Responses,
	AuthGoogleLogin79107Ca3Data,
	AuthGoogleLogin79107Ca3Responses,
	AuthObtainToken89D16376Data,
	AuthObtainToken89D16376Responses,
	AuthObtainTokenWithOtpC7428120Data,
	AuthObtainTokenWithOtpC7428120Responses,
	CityGetCityCc9D2716Data,
	CityGetCityCc9D2716Responses,
	CityListCities0Bf56Bd4Data,
	CityListCities0Bf56Bd4Responses,
	CityListCountries9Ef2F0C1Data,
	CityListCountries9Ef2F0C1Responses,
	DashboardDashboardEventsA5Bdad35Data,
	DashboardDashboardEventsA5Bdad35Responses,
	DashboardDashboardEventSeriesAc85Def8Data,
	DashboardDashboardEventSeriesAc85Def8Responses,
	DashboardDashboardInvitations2C467069Data,
	DashboardDashboardInvitations2C467069Responses,
	DashboardDashboardOrganizations88A0E87dData,
	DashboardDashboardOrganizations88A0E87dResponses,
	EventadminAddTags5Ac7D15bData,
	EventadminAddTags5Ac7D15bResponses,
	EventadminCheckInTicketB4Df1Ee8Data,
	EventadminCheckInTicketB4Df1Ee8Errors,
	EventadminCheckInTicketB4Df1Ee8Responses,
	EventadminClearTags79613E5cData,
	EventadminClearTags79613E5cResponses,
	EventadminConfirmTicketPayment392Fa846Data,
	EventadminConfirmTicketPayment392Fa846Responses,
	EventadminCreateEventToken8D75Ec90Data,
	EventadminCreateEventToken8D75Ec90Responses,
	EventadminCreateInvitations8Cbbe3D0Data,
	EventadminCreateInvitations8Cbbe3D0Errors,
	EventadminCreateInvitations8Cbbe3D0Responses,
	EventadminCreateTicketTier86110675Data,
	EventadminCreateTicketTier86110675Responses,
	EventadminDecideInvitationRequestAa282797Data,
	EventadminDecideInvitationRequestAa282797Responses,
	EventadminDeleteEventToken7B2Bedc8Data,
	EventadminDeleteEventToken7B2Bedc8Responses,
	EventadminDeleteInvitationEndpoint48Ed771cData,
	EventadminDeleteInvitationEndpoint48Ed771cErrors,
	EventadminDeleteInvitationEndpoint48Ed771cResponses,
	EventadminDeleteTicketTier3034039fData,
	EventadminDeleteTicketTier3034039fResponses,
	EventadminListEventInvitationRequests3B399060Data,
	EventadminListEventInvitationRequests3B399060Responses,
	EventadminListEventTokens608332C9Data,
	EventadminListEventTokens608332C9Responses,
	EventadminListInvitationsD3B1C3C1Data,
	EventadminListInvitationsD3B1C3C1Responses,
	EventadminListPendingInvitations50B3417eData,
	EventadminListPendingInvitations50B3417eResponses,
	EventadminListPendingTickets989C1421Data,
	EventadminListPendingTickets989C1421Responses,
	EventadminListTicketTiers2Cbd74BeData,
	EventadminListTicketTiers2Cbd74BeResponses,
	EventadminRemoveTags64A3F36fData,
	EventadminRemoveTags64A3F36fResponses,
	EventadminUpdateEvent64Fc71FeData,
	EventadminUpdateEvent64Fc71FeErrors,
	EventadminUpdateEvent64Fc71FeResponses,
	EventadminUpdateEventStatusBf5Ec3E2Data,
	EventadminUpdateEventStatusBf5Ec3E2Responses,
	EventadminUpdateEventToken40B03978Data,
	EventadminUpdateEventToken40B03978Responses,
	EventadminUpdateTicketTier54A2F559Data,
	EventadminUpdateTicketTier54A2F559Responses,
	EventadminUploadCoverArtDa4Cff21Data,
	EventadminUploadCoverArtDa4Cff21Responses,
	EventadminUploadLogoF6692Dc9Data,
	EventadminUploadLogoF6692Dc9Responses,
	EventClaimInvitation61Ff7B9fData,
	EventClaimInvitation61Ff7B9fErrors,
	EventClaimInvitation61Ff7B9fResponses,
	EventDeleteInvitationRequest120F7CdaData,
	EventDeleteInvitationRequest120F7CdaResponses,
	EventGetEventAttendees3C4D22E9Data,
	EventGetEventAttendees3C4D22E9Responses,
	EventGetEventBySlugs559C2Da7Data,
	EventGetEventBySlugs559C2Da7Responses,
	EventGetEventFf8A7B2aData,
	EventGetEventFf8A7B2aResponses,
	EventGetMyEventStatus34Fbf248Data,
	EventGetMyEventStatus34Fbf248Responses,
	EventGetQuestionnaireAb1251EbData,
	EventGetQuestionnaireAb1251EbResponses,
	EventListEventsFbe8B973Data,
	EventListEventsFbe8B973Responses,
	EventListResources4A5Cc720Data,
	EventListResources4A5Cc720Responses,
	EventListTiers19F83752Data,
	EventListTiers19F83752Responses,
	EventListUserInvitationRequests9Df4Ec25Data,
	EventListUserInvitationRequests9Df4Ec25Responses,
	EventRequestInvitationEeea9609Data,
	EventRequestInvitationEeea9609Errors,
	EventRequestInvitationEeea9609Responses,
	EventRsvpEvent29565362Data,
	EventRsvpEvent29565362Errors,
	EventRsvpEvent29565362Responses,
	EventseriesadminAddTags374800F7Data,
	EventseriesadminAddTags374800F7Responses,
	EventseriesadminClearTags3Af6857fData,
	EventseriesadminClearTags3Af6857fResponses,
	EventseriesadminDeleteEventSeries3005B023Data,
	EventseriesadminDeleteEventSeries3005B023Responses,
	EventseriesadminRemoveTags4Fa83C0eData,
	EventseriesadminRemoveTags4Fa83C0eResponses,
	EventseriesadminUpdateEventSeriesAcd3E2FdData,
	EventseriesadminUpdateEventSeriesAcd3E2FdErrors,
	EventseriesadminUpdateEventSeriesAcd3E2FdResponses,
	EventseriesadminUploadCoverArt28875C09Data,
	EventseriesadminUploadCoverArt28875C09Responses,
	EventseriesadminUploadLogo5C8E9F0bData,
	EventseriesadminUploadLogo5C8E9F0bResponses,
	EventseriesGetEventSeries918D90CbData,
	EventseriesGetEventSeries918D90CbResponses,
	EventseriesGetEventSeriesBySlugsCd27A526Data,
	EventseriesGetEventSeriesBySlugsCd27A526Responses,
	EventseriesListEventSeriesA2C209EdData,
	EventseriesListEventSeriesA2C209EdResponses,
	EventseriesListResourcesCc79E02aData,
	EventseriesListResourcesCc79E02aResponses,
	EventSubmitQuestionnaire48725095Data,
	EventSubmitQuestionnaire48725095Errors,
	EventSubmitQuestionnaire48725095Responses,
	EventTicketCheckout76067C48Data,
	EventTicketCheckout76067C48Errors,
	EventTicketCheckout76067C48Responses,
	EventTicketPwycCheckoutE43B1345Data,
	EventTicketPwycCheckoutE43B1345Errors,
	EventTicketPwycCheckoutE43B1345Responses,
	OrganizationadminAddStaff7679F0EcData,
	OrganizationadminAddStaff7679F0EcResponses,
	OrganizationadminAddTagsD9Cb9B62Data,
	OrganizationadminAddTagsD9Cb9B62Responses,
	OrganizationadminApproveMembershipRequestA5A04E8cData,
	OrganizationadminApproveMembershipRequestA5A04E8cResponses,
	OrganizationadminClearTags95Cf6F7fData,
	OrganizationadminClearTags95Cf6F7fResponses,
	OrganizationadminCreateEvent83140B46Data,
	OrganizationadminCreateEvent83140B46Errors,
	OrganizationadminCreateEvent83140B46Responses,
	OrganizationadminCreateEventSeries74149441Data,
	OrganizationadminCreateEventSeries74149441Errors,
	OrganizationadminCreateEventSeries74149441Responses,
	OrganizationadminCreateOrganizationToken04B54C6fData,
	OrganizationadminCreateOrganizationToken04B54C6fResponses,
	OrganizationadminCreateResourceE02Cdb0dData,
	OrganizationadminCreateResourceE02Cdb0dResponses,
	OrganizationadminDeleteOrganizationTokenF656Bae8Data,
	OrganizationadminDeleteOrganizationTokenF656Bae8Responses,
	OrganizationadminDeleteResourceFcb010C5Data,
	OrganizationadminDeleteResourceFcb010C5Responses,
	OrganizationadminGetResource37Ec9D2aData,
	OrganizationadminGetResource37Ec9D2aResponses,
	OrganizationadminListMembers2A68Cad8Data,
	OrganizationadminListMembers2A68Cad8Responses,
	OrganizationadminListMembershipRequests0E7D0B5cData,
	OrganizationadminListMembershipRequests0E7D0B5cResponses,
	OrganizationadminListOrganizationTokensD017528eData,
	OrganizationadminListOrganizationTokensD017528eResponses,
	OrganizationadminListResourcesFe458676Data,
	OrganizationadminListResourcesFe458676Responses,
	OrganizationadminListStaffEbfc54C1Data,
	OrganizationadminListStaffEbfc54C1Responses,
	OrganizationadminRejectMembershipRequest672Fc5D3Data,
	OrganizationadminRejectMembershipRequest672Fc5D3Responses,
	OrganizationadminRemoveMember6A94E37bData,
	OrganizationadminRemoveMember6A94E37bResponses,
	OrganizationadminRemoveStaff2Bbdb9FcData,
	OrganizationadminRemoveStaff2Bbdb9FcResponses,
	OrganizationadminRemoveTags5337350bData,
	OrganizationadminRemoveTags5337350bResponses,
	OrganizationadminStripeAccountVerify31F0Bfc2Data,
	OrganizationadminStripeAccountVerify31F0Bfc2Responses,
	OrganizationadminStripeConnect53D646D6Data,
	OrganizationadminStripeConnect53D646D6Responses,
	OrganizationadminUpdateOrganizationB598Bf4dData,
	OrganizationadminUpdateOrganizationB598Bf4dResponses,
	OrganizationadminUpdateOrganizationTokenEa3164F6Data,
	OrganizationadminUpdateOrganizationTokenEa3164F6Responses,
	OrganizationadminUpdateResourceDeb96DccData,
	OrganizationadminUpdateResourceDeb96DccResponses,
	OrganizationadminUpdateStaffPermissions3De2643bData,
	OrganizationadminUpdateStaffPermissions3De2643bResponses,
	OrganizationadminUploadCoverArtEc4A8B35Data,
	OrganizationadminUploadCoverArtEc4A8B35Responses,
	OrganizationadminUploadLogo9C4Ec405Data,
	OrganizationadminUploadLogo9C4Ec405Responses,
	OrganizationClaimInvitationF59D97AdData,
	OrganizationClaimInvitationF59D97AdErrors,
	OrganizationClaimInvitationF59D97AdResponses,
	OrganizationCreateMembershipRequestE7Fb2399Data,
	OrganizationCreateMembershipRequestE7Fb2399Responses,
	OrganizationGetOrganization0E4473A5Data,
	OrganizationGetOrganization0E4473A5Responses,
	OrganizationListOrganizationsC2C95340Data,
	OrganizationListOrganizationsC2C95340Responses,
	OrganizationListResources8Cc28Fb7Data,
	OrganizationListResources8Cc28Fb7Responses,
	OtpDisableOtp18769720Data,
	OtpDisableOtp18769720Responses,
	OtpEnableOtp28Bc4B07Data,
	OtpEnableOtp28Bc4B07Responses,
	OtpSetupOtpF64Ec583Data,
	OtpSetupOtpF64Ec583Responses,
	PermissionMyPermissionsC74726AaData,
	PermissionMyPermissionsC74726AaResponses,
	PotluckClaimPotluckItem0Dd0D7BbData,
	PotluckClaimPotluckItem0Dd0D7BbResponses,
	PotluckCreatePotluckItemD4710F64Data,
	PotluckCreatePotluckItemD4710F64Responses,
	PotluckDeletePotluckItem957A382bData,
	PotluckDeletePotluckItem957A382bResponses,
	PotluckListPotluckItems6Efb6Eb9Data,
	PotluckListPotluckItems6Efb6Eb9Responses,
	PotluckUnclaimPotluckItemE366C231Data,
	PotluckUnclaimPotluckItemE366C231Responses,
	PotluckUpdatePotluckItem5A2Cc5EaData,
	PotluckUpdatePotluckItem5A2Cc5EaResponses,
	QuestionnaireCreateFtQuestionD24560D0Data,
	QuestionnaireCreateFtQuestionD24560D0Responses,
	QuestionnaireCreateMcOption5312A4C1Data,
	QuestionnaireCreateMcOption5312A4C1Responses,
	QuestionnaireCreateMcQuestion30Dea3CdData,
	QuestionnaireCreateMcQuestion30Dea3CdResponses,
	QuestionnaireCreateOrgQuestionnaireA73B2412Data,
	QuestionnaireCreateOrgQuestionnaireA73B2412Errors,
	QuestionnaireCreateOrgQuestionnaireA73B2412Responses,
	QuestionnaireCreateSection9Ca949D3Data,
	QuestionnaireCreateSection9Ca949D3Responses,
	QuestionnaireEvaluateSubmissionCcfabd98Data,
	QuestionnaireEvaluateSubmissionCcfabd98Errors,
	QuestionnaireEvaluateSubmissionCcfabd98Responses,
	QuestionnaireGetOrgQuestionnaire88B731D9Data,
	QuestionnaireGetOrgQuestionnaire88B731D9Responses,
	QuestionnaireGetSubmissionDetail77Af308cData,
	QuestionnaireGetSubmissionDetail77Af308cResponses,
	QuestionnaireListOrgQuestionnairesE0A0441cData,
	QuestionnaireListOrgQuestionnairesE0A0441cResponses,
	QuestionnaireListSubmissions7E04Dd8dData,
	QuestionnaireListSubmissions7E04Dd8dResponses,
	QuestionnaireUpdateFtQuestion828F4DdcData,
	QuestionnaireUpdateFtQuestion828F4DdcResponses,
	QuestionnaireUpdateMcOptionFe7F96B7Data,
	QuestionnaireUpdateMcOptionFe7F96B7Responses,
	QuestionnaireUpdateMcQuestion2F22Dd77Data,
	QuestionnaireUpdateMcQuestion2F22Dd77Responses,
	QuestionnaireUpdateSection72E37612Data,
	QuestionnaireUpdateSection72E37612Responses,
	StripewebhookHandleWebhookE602E6F5Data,
	StripewebhookHandleWebhookE602E6F5Responses,
	TagListTagsA5CcbaccData,
	TagListTagsA5CcbaccResponses,
	TokenRefreshData,
	TokenRefreshResponses,
	UserpreferencesGetEventPreferencesF62Bc462Data,
	UserpreferencesGetEventPreferencesF62Bc462Responses,
	UserpreferencesGetEventSeriesPreferences93B5B471Data,
	UserpreferencesGetEventSeriesPreferences93B5B471Responses,
	UserpreferencesGetGeneralPreferencesA39613AeData,
	UserpreferencesGetGeneralPreferencesA39613AeResponses,
	UserpreferencesGetOrganizationPreferencesB9Ac8Ee0Data,
	UserpreferencesGetOrganizationPreferencesB9Ac8Ee0Responses,
	UserpreferencesUpdateEventPreferences8C10FbadData,
	UserpreferencesUpdateEventPreferences8C10FbadResponses,
	UserpreferencesUpdateEventSeriesPreferences23058B96Data,
	UserpreferencesUpdateEventSeriesPreferences23058B96Responses,
	UserpreferencesUpdateGlobalPreferencesC1D4E2FbData,
	UserpreferencesUpdateGlobalPreferencesC1D4E2FbResponses,
	UserpreferencesUpdateOrganizationPreferences56790307Data,
	UserpreferencesUpdateOrganizationPreferences56790307Responses
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Version
 *
 * Get the API version.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiVersion = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiVersionData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiVersionResponses, unknown, ThrowOnError>({
		url: '/api/version',
		...options
	});
};

/**
 * Healthcheck
 *
 * Check the health of the API.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiHealthcheck = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiHealthcheckData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiHealthcheckResponses, unknown, ThrowOnError>({
		url: '/api/healthcheck',
		...options
	});
};

/**
 * Obtain Token
 *
 * Authenticate with email and password to obtain JWT access/refresh tokens.
 *
 * For users without 2FA: Returns standard JWT token pair for immediate access.
 * For users with TOTP enabled: Returns a temporary token that must be exchanged for
 * a full token pair via POST /auth/token/pair/otp along with the TOTP code.
 * Users registered via Google SSO must use POST /auth/google/login instead.
 */
export const authObtainToken89D16376 = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainToken89D16376Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthObtainToken89D16376Responses, unknown, ThrowOnError>({
		url: '/api/auth/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Refresh Token
 */
export const tokenRefresh = <ThrowOnError extends boolean = false>(
	options: Options<TokenRefreshData, ThrowOnError>
) => {
	return (options.client ?? client).post<TokenRefreshResponses, unknown, ThrowOnError>({
		url: '/api/auth/refresh',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Demo Obtain Token
 *
 * Create and authenticate a demo user account (demo mode only).
 *
 * Automatically creates a user account with the provided credentials if it doesn't exist,
 * then returns JWT tokens. Only available when DEMO_MODE is enabled in settings.
 * Email must end with @example.com.
 */
export const authDemoObtainToken1C973532 = <ThrowOnError extends boolean = false>(
	options: Options<AuthDemoObtainToken1C973532Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthDemoObtainToken1C973532Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/demo/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Obtain Token With Otp
 *
 * Complete 2FA authentication by exchanging temporary token and TOTP code for JWT tokens.
 *
 * Call this after POST /auth/token/pair returns a temporary token for a 2FA-enabled user.
 * Validates the TOTP code from the user's authenticator app and returns a standard JWT token
 * pair on success. Returns 401 if the TOTP code is invalid.
 */
export const authObtainTokenWithOtpC7428120 = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainTokenWithOtpC7428120Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthObtainTokenWithOtpC7428120Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/token/pair/otp',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Google Login
 *
 * Authenticate or register via Google SSO using a Google ID token.
 *
 * Verifies the Google ID token, creates a new user if needed, and returns JWT tokens.
 * For existing Google SSO users, this is the only valid login method - they cannot
 * use password-based authentication.
 */
export const authGoogleLogin79107Ca3 = <ThrowOnError extends boolean = false>(
	options: Options<AuthGoogleLogin79107Ca3Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthGoogleLogin79107Ca3Responses, unknown, ThrowOnError>({
		url: '/api/auth/google/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Setup Otp
 *
 * Get the TOTP provisioning URI to configure an authenticator app.
 *
 * Returns a URI (often as QR code) to scan with authenticator apps like Google Authenticator
 * or Authy. Returns 400 if 2FA is already enabled. After scanning, verify the setup with
 * POST /otp/verify to activate 2FA.
 */
export const otpSetupOtpF64Ec583 = <ThrowOnError extends boolean = false>(
	options?: Options<OtpSetupOtpF64Ec583Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<OtpSetupOtpF64Ec583Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/setup',
		...options
	});
};

/**
 * Enable Otp
 *
 * Activate 2FA by verifying the TOTP code from the authenticator app.
 *
 * Call this after GET /otp/setup with a code from your authenticator app to confirm
 * it's configured correctly. On success, activates 2FA for the account. Future logins
 * will require the TOTP code via POST /auth/token/pair/otp. Returns 403 if code is invalid.
 */
export const otpEnableOtp28Bc4B07 = <ThrowOnError extends boolean = false>(
	options: Options<OtpEnableOtp28Bc4B07Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpEnableOtp28Bc4B07Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Disable Otp
 *
 * Deactivate 2FA after verifying the current TOTP code.
 *
 * Requires the current TOTP code to prevent unauthorized disabling. After disabling,
 * login will only require email and password via POST /auth/token/pair. Returns 403
 * if the TOTP code is invalid.
 */
export const otpDisableOtp18769720 = <ThrowOnError extends boolean = false>(
	options: Options<OtpDisableOtp18769720Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpDisableOtp18769720Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/disable',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Export Data
 *
 * Request a GDPR-compliant export of all personal data.
 *
 * Initiates an asynchronous export of all user data including profile, events, tickets,
 * and submissions. The export will be emailed to the user when ready. Rate-limited to
 * prevent abuse.
 */
export const accountExportDataFb4E5B30 = <ThrowOnError extends boolean = false>(
	options?: Options<AccountExportDataFb4E5B30Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountExportDataFb4E5B30Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/export-data',
		...options
	});
};

/**
 * Me
 *
 * Retrieve the authenticated user's profile information.
 *
 * Returns complete user profile including email, name, location preferences, and 2FA status.
 * Use this to display user info in the UI or verify authentication status.
 */
export const accountMeD8441F6B = <ThrowOnError extends boolean = false>(
	options?: Options<AccountMeD8441F6bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<AccountMeD8441F6bResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options
	});
};

/**
 * Update Profile
 *
 * Update the authenticated user's profile information.
 *
 * Allows updating name, location preferences, and other profile fields. Only provided
 * fields are updated. Returns the updated user profile.
 */
export const accountUpdateProfile0Abfea16 = <ThrowOnError extends boolean = false>(
	options: Options<AccountUpdateProfile0Abfea16Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		AccountUpdateProfile0Abfea16Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Register
 *
 * Create a new user account with email and password.
 *
 * Creates a new account and sends a verification email. The account is created but not
 * fully active until email is verified via POST /account/verify. If an unverified account
 * with the same email exists, resends the verification email. Returns 400 if a verified
 * account already exists.
 */
export const accountRegisterE40E7009 = <ThrowOnError extends boolean = false>(
	options: Options<AccountRegisterE40E7009Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AccountRegisterE40E7009Responses, unknown, ThrowOnError>({
		url: '/api/account/register',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Verify Email
 *
 * Verify email address using the token from the verification email.
 *
 * Call this with the token received via email after registration. On success, activates
 * the account and returns the verified user profile along with JWT tokens for immediate login.
 * The verification token is single-use and expires after a set period.
 */
export const accountVerifyEmail559273Ec = <ThrowOnError extends boolean = false>(
	options: Options<AccountVerifyEmail559273EcData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountVerifyEmail559273EcResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Resend Verification Email
 *
 * Resend the email verification link to the authenticated user.
 *
 * Use this if the original verification email was lost or expired. Returns 400 if the
 * email is already verified. Requires authentication with the unverified account's JWT.
 */
export const accountResendVerificationEmailF37Edb18 = <ThrowOnError extends boolean = false>(
	options?: Options<AccountResendVerificationEmailF37Edb18Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountResendVerificationEmailF37Edb18Responses,
		AccountResendVerificationEmailF37Edb18Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/verify-resend',
		...options
	});
};

/**
 * Delete Account Request
 *
 * Initiate GDPR-compliant account deletion by sending confirmation email.
 *
 * Sends an email with a deletion confirmation link. The account is not deleted until
 * the user confirms via POST /account/delete-confirm with the token from the email.
 * This two-step process prevents accidental deletions.
 */
export const accountDeleteAccountRequestBfed9E9C = <ThrowOnError extends boolean = false>(
	options?: Options<AccountDeleteAccountRequestBfed9E9cData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountDeleteAccountRequestBfed9E9cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/delete-request',
		...options
	});
};

/**
 * Delete Account Confirm
 *
 * Permanently delete the account using the confirmation token from email.
 *
 * Call this with the token received via email after POST /account/delete-request.
 * This action is irreversible and deletes all user data. The deletion token is
 * single-use and expires after a set period.
 */
export const accountDeleteAccountConfirmDf87109A = <ThrowOnError extends boolean = false>(
	options: Options<AccountDeleteAccountConfirmDf87109aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountDeleteAccountConfirmDf87109aResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/delete-confirm',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password Request
 *
 * Request a password reset by email.
 *
 * Sends a password reset link to the provided email if an account exists. Always returns
 * a success message to prevent user enumeration attacks. Google SSO users cannot use this
 * endpoint. After receiving the email, use POST /account/password/reset with the token.
 */
export const accountResetPasswordRequest26B625E6 = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordRequest26B625E6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordRequest26B625E6Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset-request',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password
 *
 * Reset password using the token from the password reset email.
 *
 * Call this with the token received via email after POST /account/password/reset-request.
 * The new password must meet security requirements. The reset token is single-use and
 * expires after a set period. After reset, the user must login again with the new password.
 */
export const accountResetPassword11226E1B = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPassword11226E1bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPassword11226E1bResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Dashboard Organizations
 *
 * View organizations for your dashboard filtered by your relationship to them.
 *
 * Filter by: organizations you own, are staff of, are a member of, or have pending requests to.
 * Shows only organizations you have permission to view. Use this to display "My Organizations"
 * sections in the UI.
 */
export const dashboardDashboardOrganizations88A0E87D = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardOrganizations88A0E87dData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardOrganizations88A0E87dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/organizations',
		...options
	});
};

/**
 * Dashboard Events
 *
 * View upcoming events for your dashboard filtered by your relationship to them.
 *
 * Filter by: events you're organizing, attending (RSVP'd or have tickets), invited to, or have
 * requested invitations to. Only shows future events you have permission to view. Use this to
 * display "My Events" sections in the UI.
 */
export const dashboardDashboardEventsA5Bdad35 = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventsA5Bdad35Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventsA5Bdad35Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/events',
		...options
	});
};

/**
 * Dashboard Event Series
 *
 * View event series for your dashboard filtered by your relationship to them.
 *
 * Filter by: series you're organizing or series you're attending events in. Shows only
 * series you have permission to view. Use this to display "My Series" sections in the UI.
 */
export const dashboardDashboardEventSeriesAc85Def8 = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventSeriesAc85Def8Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventSeriesAc85Def8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/event_series',
		...options
	});
};

/**
 * Dashboard Invitations
 *
 * View your pending event invitations.
 *
 * Returns invitations you've received but not yet acted on, sorted by event date (soonest first).
 * Use this to display a "Pending Invitations" section prompting users to RSVP or purchase tickets.
 */
export const dashboardDashboardInvitations2C467069 = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardInvitations2C467069Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardInvitations2C467069Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/invitations',
		...options
	});
};

/**
 * List Organizations
 *
 * Browse and search organizations visible to the current user.
 *
 * Results are filtered by visibility settings and user memberships. By default orders by
 * 'distance' (nearest first based on user location). Can also sort alphabetically by 'name'
 * or reverse with '-name'. Supports text search and filtering.
 */
export const organizationListOrganizationsC2C95340 = <ThrowOnError extends boolean = false>(
	options?: Options<OrganizationListOrganizationsC2C95340Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		OrganizationListOrganizationsC2C95340Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/',
		...options
	});
};

/**
 * Get Organization
 *
 * Retrieve organization details using its unique slug.
 *
 * Returns full organization information including description, location, member count, and
 * settings. Use this to display the organization profile page.
 */
export const organizationGetOrganization0E4473A5 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationGetOrganization0E4473A5Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationGetOrganization0E4473A5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this organization and marked for display on organization page.
 *
 * Returns documents, links, or media files provided by organization admins. Resources may
 * be public or restricted to members only. Supports filtering by type and text search.
 */
export const organizationListResources8Cc28Fb7 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationListResources8Cc28Fb7Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationListResources8Cc28Fb7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/resources',
		...options
	});
};

/**
 * Create Membership Request
 *
 * Submit a request to become a member of this organization.
 *
 * Creates a membership request that organization admins can approve or reject. Being a
 * member may be required to access certain members-only events. Returns the created
 * request for tracking status.
 */
export const organizationCreateMembershipRequestE7Fb2399 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationCreateMembershipRequestE7Fb2399Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationCreateMembershipRequestE7Fb2399Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/membership-requests',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an organization membership invitation using a token from invitation link.
 *
 * Creates an OrganizationMember record, granting you member status. Members may have
 * access to members-only events and resources. Returns the organization on success,
 * or 400 if the token is invalid/expired.
 */
export const organizationClaimInvitationF59D97Ad = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationClaimInvitationF59D97AdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationClaimInvitationF59D97AdResponses,
		OrganizationClaimInvitationF59D97AdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/claim-invitation/{token}',
		...options
	});
};

/**
 * Update Organization
 *
 * Update organization by slug.
 */
export const organizationadminUpdateOrganizationB598Bf4D = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateOrganizationB598Bf4dData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationB598Bf4dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Stripe Connect
 *
 * Get a link to onboard the organization to Stripe.
 */
export const organizationadminStripeConnect53D646D6 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeConnect53D646D6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeConnect53D646D6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/connect',
		...options
	});
};

/**
 * Stripe Account Verify
 *
 * Get the organization's Stripe account status.
 */
export const organizationadminStripeAccountVerify31F0Bfc2 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeAccountVerify31F0Bfc2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeAccountVerify31F0Bfc2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/account/verify',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to organization.
 */
export const organizationadminUploadLogo9C4Ec405 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadLogo9C4Ec405Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadLogo9C4Ec405Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to organization.
 */
export const organizationadminUploadCoverArtEc4A8B35 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadCoverArtEc4A8B35Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadCoverArtEc4A8B35Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Create Event Series
 *
 * Create a new event series.
 */
export const organizationadminCreateEventSeries74149441 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEventSeries74149441Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEventSeries74149441Responses,
		OrganizationadminCreateEventSeries74149441Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Event
 *
 * Create a new event.
 */
export const organizationadminCreateEvent83140B46 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEvent83140B46Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEvent83140B46Responses,
		OrganizationadminCreateEvent83140B46Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Organization Tokens
 *
 * List all tokens for an organization that the user has admin rights for.
 */
export const organizationadminListOrganizationTokensD017528E = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListOrganizationTokensD017528eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListOrganizationTokensD017528eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens',
		...options
	});
};

/**
 * Create Organization Token
 *
 * Create a new token for an organization.
 */
export const organizationadminCreateOrganizationToken04B54C6F = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminCreateOrganizationToken04B54C6fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateOrganizationToken04B54C6fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Organization Token
 *
 * Delete an organization token.
 */
export const organizationadminDeleteOrganizationTokenF656Bae8 = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminDeleteOrganizationTokenF656Bae8Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteOrganizationTokenF656Bae8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options
	});
};

/**
 * Update Organization Token
 *
 * Update an organization token.
 */
export const organizationadminUpdateOrganizationTokenEa3164F6 = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateOrganizationTokenEa3164F6Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationTokenEa3164F6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Membership Requests
 *
 * List all membership requests for an organization.
 */
export const organizationadminListMembershipRequests0E7D0B5C = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListMembershipRequests0E7D0B5cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembershipRequests0E7D0B5cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests',
		...options
	});
};

/**
 * Approve Membership Request
 *
 * Approve a membership request.
 */
export const organizationadminApproveMembershipRequestA5A04E8C = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminApproveMembershipRequestA5A04E8cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminApproveMembershipRequestA5A04E8cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/approve',
		...options
	});
};

/**
 * Reject Membership Request
 *
 * Reject a membership request.
 */
export const organizationadminRejectMembershipRequest672Fc5D3 = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminRejectMembershipRequest672Fc5D3Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRejectMembershipRequest672Fc5D3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/reject',
		...options
	});
};

/**
 * List Resources
 *
 * List all resources for a specific organization.
 */
export const organizationadminListResourcesFe458676 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListResourcesFe458676Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListResourcesFe458676Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options
	});
};

/**
 * Create Resource
 *
 * Create a new resource for the organization.
 */
export const organizationadminCreateResourceE02Cdb0D = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateResourceE02Cdb0dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateResourceE02Cdb0dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Resource
 *
 * Delete a resource from the organization.
 */
export const organizationadminDeleteResourceFcb010C5 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteResourceFcb010C5Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteResourceFcb010C5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Get Resource
 *
 * Retrieve a specific resource for the organization.
 */
export const organizationadminGetResource37Ec9D2A = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetResource37Ec9D2aData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetResource37Ec9D2aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Update Resource
 *
 * Update a resource for the organization.
 */
export const organizationadminUpdateResourceDeb96Dcc = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateResourceDeb96DccData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateResourceDeb96DccResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Members
 *
 * List all members of an organization.
 */
export const organizationadminListMembers2A68Cad8 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListMembers2A68Cad8Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembers2A68Cad8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members',
		...options
	});
};

/**
 * Remove Member
 *
 * Remove a member from an organization.
 */
export const organizationadminRemoveMember6A94E37B = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveMember6A94E37bData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveMember6A94E37bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members/{user_id}',
		...options
	});
};

/**
 * List Staff
 *
 * List all staff of an organization.
 */
export const organizationadminListStaffEbfc54C1 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListStaffEbfc54C1Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListStaffEbfc54C1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff',
		...options
	});
};

/**
 * Remove Staff
 *
 * Remove a staff member from an organization.
 */
export const organizationadminRemoveStaff2Bbdb9Fc = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveStaff2Bbdb9FcData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveStaff2Bbdb9FcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options
	});
};

/**
 * Add Staff
 *
 * Add a staff member to an organization.
 */
export const organizationadminAddStaff7679F0Ec = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddStaff7679F0EcData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddStaff7679F0EcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Staff Permissions
 *
 * Update a staff member's permissions.
 */
export const organizationadminUpdateStaffPermissions3De2643B = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateStaffPermissions3De2643bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateStaffPermissions3De2643bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}/permissions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Clear akk tags from the organization.
 */
export const organizationadminClearTags95Cf6F7F = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminClearTags95Cf6F7fData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminClearTags95Cf6F7fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const organizationadminAddTagsD9Cb9B62 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddTagsD9Cb9B62Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddTagsD9Cb9B62Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const organizationadminRemoveTags5337350B = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveTags5337350bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRemoveTags5337350bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Events
 *
 * Browse and search events visible to the current user.
 *
 * Results are filtered by visibility rules (public/private), event status, and user permissions.
 * By default shows only upcoming events; set include_past=true to see past events.
 * Ordering: 'distance' (default) shows nearest events based on user location, 'start' shows
 * soonest first, '-start' shows latest first. Supports filtering by organization, series,
 * tags, and text search.
 */
export const eventListEventsFbe8B973 = <ThrowOnError extends boolean = false>(
	options?: Options<EventListEventsFbe8B973Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<EventListEventsFbe8B973Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an event invitation using a token from an invitation link or email.
 *
 * Creates an EventInvitation record for the user, granting access to the event.
 * Invitations can bypass certain eligibility requirements like membership, capacity limits,
 * and RSVP deadlines. Returns the event on success, or 400 if the token is invalid/expired.
 */
export const eventClaimInvitation61Ff7B9F = <ThrowOnError extends boolean = false>(
	options: Options<EventClaimInvitation61Ff7B9fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventClaimInvitation61Ff7B9fResponses,
		EventClaimInvitation61Ff7B9fErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Event Attendees
 *
 * Get the list of confirmed attendees for this event.
 *
 * Returns users who have RSVPed 'yes' or have active tickets. Visibility is controlled by
 * event settings - attendee lists may be hidden from regular attendees. Organization staff
 * and event creators always have access.
 */
export const eventGetEventAttendees3C4D22E9 = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventAttendees3C4D22E9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventAttendees3C4D22E9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/attendee-list',
		...options
	});
};

/**
 * Get My Event Status
 *
 * Check the authenticated user's current status and eligibility for an event.
 *
 * Returns either the user's RSVP/ticket status if they've already joined, or an eligibility
 * check result explaining what steps are needed to attend. The eligibility check validates:
 * event status, RSVP deadline, invitations, organization membership, required questionnaires,
 * capacity limits, and ticket availability. Use this to determine which action to show users
 * (RSVP button, buy ticket, fill questionnaire, etc.).
 */
export const eventGetMyEventStatus34Fbf248 = <ThrowOnError extends boolean = false>(
	options: Options<EventGetMyEventStatus34Fbf248Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetMyEventStatus34Fbf248Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/my-status',
		...options
	});
};

/**
 * Request Invitation
 *
 * Submit a request to be invited to a private or invite-only event.
 *
 * Creates an invitation request that event organizers can approve or reject. Include an
 * optional message explaining why you want to attend. Returns 400 if you've already
 * submitted a request for this event. Check GET /{event_id}/my-status to see if you
 * need an invitation.
 */
export const eventRequestInvitationEeea9609 = <ThrowOnError extends boolean = false>(
	options: Options<EventRequestInvitationEeea9609Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRequestInvitationEeea9609Responses,
		EventRequestInvitationEeea9609Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/request-invitation',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Resources
 *
 * Get supplementary resources attached to this event.
 *
 * Returns resources like documents, links, or media files provided by event organizers.
 * Resources may be public or restricted to attendees only. Supports filtering by type
 * (file, link, etc.) and text search.
 */
export const eventListResources4A5Cc720 = <ThrowOnError extends boolean = false>(
	options: Options<EventListResources4A5Cc720Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListResources4A5Cc720Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/events/{event_id}/resources',
			...options
		}
	);
};

/**
 * Delete Invitation Request
 *
 * Cancel a pending invitation request.
 *
 * Withdraws your invitation request for an event. Only works for your own requests
 * that haven't been decided yet. Returns 404 if the request doesn't exist or doesn't
 * belong to you.
 */
export const eventDeleteInvitationRequest120F7Cda = <ThrowOnError extends boolean = false>(
	options: Options<EventDeleteInvitationRequest120F7CdaData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventDeleteInvitationRequest120F7CdaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/invitation-request/{request_id}',
		...options
	});
};

/**
 * List User Invitation Requests
 *
 * View your invitation requests across all events.
 *
 * Returns your invitation requests with their current status (pending/approved/rejected).
 * Filter by event_id to see requests for a specific event, or by status to see approved/
 * rejected requests. Use this to track which events you've requested access to.
 */
export const eventListUserInvitationRequests9Df4Ec25 = <ThrowOnError extends boolean = false>(
	options?: Options<EventListUserInvitationRequests9Df4Ec25Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventListUserInvitationRequests9Df4Ec25Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/me/pending_invitation_requests',
		...options
	});
};

/**
 * Get Event By Slugs
 *
 * Retrieve event details using human-readable organization and event slugs.
 *
 * Use this for clean URLs like /events/tech-meetup/monthly-session. Returns 404 if
 * the event doesn't exist or you don't have permission to view it.
 */
export const eventGetEventBySlugs559C2Da7 = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventBySlugs559C2Da7Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventBySlugs559C2Da7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{org_slug}/{event_slug}',
		...options
	});
};

/**
 * Get Event
 *
 * Retrieve full event details by ID.
 *
 * Returns comprehensive event information including description, location, times, organization,
 * ticket tiers, and visibility settings. Use this to display the event detail page.
 */
export const eventGetEventFf8A7B2A = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventFf8A7B2aData, ThrowOnError>
) => {
	return (options.client ?? client).get<EventGetEventFf8A7B2aResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}',
		...options
	});
};

/**
 * Rsvp Event
 *
 * RSVP to a non-ticketed event (answer: 'yes', 'no', or 'maybe').
 *
 * Only works for events where requires_ticket=false. Runs full eligibility check including
 * event status, RSVP deadline, invitations, membership requirements, required questionnaires,
 * and capacity limits. Returns RSVP record on success. On failure, returns eligibility details
 * explaining what's blocking you and what next_step to take (e.g., complete questionnaire,
 * request invitation).
 */
export const eventRsvpEvent29565362 = <ThrowOnError extends boolean = false>(
	options: Options<EventRsvpEvent29565362Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRsvpEvent29565362Responses,
		EventRsvpEvent29565362Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/rsvp/{answer}',
		...options
	});
};

/**
 * List Tiers
 *
 * Get all ticket tiers available for purchase at this event.
 *
 * Returns ticket types with pricing, availability, and sales windows. Filters tiers based
 * on user eligibility - you'll only see tiers you're allowed to purchase. Check visibility
 * settings and sales_start_at/sales_end_at to determine which are currently on sale.
 */
export const eventListTiers19F83752 = <ThrowOnError extends boolean = false>(
	options: Options<EventListTiers19F83752Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListTiers19F83752Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/tiers',
		...options
	});
};

/**
 * Ticket Checkout
 *
 * Purchase a fixed-price event ticket.
 *
 * Runs eligibility checks before allowing purchase. For online payment: returns Stripe
 * checkout URL to redirect user for payment. For free/offline/at-the-door tickets: creates
 * ticket immediately and returns it. Cannot be used for pay-what-you-can (PWYC) tiers -
 * use POST /{event_id}/tickets/{tier_id}/checkout/pwyc instead. On eligibility failure,
 * returns 400 with eligibility details explaining what's blocking you and what next_step
 * to take (e.g., complete questionnaire, request invitation, wait for tickets to go on sale).
 */
export const eventTicketCheckout76067C48 = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketCheckout76067C48Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketCheckout76067C48Responses,
		EventTicketCheckout76067C48Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout',
		...options
	});
};

/**
 * Ticket Pwyc Checkout
 *
 * Purchase a pay-what-you-can (PWYC) ticket with a user-specified amount.
 *
 * Only works for ticket tiers with price_type=PWYC. Validates the amount is within the
 * tier's min/max bounds. Returns Stripe checkout URL for online payment, or creates ticket
 * immediately for free/offline payment methods. Returns 400 for non-PWYC tiers, if amount
 * is out of bounds, or on eligibility failure (with eligibility details explaining what's
 * blocking you and what next_step to take).
 */
export const eventTicketPwycCheckoutE43B1345 = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketPwycCheckoutE43B1345Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketPwycCheckoutE43B1345Responses,
		EventTicketPwycCheckoutE43B1345Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout/pwyc',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Questionnaire
 *
 * Retrieve a questionnaire required for event admission.
 *
 * Returns the questionnaire structure with all sections and questions. Questions may be
 * shuffled based on questionnaire settings. Use this to display the form that users must
 * complete before accessing the event.
 */
export const eventGetQuestionnaireAb1251Eb = <ThrowOnError extends boolean = false>(
	options: Options<EventGetQuestionnaireAb1251EbData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetQuestionnaireAb1251EbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}',
		...options
	});
};

/**
 * Submit Questionnaire
 *
 * Submit answers to an event admission questionnaire.
 *
 * Validates all required questions are answered. If submission status is 'ready', triggers
 * automatic evaluation (may use LLM for free-text answers). Depending on the questionnaire's
 * evaluation_mode (automatic/manual/hybrid), results may be immediate or pending staff review.
 * Passing the questionnaire may be required before you can RSVP or purchase tickets.
 */
export const eventSubmitQuestionnaire48725095 = <ThrowOnError extends boolean = false>(
	options: Options<EventSubmitQuestionnaire48725095Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventSubmitQuestionnaire48725095Responses,
		EventSubmitQuestionnaire48725095Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}/submit',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Event Token
 *
 * Delete an event token.
 */
export const eventadminDeleteEventToken7B2Bedc8 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteEventToken7B2Bedc8Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteEventToken7B2Bedc8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options
	});
};

/**
 * Update Event Token
 *
 * Update an event token.
 */
export const eventadminUpdateEventToken40B03978 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventToken40B03978Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventToken40B03978Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Event Tokens
 *
 * List all event tokens.
 */
export const eventadminListEventTokens608332C9 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventTokens608332C9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventTokens608332C9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options
	});
};

/**
 * Create Event Token
 *
 * Create a new event token.
 */
export const eventadminCreateEventToken8D75Ec90 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateEventToken8D75Ec90Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateEventToken8D75Ec90Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Decide Invitation Request
 *
 * Request an invitation to an event.
 */
export const eventadminDecideInvitationRequestAa282797 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDecideInvitationRequestAa282797Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminDecideInvitationRequestAa282797Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-request/{request_id}/{decision}',
		...options
	});
};

/**
 * List Event Invitation Requests
 *
 * List all pending invitation requests for the current user.
 */
export const eventadminListEventInvitationRequests3B399060 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventInvitationRequests3B399060Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventInvitationRequests3B399060Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation_requests',
		...options
	});
};

/**
 * Update Event
 *
 * Update event by ID.
 */
export const eventadminUpdateEvent64Fc71Fe = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEvent64Fc71FeData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEvent64Fc71FeResponses,
		EventadminUpdateEvent64Fc71FeErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Event Status
 *
 * Update event status to the specified value.
 */
export const eventadminUpdateEventStatusBf5Ec3E2 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventStatusBf5Ec3E2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUpdateEventStatusBf5Ec3E2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/actions/update-status/{status}',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to event.
 */
export const eventadminUploadLogoF6692Dc9 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadLogoF6692Dc9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadLogoF6692Dc9Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to event.
 */
export const eventadminUploadCoverArtDa4Cff21 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadCoverArtDa4Cff21Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadCoverArtDa4Cff21Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminClearTags79613E5C = <ThrowOnError extends boolean = false>(
	options: Options<EventadminClearTags79613E5cData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminClearTags79613E5cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const eventadminAddTags5Ac7D15B = <ThrowOnError extends boolean = false>(
	options: Options<EventadminAddTags5Ac7D15bData, ThrowOnError>
) => {
	return (options.client ?? client).post<EventadminAddTags5Ac7D15bResponses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/event-admin/{event_id}/tags',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options.headers
			}
		}
	);
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminRemoveTags64A3F36F = <ThrowOnError extends boolean = false>(
	options: Options<EventadminRemoveTags64A3F36fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminRemoveTags64A3F36fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Ticket Tiers
 *
 * List all ticket tiers for an event.
 */
export const eventadminListTicketTiers2Cbd74Be = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketTiers2Cbd74BeData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketTiers2Cbd74BeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tiers',
		...options
	});
};

/**
 * Create Ticket Tier
 *
 * Create a new ticket tier for an event.
 */
export const eventadminCreateTicketTier86110675 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateTicketTier86110675Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateTicketTier86110675Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ticket Tier
 *
 * Delete a ticket tier.
 *
 * Note this might raise a 400 if ticket with this tier where already bought.
 */
export const eventadminDeleteTicketTier3034039F = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteTicketTier3034039fData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteTicketTier3034039fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options
	});
};

/**
 * Update Ticket Tier
 *
 * Update a ticket tier.
 */
export const eventadminUpdateTicketTier54A2F559 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateTicketTier54A2F559Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateTicketTier54A2F559Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Tickets
 *
 * List all pending tickets for offline and at-the-door payment methods.
 */
export const eventadminListPendingTickets989C1421 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingTickets989C1421Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingTickets989C1421Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-tickets',
		...options
	});
};

/**
 * Confirm Ticket Payment
 *
 * Confirm payment for a pending offline ticket and activate it.
 */
export const eventadminConfirmTicketPayment392Fa846 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminConfirmTicketPayment392Fa846Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminConfirmTicketPayment392Fa846Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/confirm-payment',
		...options
	});
};

/**
 * Check In Ticket
 *
 * Check in an attendee by scanning their ticket.
 */
export const eventadminCheckInTicketB4Df1Ee8 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCheckInTicketB4Df1Ee8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCheckInTicketB4Df1Ee8Responses,
		EventadminCheckInTicketB4Df1Ee8Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/check-in',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Invitations
 *
 * List all invitations for registered users.
 */
export const eventadminListInvitationsD3B1C3C1 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListInvitationsD3B1C3C1Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListInvitationsD3B1C3C1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options
	});
};

/**
 * Create Invitations
 *
 * Create direct invitations for users by email addresses.
 */
export const eventadminCreateInvitations8Cbbe3D0 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateInvitations8Cbbe3D0Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateInvitations8Cbbe3D0Responses,
		EventadminCreateInvitations8Cbbe3D0Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Invitations
 *
 * List all pending invitations for unregistered users.
 */
export const eventadminListPendingInvitations50B3417E = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingInvitations50B3417eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingInvitations50B3417eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-invitations',
		...options
	});
};

/**
 * Delete Invitation Endpoint
 *
 * Delete an invitation (registered or pending).
 */
export const eventadminDeleteInvitationEndpoint48Ed771C = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteInvitationEndpoint48Ed771cData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteInvitationEndpoint48Ed771cResponses,
		EventadminDeleteInvitationEndpoint48Ed771cErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations/{invitation_type}/{invitation_id}',
		...options
	});
};

/**
 * My Permissions
 *
 * Get a user's permission map, per organization.
 */
export const permissionMyPermissionsC74726Aa = <ThrowOnError extends boolean = false>(
	options?: Options<PermissionMyPermissionsC74726AaData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		PermissionMyPermissionsC74726AaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/permissions/my-permissions',
		...options
	});
};

/**
 * List Event Series
 *
 * Browse event series (recurring event collections) visible to the current user.
 *
 * Event series group related recurring events (e.g., "Monthly Tech Meetup"). Results are
 * filtered by visibility and permissions. Supports filtering by organization and text search.
 */
export const eventseriesListEventSeriesA2C209Ed = <ThrowOnError extends boolean = false>(
	options?: Options<EventseriesListEventSeriesA2C209EdData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventseriesListEventSeriesA2C209EdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/',
		...options
	});
};

/**
 * Get Event Series By Slugs
 *
 * Retrieve event series details using human-readable organization and series slugs.
 *
 * Use this for clean URLs like /event-series/tech-meetup/monthly-sessions. Returns 404
 * if the series doesn't exist or you don't have permission to view it.
 */
export const eventseriesGetEventSeriesBySlugsCd27A526 = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesBySlugsCd27A526Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesBySlugsCd27A526Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{org_slug}/{series_slug}',
		...options
	});
};

/**
 * Get Event Series
 *
 * Retrieve full event series details by ID.
 *
 * Returns series information including description, organization, and settings. Use this
 * to display the series profile page and list related events.
 */
export const eventseriesGetEventSeries918D90Cb = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeries918D90CbData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeries918D90CbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this event series.
 *
 * Returns documents, links, or media files that apply to all events in the series.
 * Resources may be public or restricted based on visibility settings. Supports filtering
 * by type and text search.
 */
export const eventseriesListResourcesCc79E02A = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesListResourcesCc79E02aData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesListResourcesCc79E02aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}/resources',
		...options
	});
};

/**
 * Delete Event Series
 *
 * Permanently delete an event series (admin only).
 *
 * Removes the series. Events in the series are not deleted but become standalone.
 * Requires 'delete_event_series' permission (typically organization owners only).
 */
export const eventseriesadminDeleteEventSeries3005B023 = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteEventSeries3005B023Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteEventSeries3005B023Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options
	});
};

/**
 * Update Event Series
 *
 * Update event series details (admin only).
 *
 * Modify series name, description, or settings. Requires 'edit_event_series' permission
 * (organization staff/owners). Changes apply to the series but not individual events.
 */
export const eventseriesadminUpdateEventSeriesAcd3E2Fd = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUpdateEventSeriesAcd3E2FdData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventseriesadminUpdateEventSeriesAcd3E2FdResponses,
		EventseriesadminUpdateEventSeriesAcd3E2FdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Upload Logo
 *
 * Upload a logo image for the event series (admin only).
 *
 * Replaces the existing logo. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadLogo5C8E9F0B = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadLogo5C8E9F0bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadLogo5C8E9F0bResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art/banner image for the event series (admin only).
 *
 * Replaces the existing cover art. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadCoverArt28875C09 = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadCoverArt28875C09Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadCoverArt28875C09Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Remove all tags from the event series (admin only).
 *
 * Clears all categorization tags. Requires 'edit_event_series' permission.
 */
export const eventseriesadminClearTags3Af6857F = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminClearTags3Af6857fData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminClearTags3Af6857fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add tags to categorize the event series (admin only).
 *
 * Tags help users discover series through filtering and search. Returns the updated tag list.
 * Requires 'edit_event_series' permission.
 */
export const eventseriesadminAddTags374800F7 = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminAddTags374800F7Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminAddTags374800F7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove specific tags from the event series (admin only).
 *
 * Removes only the specified tags, keeping others. Returns the updated tag list. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminRemoveTags4Fa83C0E = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminRemoveTags4Fa83C0eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminRemoveTags4Fa83C0eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Potluck Items
 *
 * View all potluck items for this event.
 *
 * Returns items users can bring, with flags indicating if each item is assigned and if you
 * own it. Available when event.potluck_open=true. Use this to display what's needed and
 * what you've claimed.
 */
export const potluckListPotluckItems6Efb6Eb9 = <ThrowOnError extends boolean = false>(
	options: Options<PotluckListPotluckItems6Efb6Eb9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		PotluckListPotluckItems6Efb6Eb9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options
	});
};

/**
 * Create Potluck Item
 *
 * Add a new item to the event's potluck list.
 *
 * Specify item name, quantity, and optional notes. Attendees can claim items via
 * POST /{event_id}/potluck/{item_id}/claim. Requires permission to create potluck items.
 */
export const potluckCreatePotluckItemD4710F64 = <ThrowOnError extends boolean = false>(
	options: Options<PotluckCreatePotluckItemD4710F64Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckCreatePotluckItemD4710F64Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Potluck Item
 *
 * Remove a potluck item from the event.
 *
 * Deletes the item even if it's been claimed. Requires permission to manage potluck items.
 */
export const potluckDeletePotluckItem957A382B = <ThrowOnError extends boolean = false>(
	options: Options<PotluckDeletePotluckItem957A382bData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		PotluckDeletePotluckItem957A382bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options
	});
};

/**
 * Update Potluck Item
 *
 * Update a potluck item's details.
 *
 * Modify item name, quantity, or notes. Requires permission to manage potluck items
 * (typically event organizers).
 */
export const potluckUpdatePotluckItem5A2Cc5Ea = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUpdatePotluckItem5A2Cc5EaData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		PotluckUpdatePotluckItem5A2Cc5EaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Claim Potluck Item
 *
 * Claim a potluck item to bring to the event.
 *
 * Assigns the item to you. Returns 400 if already claimed by someone else. Use this when
 * you want to commit to bringing a specific item.
 */
export const potluckClaimPotluckItem0Dd0D7Bb = <ThrowOnError extends boolean = false>(
	options: Options<PotluckClaimPotluckItem0Dd0D7BbData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckClaimPotluckItem0Dd0D7BbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/claim',
		...options
	});
};

/**
 * Unclaim Potluck Item
 *
 * Release a potluck item you previously claimed.
 *
 * Makes the item available for others to claim. Returns 404 if the item isn't claimed
 * by you.
 */
export const potluckUnclaimPotluckItemE366C231 = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUnclaimPotluckItemE366C231Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckUnclaimPotluckItemE366C231Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/unclaim',
		...options
	});
};

/**
 * List Org Questionnaires
 *
 * Browse questionnaires you have permission to view or manage.
 *
 * Returns questionnaires from organizations where you have staff/owner access. Use this to
 * find questionnaires to attach to events or review submissions.
 */
export const questionnaireListOrgQuestionnairesE0A0441C = <ThrowOnError extends boolean = false>(
	options?: Options<QuestionnaireListOrgQuestionnairesE0A0441cData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		QuestionnaireListOrgQuestionnairesE0A0441cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/',
		...options
	});
};

/**
 * Create Org Questionnaire
 *
 * Create a new admission questionnaire for an organization (admin only).
 *
 * Sets up an empty questionnaire structure. After creation, add sections and questions via
 * POST /questionnaires/{id}/sections and /multiple-choice-questions endpoints. Requires
 * 'create_questionnaire' permission (organization staff/owners).
 */
export const questionnaireCreateOrgQuestionnaireA73B2412 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateOrgQuestionnaireA73B2412Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateOrgQuestionnaireA73B2412Responses,
		QuestionnaireCreateOrgQuestionnaireA73B2412Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{organization_id}/create-questionnaire',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Org Questionnaire
 *
 * Retrieve a questionnaire's details and structure (admin only).
 *
 * Returns the questionnaire with all sections, questions, and settings. Use this to view or
 * edit an existing questionnaire. Requires permission to manage the organization's questionnaires.
 */
export const questionnaireGetOrgQuestionnaire88B731D9 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetOrgQuestionnaire88B731D9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetOrgQuestionnaire88B731D9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Create Section
 *
 * Add a section to organize questions in the questionnaire (admin only).
 *
 * Sections group related questions. Specify section name and display order. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateSection9Ca949D3 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateSection9Ca949D3Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateSection9Ca949D3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Section
 *
 * Update a questionnaire section's details (admin only).
 *
 * Modify section name or display order. Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateSection72E37612 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateSection72E37612Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateSection72E37612Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Question
 *
 * Add a multiple-choice question to the questionnaire (admin only).
 *
 * Create a question with predefined answer options. After creation, add options via
 * POST /questionnaires/{id}/multiple-choice-questions/{question_id}/options. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateMcQuestion30Dea3Cd = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcQuestion30Dea3CdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcQuestion30Dea3CdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Mc Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcQuestion2F22Dd77 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcQuestion2F22Dd77Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcQuestion2F22Dd77Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireCreateMcOption5312A4C1 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcOption5312A4C1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcOption5312A4C1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}/options',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcOptionFe7F96B7 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcOptionFe7F96B7Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcOptionFe7F96B7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Ft Question
 *
 * Add a free-text question to the questionnaire (admin only).
 *
 * Create an open-ended question for text responses. Can be auto-evaluated by LLM based on
 * scoring criteria. Requires 'edit_questionnaire' permission.
 */
export const questionnaireCreateFtQuestionD24560D0 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateFtQuestionD24560D0Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateFtQuestionD24560D0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Ft Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateFtQuestion828F4Ddc = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateFtQuestion828F4DdcData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateFtQuestion828F4DdcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Submissions
 *
 * View user submissions for this questionnaire (admin only).
 *
 * Returns submitted questionnaires ready for review. Use this to see who has applied for
 * event access and their responses. Requires 'evaluate_questionnaire' permission.
 */
export const questionnaireListSubmissions7E04Dd8D = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireListSubmissions7E04Dd8dData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireListSubmissions7E04Dd8dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions',
		...options
	});
};

/**
 * Get Submission Detail
 *
 * View detailed answers for a specific submission (admin only).
 *
 * Returns all questions and the user's answers, plus automatic evaluation results if available.
 * Use this to review a submission before manual approval/rejection. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireGetSubmissionDetail77Af308C = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetSubmissionDetail77Af308cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetSubmissionDetail77Af308cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}',
		...options
	});
};

/**
 * Evaluate Submission
 *
 * Manually approve or reject a questionnaire submission (admin only).
 *
 * Overrides automatic evaluation or provides decision for manual-review questionnaires.
 * Approved users can then RSVP or purchase tickets for the event. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireEvaluateSubmissionCcfabd98 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireEvaluateSubmissionCcfabd98Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireEvaluateSubmissionCcfabd98Responses,
		QuestionnaireEvaluateSubmissionCcfabd98Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}/evaluate',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get General Preferences
 *
 * Get your global preferences that apply across all organizations and events.
 *
 * Returns default notification and privacy settings. These serve as defaults that can be
 * overridden at organization, series, or event level.
 */
export const userpreferencesGetGeneralPreferencesA39613Ae = <ThrowOnError extends boolean = false>(
	options?: Options<UserpreferencesGetGeneralPreferencesA39613AeData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		UserpreferencesGetGeneralPreferencesA39613AeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options
	});
};

/**
 * Update Global Preferences
 *
 * Update your global preference defaults.
 *
 * Modify notification and privacy settings. Set overwrite_children=true to cascade changes
 * to all organization/series/event-level preferences, overriding custom settings.
 */
export const userpreferencesUpdateGlobalPreferencesC1D4E2Fb = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateGlobalPreferencesC1D4E2FbData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateGlobalPreferencesC1D4E2FbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Organization Preferences
 *
 * Get your preferences for a specific organization.
 *
 * Returns organization-level overrides for notifications and privacy. Falls back to global
 * preferences if not customized.
 */
export const userpreferencesGetOrganizationPreferencesB9Ac8Ee0 = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetOrganizationPreferencesB9Ac8Ee0Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetOrganizationPreferencesB9Ac8Ee0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options
	});
};

/**
 * Update Organization Preferences
 *
 * Update preferences for a specific organization.
 *
 * Overrides global defaults for this organization. Set overwrite_children=true to cascade
 * changes to all series/event-level preferences within this organization.
 */
export const userpreferencesUpdateOrganizationPreferences56790307 = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateOrganizationPreferences56790307Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateOrganizationPreferences56790307Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Series Preferences
 *
 * Get your preferences for a specific event series.
 *
 * Returns series-level overrides for notifications. Falls back to organization or global
 * preferences if not customized.
 */
export const userpreferencesGetEventSeriesPreferences93B5B471 = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetEventSeriesPreferences93B5B471Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventSeriesPreferences93B5B471Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options
	});
};

/**
 * Update Event Series Preferences
 *
 * Update preferences for a specific event series.
 *
 * Overrides organization/global defaults for this series. Set overwrite_children=true to
 * cascade changes to all individual event preferences within this series.
 */
export const userpreferencesUpdateEventSeriesPreferences23058B96 = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateEventSeriesPreferences23058B96Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventSeriesPreferences23058B96Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Preferences
 *
 * Get your preferences for a specific event.
 *
 * Returns event-level overrides for notifications. Falls back to series, organization, or
 * global preferences if not customized.
 */
export const userpreferencesGetEventPreferencesF62Bc462 = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesGetEventPreferencesF62Bc462Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventPreferencesF62Bc462Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options
	});
};

/**
 * Update Event Preferences
 *
 * Update preferences for a specific event.
 *
 * Overrides series/organization/global defaults for this event. The most specific preference
 * level always takes precedence.
 */
export const userpreferencesUpdateEventPreferences8C10Fbad = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesUpdateEventPreferences8C10FbadData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventPreferences8C10FbadResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Handle Webhook
 *
 * Process Stripe webhook events for payment processing.
 *
 * Handles payment confirmations, failures, and refunds. Verifies webhook signature for
 * security. This endpoint is called by Stripe, not by clients directly.
 */
export const stripewebhookHandleWebhookE602E6F5 = <ThrowOnError extends boolean = false>(
	options?: Options<StripewebhookHandleWebhookE602E6F5Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		StripewebhookHandleWebhookE602E6F5Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/stripe/webhook',
		...options
	});
};

/**
 * List Tags
 *
 * Browse and search all available tags in the system.
 *
 * Tags are used to categorize organizations, events, and series. Supports autocomplete via
 * the 'search' query parameter (e.g., /api/tags/?search=tech). Use this to populate tag
 * selection dropdowns or filters.
 */
export const tagListTagsA5Ccbacc = <ThrowOnError extends boolean = false>(
	options?: Options<TagListTagsA5CcbaccData, ThrowOnError>
) => {
	return (options?.client ?? client).get<TagListTagsA5CcbaccResponses, unknown, ThrowOnError>({
		url: '/api/tags/',
		...options
	});
};

/**
 * List Cities
 *
 * Search and browse cities from the global database.
 *
 * Supports filtering by country and searching by city name. Use the 'search' parameter
 * for autocomplete functionality. Useful for setting user location preferences or
 * filtering events by location.
 */
export const cityListCities0Bf56Bd4 = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCities0Bf56Bd4Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCities0Bf56Bd4Responses, unknown, ThrowOnError>({
		url: '/api/cities/',
		...options
	});
};

/**
 * List Countries
 *
 * Get a list of all countries with cities in the database.
 *
 * Returns country names for filtering cities. Use this to populate country
 * selection dropdowns in location pickers.
 */
export const cityListCountries9Ef2F0C1 = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCountries9Ef2F0C1Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCountries9Ef2F0C1Responses, unknown, ThrowOnError>(
		{
			url: '/api/cities/countries',
			...options
		}
	);
};

/**
 * Get City
 *
 * Retrieve detailed information for a specific city by ID.
 *
 * Returns city details including name, coordinates, and country. Use this to
 * get full city information after selecting from a search result.
 */
export const cityGetCityCc9D2716 = <ThrowOnError extends boolean = false>(
	options: Options<CityGetCityCc9D2716Data, ThrowOnError>
) => {
	return (options.client ?? client).get<CityGetCityCc9D2716Responses, unknown, ThrowOnError>({
		url: '/api/cities/{city_id}',
		...options
	});
};
