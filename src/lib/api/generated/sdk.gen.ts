// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	formDataBodySerializer,
	type Options as Options2,
	type TDataShape,
	urlSearchParamsBodySerializer
} from './client';
import { client } from './client.gen';
import type {
	AccountDeleteAccountConfirm0F0C9235Data,
	AccountDeleteAccountConfirm0F0C9235Responses,
	AccountDeleteAccountRequest69F634D7Data,
	AccountDeleteAccountRequest69F634D7Responses,
	AccountExportDataD9191C74Data,
	AccountExportDataD9191C74Responses,
	AccountMe3A20A6B3Data,
	AccountMe3A20A6B3Responses,
	AccountRegister9D970F22Data,
	AccountRegister9D970F22Responses,
	AccountResendVerificationEmail9Deaf986Data,
	AccountResendVerificationEmail9Deaf986Errors,
	AccountResendVerificationEmail9Deaf986Responses,
	AccountResetPasswordA4E203D5Data,
	AccountResetPasswordA4E203D5Responses,
	AccountResetPasswordRequest5997C6FeData,
	AccountResetPasswordRequest5997C6FeResponses,
	AccountUpdateProfile1Ef8B2E3Data,
	AccountUpdateProfile1Ef8B2E3Responses,
	AccountVerifyEmailAd47A9A2Data,
	AccountVerifyEmailAd47A9A2Responses,
	ApiApiHealthcheckData,
	ApiApiHealthcheckResponses,
	ApiApiVersionData,
	ApiApiVersionResponses,
	AuthGoogleLogin26Bc72A5Data,
	AuthGoogleLogin26Bc72A5Responses,
	AuthObtainToken1305A6C8Data,
	AuthObtainToken1305A6C8Responses,
	AuthObtainTokenWithOtp0598008cData,
	AuthObtainTokenWithOtp0598008cResponses,
	CityGetCityCc01Fc60Data,
	CityGetCityCc01Fc60Responses,
	CityListCitiesE4Aeaf5cData,
	CityListCitiesE4Aeaf5cResponses,
	CityListCountries0B04745eData,
	CityListCountries0B04745eResponses,
	DashboardDashboardEvents2C3491F9Data,
	DashboardDashboardEvents2C3491F9Responses,
	DashboardDashboardEventSeries621F6429Data,
	DashboardDashboardEventSeries621F6429Responses,
	DashboardDashboardInvitationRequests61Dfff69Data,
	DashboardDashboardInvitationRequests61Dfff69Responses,
	DashboardDashboardInvitations4C00C84bData,
	DashboardDashboardInvitations4C00C84bResponses,
	DashboardDashboardOrganizationsE9Dcef62Data,
	DashboardDashboardOrganizationsE9Dcef62Responses,
	DashboardDashboardRsvps550F56D2Data,
	DashboardDashboardRsvps550F56D2Responses,
	DashboardDashboardTickets73E7Fc3cData,
	DashboardDashboardTickets73E7Fc3cResponses,
	EventadminAddTagsA8700D97Data,
	EventadminAddTagsA8700D97Responses,
	EventadminApproveInvitationRequestF8B94Ad8Data,
	EventadminApproveInvitationRequestF8B94Ad8Responses,
	EventadminCancelTicketCe874F75Data,
	EventadminCancelTicketCe874F75Responses,
	EventadminCheckInTicket04A3521eData,
	EventadminCheckInTicket04A3521eErrors,
	EventadminCheckInTicket04A3521eResponses,
	EventadminClearTagsF2D4D570Data,
	EventadminClearTagsF2D4D570Responses,
	EventadminConfirmTicketPaymentC7A2E802Data,
	EventadminConfirmTicketPaymentC7A2E802Responses,
	EventadminCreateEventToken57De582dData,
	EventadminCreateEventToken57De582dResponses,
	EventadminCreateInvitationsE4873B37Data,
	EventadminCreateInvitationsE4873B37Errors,
	EventadminCreateInvitationsE4873B37Responses,
	EventadminCreateRsvpB210405aData,
	EventadminCreateRsvpB210405aResponses,
	EventadminCreateTicketTierCd4C7981Data,
	EventadminCreateTicketTierCd4C7981Responses,
	EventadminDeleteCoverArtE898B386Data,
	EventadminDeleteCoverArtE898B386Responses,
	EventadminDeleteEventToken252642A2Data,
	EventadminDeleteEventToken252642A2Responses,
	EventadminDeleteInvitationEndpoint32E91926Data,
	EventadminDeleteInvitationEndpoint32E91926Errors,
	EventadminDeleteInvitationEndpoint32E91926Responses,
	EventadminDeleteLogo536765D1Data,
	EventadminDeleteLogo536765D1Responses,
	EventadminDeleteRsvp66F0247cData,
	EventadminDeleteRsvp66F0247cResponses,
	EventadminDeleteTicketTierD00Ef5FaData,
	EventadminDeleteTicketTierD00Ef5FaResponses,
	EventadminGetRsvpF44Ab408Data,
	EventadminGetRsvpF44Ab408Responses,
	EventadminGetTicketB5B51CaaData,
	EventadminGetTicketB5B51CaaResponses,
	EventadminListEventTokens5B374771Data,
	EventadminListEventTokens5B374771Responses,
	EventadminListInvitationRequestsC8F27BfaData,
	EventadminListInvitationRequestsC8F27BfaResponses,
	EventadminListInvitations574F56C1Data,
	EventadminListInvitations574F56C1Responses,
	EventadminListPendingInvitations3C2259E9Data,
	EventadminListPendingInvitations3C2259E9Responses,
	EventadminListRsvpsD45452A3Data,
	EventadminListRsvpsD45452A3Responses,
	EventadminListTicketsE4298D62Data,
	EventadminListTicketsE4298D62Responses,
	EventadminListTicketTiersC747E0D9Data,
	EventadminListTicketTiersC747E0D9Responses,
	EventadminMarkTicketRefunded59F15C10Data,
	EventadminMarkTicketRefunded59F15C10Responses,
	EventadminRejectInvitationRequest4E2B5Cd1Data,
	EventadminRejectInvitationRequest4E2B5Cd1Responses,
	EventadminRemoveTagsA67038CaData,
	EventadminRemoveTagsA67038CaResponses,
	EventadminUpdateEventF788A5DaData,
	EventadminUpdateEventF788A5DaErrors,
	EventadminUpdateEventF788A5DaResponses,
	EventadminUpdateEventStatus0D75A909Data,
	EventadminUpdateEventStatus0D75A909Responses,
	EventadminUpdateEventToken8617D4C3Data,
	EventadminUpdateEventToken8617D4C3Responses,
	EventadminUpdateRsvp85B0321fData,
	EventadminUpdateRsvp85B0321fResponses,
	EventadminUpdateTicketTier2Ec98A6fData,
	EventadminUpdateTicketTier2Ec98A6fResponses,
	EventadminUploadCoverArtC9E9E1E1Data,
	EventadminUploadCoverArtC9E9E1E1Responses,
	EventadminUploadLogo92F3024eData,
	EventadminUploadLogo92F3024eResponses,
	EventClaimInvitationBb885D60Data,
	EventClaimInvitationBb885D60Errors,
	EventClaimInvitationBb885D60Responses,
	EventCreateInvitationRequestD453835eData,
	EventCreateInvitationRequestD453835eResponses,
	EventDeleteInvitationRequestA4F9B116Data,
	EventDeleteInvitationRequestA4F9B116Responses,
	EventGetEvent8494160fData,
	EventGetEvent8494160fResponses,
	EventGetEventAttendees84D06628Data,
	EventGetEventAttendees84D06628Responses,
	EventGetEventBySlugsEccf9Ec7Data,
	EventGetEventBySlugsEccf9Ec7Responses,
	EventGetEventTokenDetails390E245aData,
	EventGetEventTokenDetails390E245aErrors,
	EventGetEventTokenDetails390E245aResponses,
	EventGetMyEventStatus0Bf15F87Data,
	EventGetMyEventStatus0Bf15F87Responses,
	EventGetQuestionnaireC269B7B6Data,
	EventGetQuestionnaireC269B7B6Responses,
	EventListEvents3D775C9fData,
	EventListEvents3D775C9fResponses,
	EventListResourcesA5B7F979Data,
	EventListResourcesA5B7F979Responses,
	EventListTiersF61009CfData,
	EventListTiersF61009CfResponses,
	EventRsvpEventBed47A36Data,
	EventRsvpEventBed47A36Errors,
	EventRsvpEventBed47A36Responses,
	EventseriesadminAddTags51DcbbedData,
	EventseriesadminAddTags51DcbbedResponses,
	EventseriesadminClearTagsF7C25Db6Data,
	EventseriesadminClearTagsF7C25Db6Responses,
	EventseriesadminDeleteCoverArt4600Bb1bData,
	EventseriesadminDeleteCoverArt4600Bb1bResponses,
	EventseriesadminDeleteEventSeriesE4121FdaData,
	EventseriesadminDeleteEventSeriesE4121FdaResponses,
	EventseriesadminDeleteLogo636B29D7Data,
	EventseriesadminDeleteLogo636B29D7Responses,
	EventseriesadminRemoveTagsF5870F2dData,
	EventseriesadminRemoveTagsF5870F2dResponses,
	EventseriesadminUpdateEventSeriesE96E47A4Data,
	EventseriesadminUpdateEventSeriesE96E47A4Errors,
	EventseriesadminUpdateEventSeriesE96E47A4Responses,
	EventseriesadminUploadCoverArt2A75B17fData,
	EventseriesadminUploadCoverArt2A75B17fResponses,
	EventseriesadminUploadLogo15D67412Data,
	EventseriesadminUploadLogo15D67412Responses,
	EventseriesGetEventSeriesBySlugs74B9F036Data,
	EventseriesGetEventSeriesBySlugs74B9F036Responses,
	EventseriesGetEventSeriesFe999077Data,
	EventseriesGetEventSeriesFe999077Responses,
	EventseriesListEventSeries360C43BaData,
	EventseriesListEventSeries360C43BaResponses,
	EventseriesListResourcesEfa19705Data,
	EventseriesListResourcesEfa19705Responses,
	EventSubmitQuestionnaireFf674C6eData,
	EventSubmitQuestionnaireFf674C6eErrors,
	EventSubmitQuestionnaireFf674C6eResponses,
	EventTicketCheckoutA3A0818bData,
	EventTicketCheckoutA3A0818bErrors,
	EventTicketCheckoutA3A0818bResponses,
	EventTicketPwycCheckoutFb14F59bData,
	EventTicketPwycCheckoutFb14F59bErrors,
	EventTicketPwycCheckoutFb14F59bResponses,
	OrganizationadminAddStaff1C50988eData,
	OrganizationadminAddStaff1C50988eResponses,
	OrganizationadminAddTagsC7573A9bData,
	OrganizationadminAddTagsC7573A9bResponses,
	OrganizationadminApproveMembershipRequest110A0B49Data,
	OrganizationadminApproveMembershipRequest110A0B49Responses,
	OrganizationadminClearTags56Eb84DcData,
	OrganizationadminClearTags56Eb84DcResponses,
	OrganizationadminCreateEvent17Ddb0D1Data,
	OrganizationadminCreateEvent17Ddb0D1Errors,
	OrganizationadminCreateEvent17Ddb0D1Responses,
	OrganizationadminCreateEventSeries6E47Ba57Data,
	OrganizationadminCreateEventSeries6E47Ba57Errors,
	OrganizationadminCreateEventSeries6E47Ba57Responses,
	OrganizationadminCreateOrganizationTokenB13Ad2C6Data,
	OrganizationadminCreateOrganizationTokenB13Ad2C6Responses,
	OrganizationadminCreateResource4Af0Be0bData,
	OrganizationadminCreateResource4Af0Be0bResponses,
	OrganizationadminDeleteCoverArtB28Cd24aData,
	OrganizationadminDeleteCoverArtB28Cd24aResponses,
	OrganizationadminDeleteLogo798E53D8Data,
	OrganizationadminDeleteLogo798E53D8Responses,
	OrganizationadminDeleteOrganizationToken58A99A0dData,
	OrganizationadminDeleteOrganizationToken58A99A0dResponses,
	OrganizationadminDeleteResource9D744D88Data,
	OrganizationadminDeleteResource9D744D88Responses,
	OrganizationadminGetOrganizationA36853C6Data,
	OrganizationadminGetOrganizationA36853C6Responses,
	OrganizationadminGetResource58Dffb3eData,
	OrganizationadminGetResource58Dffb3eResponses,
	OrganizationadminListMembersA55C82A9Data,
	OrganizationadminListMembersA55C82A9Responses,
	OrganizationadminListMembershipRequests88728Fe8Data,
	OrganizationadminListMembershipRequests88728Fe8Responses,
	OrganizationadminListOrganizationTokens740Cfa0eData,
	OrganizationadminListOrganizationTokens740Cfa0eResponses,
	OrganizationadminListResourcesBc1A1334Data,
	OrganizationadminListResourcesBc1A1334Responses,
	OrganizationadminListStaff3C52F6A2Data,
	OrganizationadminListStaff3C52F6A2Responses,
	OrganizationadminRejectMembershipRequestB3338732Data,
	OrganizationadminRejectMembershipRequestB3338732Responses,
	OrganizationadminRemoveMemberCe474271Data,
	OrganizationadminRemoveMemberCe474271Responses,
	OrganizationadminRemoveStaffFf71CedfData,
	OrganizationadminRemoveStaffFf71CedfResponses,
	OrganizationadminRemoveTags1Cc2Fe64Data,
	OrganizationadminRemoveTags1Cc2Fe64Responses,
	OrganizationadminStripeAccountVerifyA8D68A23Data,
	OrganizationadminStripeAccountVerifyA8D68A23Responses,
	OrganizationadminStripeConnect377358F8Data,
	OrganizationadminStripeConnect377358F8Responses,
	OrganizationadminUpdateOrganization5F416Ad7Data,
	OrganizationadminUpdateOrganization5F416Ad7Responses,
	OrganizationadminUpdateOrganizationToken1Db98412Data,
	OrganizationadminUpdateOrganizationToken1Db98412Responses,
	OrganizationadminUpdateResource128112C5Data,
	OrganizationadminUpdateResource128112C5Responses,
	OrganizationadminUpdateStaffPermissionsC3Fdf02fData,
	OrganizationadminUpdateStaffPermissionsC3Fdf02fResponses,
	OrganizationadminUploadCoverArtC636Bde9Data,
	OrganizationadminUploadCoverArtC636Bde9Responses,
	OrganizationadminUploadLogo2C2B584bData,
	OrganizationadminUploadLogo2C2B584bResponses,
	OrganizationClaimInvitationC7B67C36Data,
	OrganizationClaimInvitationC7B67C36Errors,
	OrganizationClaimInvitationC7B67C36Responses,
	OrganizationCreateMembershipRequest9Aa2802dData,
	OrganizationCreateMembershipRequest9Aa2802dResponses,
	OrganizationGetOrganizationAd60C107Data,
	OrganizationGetOrganizationAd60C107Responses,
	OrganizationGetOrganizationTokenDetailsA2C17599Data,
	OrganizationGetOrganizationTokenDetailsA2C17599Errors,
	OrganizationGetOrganizationTokenDetailsA2C17599Responses,
	OrganizationListOrganizations8Bf9Dd00Data,
	OrganizationListOrganizations8Bf9Dd00Responses,
	OrganizationListResourcesD6E6F25fData,
	OrganizationListResourcesD6E6F25fResponses,
	OtpDisableOtp70712E08Data,
	OtpDisableOtp70712E08Responses,
	OtpEnableOtp09Cc5C57Data,
	OtpEnableOtp09Cc5C57Responses,
	OtpSetupOtp14F4155eData,
	OtpSetupOtp14F4155eResponses,
	PermissionMyPermissions4F143B34Data,
	PermissionMyPermissions4F143B34Responses,
	PotluckClaimPotluckItem14527Ac3Data,
	PotluckClaimPotluckItem14527Ac3Responses,
	PotluckCreatePotluckItem48B8C4D9Data,
	PotluckCreatePotluckItem48B8C4D9Responses,
	PotluckDeletePotluckItem86981B8dData,
	PotluckDeletePotluckItem86981B8dResponses,
	PotluckListPotluckItemsAae21A49Data,
	PotluckListPotluckItemsAae21A49Responses,
	PotluckUnclaimPotluckItem5Bcf943cData,
	PotluckUnclaimPotluckItem5Bcf943cResponses,
	PotluckUpdatePotluckItemAac1B400Data,
	PotluckUpdatePotluckItemAac1B400Responses,
	QuestionnaireAssignEventAc744640Data,
	QuestionnaireAssignEventAc744640Responses,
	QuestionnaireAssignEventSeries77D7F148Data,
	QuestionnaireAssignEventSeries77D7F148Responses,
	QuestionnaireCreateFtQuestion03B51084Data,
	QuestionnaireCreateFtQuestion03B51084Responses,
	QuestionnaireCreateMcOption09F1F36fData,
	QuestionnaireCreateMcOption09F1F36fResponses,
	QuestionnaireCreateMcQuestionF602F098Data,
	QuestionnaireCreateMcQuestionF602F098Responses,
	QuestionnaireCreateOrgQuestionnaire8E25E4FaData,
	QuestionnaireCreateOrgQuestionnaire8E25E4FaErrors,
	QuestionnaireCreateOrgQuestionnaire8E25E4FaResponses,
	QuestionnaireCreateSectionD0885Cf4Data,
	QuestionnaireCreateSectionD0885Cf4Responses,
	QuestionnaireDeleteFtQuestion28Fb3533Data,
	QuestionnaireDeleteFtQuestion28Fb3533Responses,
	QuestionnaireDeleteMcOption8Cac0Cf2Data,
	QuestionnaireDeleteMcOption8Cac0Cf2Responses,
	QuestionnaireDeleteMcQuestion59670769Data,
	QuestionnaireDeleteMcQuestion59670769Responses,
	QuestionnaireDeleteOrgQuestionnaireF9D0E2B8Data,
	QuestionnaireDeleteOrgQuestionnaireF9D0E2B8Responses,
	QuestionnaireDeleteSection4947C09dData,
	QuestionnaireDeleteSection4947C09dResponses,
	QuestionnaireEvaluateSubmission8A937596Data,
	QuestionnaireEvaluateSubmission8A937596Errors,
	QuestionnaireEvaluateSubmission8A937596Responses,
	QuestionnaireGetOrgQuestionnaire9412880fData,
	QuestionnaireGetOrgQuestionnaire9412880fResponses,
	QuestionnaireGetSubmissionDetail84Eca3E0Data,
	QuestionnaireGetSubmissionDetail84Eca3E0Responses,
	QuestionnaireListOrgQuestionnairesBec0Bb17Data,
	QuestionnaireListOrgQuestionnairesBec0Bb17Responses,
	QuestionnaireListSubmissionsD1E7Bf1fData,
	QuestionnaireListSubmissionsD1E7Bf1fResponses,
	QuestionnaireReplaceEventsD94Bbf53Data,
	QuestionnaireReplaceEventsD94Bbf53Responses,
	QuestionnaireReplaceEventSeriesEf1415E1Data,
	QuestionnaireReplaceEventSeriesEf1415E1Responses,
	QuestionnaireUnassignEvent6Fe80482Data,
	QuestionnaireUnassignEvent6Fe80482Responses,
	QuestionnaireUnassignEventSeriesC6F8E438Data,
	QuestionnaireUnassignEventSeriesC6F8E438Responses,
	QuestionnaireUpdateFtQuestionDd5C4Ea7Data,
	QuestionnaireUpdateFtQuestionDd5C4Ea7Responses,
	QuestionnaireUpdateMcOption6Ffba14bData,
	QuestionnaireUpdateMcOption6Ffba14bResponses,
	QuestionnaireUpdateMcQuestion27Af4B1aData,
	QuestionnaireUpdateMcQuestion27Af4B1aResponses,
	QuestionnaireUpdateOrgQuestionnaire874Aede8Data,
	QuestionnaireUpdateOrgQuestionnaire874Aede8Responses,
	QuestionnaireUpdateQuestionnaireStatusE10312EfData,
	QuestionnaireUpdateQuestionnaireStatusE10312EfResponses,
	QuestionnaireUpdateSection0A7B3FaaData,
	QuestionnaireUpdateSection0A7B3FaaResponses,
	StripewebhookHandleWebhook3Dfe6523Data,
	StripewebhookHandleWebhook3Dfe6523Responses,
	TagListTagsD09052F8Data,
	TagListTagsD09052F8Responses,
	TokenRefreshData,
	TokenRefreshResponses,
	UserpreferencesGetEventPreferencesDdb0Bab4Data,
	UserpreferencesGetEventPreferencesDdb0Bab4Responses,
	UserpreferencesGetEventSeriesPreferences1C61AeacData,
	UserpreferencesGetEventSeriesPreferences1C61AeacResponses,
	UserpreferencesGetGeneralPreferencesDd20038dData,
	UserpreferencesGetGeneralPreferencesDd20038dResponses,
	UserpreferencesGetOrganizationPreferences9A545225Data,
	UserpreferencesGetOrganizationPreferences9A545225Responses,
	UserpreferencesUpdateEventPreferences2E1B5D41Data,
	UserpreferencesUpdateEventPreferences2E1B5D41Responses,
	UserpreferencesUpdateEventSeriesPreferences401Fa475Data,
	UserpreferencesUpdateEventSeriesPreferences401Fa475Responses,
	UserpreferencesUpdateGlobalPreferences882D0D3fData,
	UserpreferencesUpdateGlobalPreferences882D0D3fResponses,
	UserpreferencesUpdateOrganizationPreferences338Db882Data,
	UserpreferencesUpdateOrganizationPreferences338Db882Responses
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Version
 *
 * Get the API version.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiVersion = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiVersionData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiVersionResponses, unknown, ThrowOnError>({
		url: '/api/version',
		...options
	});
};

/**
 * Healthcheck
 *
 * Check the health of the API.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiHealthcheck = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiHealthcheckData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiHealthcheckResponses, unknown, ThrowOnError>({
		url: '/api/healthcheck',
		...options
	});
};

/**
 * Obtain Token
 *
 * Authenticate with email and password to obtain JWT access/refresh tokens.
 *
 * For users without 2FA: Returns standard JWT token pair for immediate access.
 * For users with TOTP enabled: Returns a temporary token that must be exchanged for
 * a full token pair via POST /auth/token/pair/otp along with the TOTP code.
 * Users registered via Google SSO must use POST /auth/google/login instead.
 */
export const authObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainToken1305A6C8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthObtainToken1305A6C8Responses, unknown, ThrowOnError>({
		url: '/api/auth/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Refresh Token
 */
export const tokenRefresh = <ThrowOnError extends boolean = false>(
	options: Options<TokenRefreshData, ThrowOnError>
) => {
	return (options.client ?? client).post<TokenRefreshResponses, unknown, ThrowOnError>({
		url: '/api/auth/refresh',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Obtain Token With Otp
 *
 * Complete 2FA authentication by exchanging temporary token and TOTP code for JWT tokens.
 *
 * Call this after POST /auth/token/pair returns a temporary token for a 2FA-enabled user.
 * Validates the TOTP code from the user's authenticator app and returns a standard JWT token
 * pair on success. Returns 401 if the TOTP code is invalid.
 */
export const authObtainTokenWithOtp = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainTokenWithOtp0598008cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthObtainTokenWithOtp0598008cResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/token/pair/otp',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Google Login
 *
 * Authenticate or register via Google SSO using a Google ID token.
 *
 * Verifies the Google ID token, creates a new user if needed, and returns JWT tokens.
 * For existing Google SSO users, this is the only valid login method - they cannot
 * use password-based authentication.
 */
export const authGoogleLogin = <ThrowOnError extends boolean = false>(
	options: Options<AuthGoogleLogin26Bc72A5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthGoogleLogin26Bc72A5Responses, unknown, ThrowOnError>({
		url: '/api/auth/google/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Setup Otp
 *
 * Get the TOTP provisioning URI to configure an authenticator app.
 *
 * Returns a URI (often as QR code) to scan with authenticator apps like Google Authenticator
 * or Authy. Returns 400 if 2FA is already enabled. After scanning, verify the setup with
 * POST /otp/verify to activate 2FA.
 */
export const otpSetupOtp = <ThrowOnError extends boolean = false>(
	options?: Options<OtpSetupOtp14F4155eData, ThrowOnError>
) => {
	return (options?.client ?? client).get<OtpSetupOtp14F4155eResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/setup',
		...options
	});
};

/**
 * Enable Otp
 *
 * Activate 2FA by verifying the TOTP code from the authenticator app.
 *
 * Call this after GET /otp/setup with a code from your authenticator app to confirm
 * it's configured correctly. On success, activates 2FA for the account. Future logins
 * will require the TOTP code via POST /auth/token/pair/otp. Returns 403 if code is invalid.
 */
export const otpEnableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpEnableOtp09Cc5C57Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpEnableOtp09Cc5C57Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Disable Otp
 *
 * Deactivate 2FA after verifying the current TOTP code.
 *
 * Requires the current TOTP code to prevent unauthorized disabling. After disabling,
 * login will only require email and password via POST /auth/token/pair. Returns 403
 * if the TOTP code is invalid.
 */
export const otpDisableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpDisableOtp70712E08Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpDisableOtp70712E08Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/disable',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Export Data
 *
 * Request a GDPR-compliant export of all personal data.
 *
 * Initiates an asynchronous export of all user data including profile, events, tickets,
 * and submissions. The export will be emailed to the user when ready. Rate-limited to
 * prevent abuse.
 */
export const accountExportData = <ThrowOnError extends boolean = false>(
	options?: Options<AccountExportDataD9191C74Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountExportDataD9191C74Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/export-data',
		...options
	});
};

/**
 * Me
 *
 * Retrieve the authenticated user's profile information.
 *
 * Returns complete user profile including email, name, location preferences, and 2FA status.
 * Use this to display user info in the UI or verify authentication status.
 */
export const accountMe = <ThrowOnError extends boolean = false>(
	options?: Options<AccountMe3A20A6B3Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<AccountMe3A20A6B3Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options
	});
};

/**
 * Update Profile
 *
 * Update the authenticated user's profile information.
 *
 * Allows updating name, location preferences, and other profile fields. Only provided
 * fields are updated. Returns the updated user profile.
 */
export const accountUpdateProfile = <ThrowOnError extends boolean = false>(
	options: Options<AccountUpdateProfile1Ef8B2E3Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		AccountUpdateProfile1Ef8B2E3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Register
 *
 * Create a new user account with email and password.
 *
 * Creates a new account and sends a verification email. The account is created but not
 * fully active until email is verified via POST /account/verify. If an unverified account
 * with the same email exists, resends the verification email. Returns 400 if a verified
 * account already exists.
 */
export const accountRegister = <ThrowOnError extends boolean = false>(
	options: Options<AccountRegister9D970F22Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AccountRegister9D970F22Responses, unknown, ThrowOnError>({
		url: '/api/account/register',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Verify Email
 *
 * Verify email address using the token from the verification email.
 *
 * Call this with the token received via email after registration. On success, activates
 * the account and returns the verified user profile along with JWT tokens for immediate login.
 * The verification token is single-use and expires after a set period.
 */
export const accountVerifyEmail = <ThrowOnError extends boolean = false>(
	options: Options<AccountVerifyEmailAd47A9A2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountVerifyEmailAd47A9A2Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Resend Verification Email
 *
 * Resend the email verification link to the authenticated user.
 *
 * Use this if the original verification email was lost or expired. Returns 400 if the
 * email is already verified. Requires authentication with the unverified account's JWT.
 */
export const accountResendVerificationEmail = <ThrowOnError extends boolean = false>(
	options?: Options<AccountResendVerificationEmail9Deaf986Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountResendVerificationEmail9Deaf986Responses,
		AccountResendVerificationEmail9Deaf986Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/verify-resend',
		...options
	});
};

/**
 * Delete Account Request
 *
 * Initiate GDPR-compliant account deletion by sending confirmation email.
 *
 * Sends an email with a deletion confirmation link. The account is not deleted until
 * the user confirms via POST /account/delete-confirm with the token from the email.
 * This two-step process prevents accidental deletions.
 */
export const accountDeleteAccountRequest = <ThrowOnError extends boolean = false>(
	options?: Options<AccountDeleteAccountRequest69F634D7Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountDeleteAccountRequest69F634D7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/delete-request',
		...options
	});
};

/**
 * Delete Account Confirm
 *
 * Permanently delete the account using the confirmation token from email.
 *
 * Call this with the token received via email after POST /account/delete-request.
 * This action is irreversible and deletes all user data. The deletion is processed
 * asynchronously in the background. The deletion token is single-use and expires
 * after a set period.
 */
export const accountDeleteAccountConfirm = <ThrowOnError extends boolean = false>(
	options: Options<AccountDeleteAccountConfirm0F0C9235Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountDeleteAccountConfirm0F0C9235Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/delete-confirm',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password Request
 *
 * Request a password reset by email.
 *
 * Sends a password reset link to the provided email if an account exists. Always returns
 * a success message to prevent user enumeration attacks. Google SSO users cannot use this
 * endpoint. After receiving the email, use POST /account/password/reset with the token.
 */
export const accountResetPasswordRequest = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordRequest5997C6FeData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordRequest5997C6FeResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset-request',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password
 *
 * Reset password using the token from the password reset email.
 *
 * Call this with the token received via email after POST /account/password/reset-request.
 * The new password must meet security requirements. The reset token is single-use and
 * expires after a set period. After reset, the user must login again with the new password.
 */
export const accountResetPassword = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordA4E203D5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordA4E203D5Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Dashboard Organizations
 *
 * View organizations for your dashboard filtered by your relationship to them.
 *
 * Filter by: organizations you own, are staff of, are a member of, or have pending requests to.
 * Shows only organizations you have permission to view. Use this to display "My Organizations"
 * sections in the UI.
 */
export const dashboardDashboardOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardOrganizationsE9Dcef62Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardOrganizationsE9Dcef62Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/organizations',
		...options
	});
};

/**
 * Dashboard Events
 *
 * View upcoming events for your dashboard filtered by your relationship to them.
 *
 * Filter by: events you're organizing, attending (RSVP'd or have tickets), invited to, or have
 * requested invitations to. Only shows future events you have permission to view. Use this to
 * display "My Events" sections in the UI.
 */
export const dashboardDashboardEvents = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEvents2C3491F9Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEvents2C3491F9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/events',
		...options
	});
};

/**
 * Dashboard Event Series
 *
 * View event series for your dashboard filtered by your relationship to them.
 *
 * Filter by: series you're organizing or series you're attending events in. Shows only
 * series you have permission to view. Use this to display "My Series" sections in the UI.
 */
export const dashboardDashboardEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventSeries621F6429Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventSeries621F6429Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/event_series',
		...options
	});
};

/**
 * Dashboard Invitations
 *
 * View your event invitations across all events.
 *
 * Returns invitations you've received with event details and any special privileges granted
 * (tier assignment, waived requirements, etc.). By default shows only invitations for upcoming
 * events; set include_past=true to include past events. An event is considered past if its end
 * time has passed. Filter by event_id to see invitations for a specific event.
 */
export const dashboardDashboardInvitations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardInvitations4C00C84bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardInvitations4C00C84bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/invitations',
		...options
	});
};

/**
 * Dashboard Tickets
 *
 * View your tickets across all events.
 *
 * Returns all your tickets with their current status and event details.
 * By default, shows only tickets for upcoming events; set include_past=true
 * to include past events. An event is considered past if its end time has passed.
 * Supports filtering by status (pending/active/cancelled/checked_in) and
 * payment method. Results are ordered by newest first.
 */
export const dashboardDashboardTickets = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardTickets73E7Fc3cData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardTickets73E7Fc3cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/tickets',
		...options
	});
};

/**
 * Dashboard Invitation Requests
 *
 * View your invitation requests across all events.
 *
 * Returns your invitation requests with their current status. By default shows only pending
 * requests; use ?status=approved or ?status=rejected to see decided requests, or omit the
 * status parameter to see all requests. Filter by event_id to see requests for a specific
 * event. Use this to track which events you've requested access to.
 */
export const dashboardDashboardInvitationRequests = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardInvitationRequests61Dfff69Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardInvitationRequests61Dfff69Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/invitation-requests',
		...options
	});
};

/**
 * Dashboard Rsvps
 *
 * View your RSVPs across all events.
 *
 * Returns all your RSVPs with their current status and event details.
 * By default, shows only RSVPs for upcoming events; set include_past=true
 * to include past events. An event is considered past if its end time has passed.
 * Supports filtering by status (yes/no/maybe). Results are ordered by newest first.
 */
export const dashboardDashboardRsvps = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardRsvps550F56D2Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardRsvps550F56D2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/rsvps',
		...options
	});
};

/**
 * List Organizations
 *
 * Browse and search organizations visible to the current user.
 *
 * Results are filtered by visibility settings and user memberships. By default orders by
 * 'distance' (nearest first based on user location). Can also sort alphabetically by 'name'
 * or reverse with '-name'. Supports text search and filtering.
 */
export const organizationListOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<OrganizationListOrganizations8Bf9Dd00Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		OrganizationListOrganizations8Bf9Dd00Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/',
		...options
	});
};

/**
 * Get Organization
 *
 * Retrieve organization details using its unique slug.
 *
 * Returns full organization information including description, location, member count, and
 * settings. Use this to display the organization profile page.
 */
export const organizationGetOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationGetOrganizationAd60C107Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationGetOrganizationAd60C107Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this organization and marked for display on organization page.
 *
 * Returns documents, links, or media files provided by organization admins. Resources may
 * be public or restricted to members only. Supports filtering by type and text search.
 */
export const organizationListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationListResourcesD6E6F25fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationListResourcesD6E6F25fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/resources',
		...options
	});
};

/**
 * Create Membership Request
 *
 * Submit a request to become a member of this organization.
 *
 * Creates a membership request that organization admins can approve or reject. Being a
 * member may be required to access certain members-only events. Returns the created
 * request for tracking status.
 */
export const organizationCreateMembershipRequest = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationCreateMembershipRequest9Aa2802dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationCreateMembershipRequest9Aa2802dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/membership-requests',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Organization Token Details
 *
 * Preview an organization token to see what access it grants.
 *
 * This endpoint allows users to see token details before deciding whether to claim it.
 * No authentication required - tokens are meant to be shareable.
 *
 * **Primary Use Case: Visibility via Token Header**
 * The main purpose of organization tokens is to grant temporary visibility to organizations.
 * Frontend extracts tokens from shareable URLs like `/organizations/{slug}?ot={token_id}`
 * and passes them to the API via the `X-Organization-Token` header.
 *
 * **Returns:**
 * - `id`: The token code (for use in URLs as `?ot=` query param)
 * - `organization`: The organization this token grants access to
 * - `name`: Display name (e.g., "New Member Recruitment")
 * - `expires_at`: When the token stops working (null = never expires)
 * - `max_uses`: Maximum number of claims (0 = unlimited)
 * - `uses`: Current number of claims
 * - `grants_membership`: Whether users become members when claiming
 * - `grants_staff_status`: Whether users become staff when claiming
 *
 * **Frontend Usage:**
 * ```javascript
 * // When user visits /organizations/my-org?ot=xyz789, extract and use the token:
 * const urlParams = new URLSearchParams(window.location.search);
 * const orgToken = urlParams.get('ot');
 *
 * // Preview the token first
 * const token = await fetch(`/api/organizations/tokens/${orgToken}`).then(r => r.json());
 *
 * // Then access the organization with token in header
 * const org = await fetch(`/api/organizations/${token.organization.slug}`, {
 * headers: { 'X-Organization-Token': orgToken }
 * }).then(r => r.json());
 *
 * if (token.grants_membership || token.grants_staff_status) {
 * // This token can be claimed for membership/staff access
 * const access = token.grants_staff_status ? 'staff' : 'member';
 * showClaimButton(`Join as ${access}: ${org.name}`);
 * } else {
 * // This is a read-only token for viewing only
 * showMessage(`View access to: ${org.name}`);
 * }
 * ```
 *
 * **Token Types:**
 * 1. **Read-Only Tokens** (`grants_membership=False`, `grants_staff_status=False`)
 * - Share organization link with non-members
 * - Users can VIEW the organization but cannot automatically join
 * - Example: Share with partners so they can see organization details
 *
 * 2. **Membership Tokens** (`grants_membership=True`, `grants_staff_status=False`)
 * - Users can both VIEW and JOIN as members
 * - Creates OrganizationMember when claimed via POST `/organizations/claim-invitation/{token}`
 *
 * 3. **Staff Tokens** (`grants_staff_status=True`)
 * - Users can both VIEW and JOIN as staff with permissions
 * - Creates OrganizationStaff when claimed
 * - Should be shared privately (not publicly)
 *
 * **Error Cases:**
 * - 404: Token doesn't exist or has been deleted
 */
export const organizationGetOrganizationTokenDetails = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationGetOrganizationTokenDetailsA2C17599Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationGetOrganizationTokenDetailsA2C17599Responses,
		OrganizationGetOrganizationTokenDetailsA2C17599Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/tokens/{token_id}',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an organization membership invitation using a token from invitation link.
 *
 * Creates an OrganizationMember record, granting you member status. Members may have
 * access to members-only events and resources. Returns the organization on success,
 * or 400 if the token is invalid/expired.
 */
export const organizationClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationClaimInvitationC7B67C36Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationClaimInvitationC7B67C36Responses,
		OrganizationClaimInvitationC7B67C36Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Organization
 *
 * Get comprehensive organization details including all platform fee and Stripe fields.
 */
export const organizationadminGetOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetOrganizationA36853C6Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetOrganizationA36853C6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options
	});
};

/**
 * Update Organization
 *
 * Update organization by slug.
 */
export const organizationadminUpdateOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateOrganization5F416Ad7Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganization5F416Ad7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Stripe Connect
 *
 * Get a link to onboard the organization to Stripe.
 */
export const organizationadminStripeConnect = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeConnect377358F8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeConnect377358F8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/connect',
		...options
	});
};

/**
 * Stripe Account Verify
 *
 * Get the organization's Stripe account status.
 */
export const organizationadminStripeAccountVerify = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeAccountVerifyA8D68A23Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeAccountVerifyA8D68A23Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/account/verify',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to organization.
 */
export const organizationadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadLogo2C2B584bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadLogo2C2B584bResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to organization.
 */
export const organizationadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadCoverArtC636Bde9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadCoverArtC636Bde9Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from organization.
 */
export const organizationadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteLogo798E53D8Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteLogo798E53D8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from organization.
 */
export const organizationadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteCoverArtB28Cd24aData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteCoverArtB28Cd24aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-cover-art',
		...options
	});
};

/**
 * Create Event Series
 *
 * Create a new event series.
 */
export const organizationadminCreateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEventSeries6E47Ba57Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEventSeries6E47Ba57Responses,
		OrganizationadminCreateEventSeries6E47Ba57Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Event
 *
 * Create a new event.
 */
export const organizationadminCreateEvent = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEvent17Ddb0D1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEvent17Ddb0D1Responses,
		OrganizationadminCreateEvent17Ddb0D1Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Organization Tokens
 *
 * Retrieve all membership invitation tokens for this organization.
 *
 * Organization tokens serve two purposes:
 * 1. **Visibility** - Grant temporary access to view private organizations via `?ot=` URL parameter
 * 2. **Membership** - Allow users to join as members or staff
 *
 * Use this to view, manage, and track all active invitation links.
 *
 * **Returns:**
 * Paginated list of tokens with:
 * - `id`: The unique token code (used in shareable links)
 * - `name`: Display name for organization (e.g., "New Member Link", "Staff Onboarding")
 * - `issuer`: The user who created this token
 * - `expires_at`: When the token stops working (null = never expires)
 * - `uses`: How many people have joined using this token
 * - `max_uses`: Maximum allowed uses (0 = unlimited)
 * - `grants_membership`: If true, users become organization members
 * - `grants_staff_status`: If true, users become staff with permissions
 * - `created_at`: When the token was created
 *
 * **Filtering & Search:**
 * - Search by token name
 * - Filter by expiration status, grant type (member/staff), or usage count
 * - Results are paginated (20 per page by default)
 *
 * **Frontend Implementation:**
 * Build an organization token management dashboard:
 *
 * 1. **Token List Table:**
 * ```
 * Name                 | Type    | Uses      | Expires    | Actions
 * ─────────────────────┼─────────┼───────────┼────────────┼──────────
 * New Member Link      | Member  | 45/100    | May 1      | Copy Edit Delete
 * Staff Onboarding     | Staff   | 3/5       | Never      | Copy Edit Delete
 * Trial Period Access  | Member  | 120/∞     | Expired    | View Delete
 * ```
 *
 * 2. **Status Badges:**
 * - Active (green): Can still be used
 * - Expired (red): Past expiration date
 * - Full (yellow): Reached max_uses
 * - Staff (purple badge): grants_staff_status=true
 *
 * 3. **Shareable Link Format:**
 * - For visibility: `https://yourapp.com/organizations/{slug}?ot={token_id}`
 * (Frontend extracts `?ot=` and sends as `X-Organization-Token` header to API)
 * - For claiming: `https://yourapp.com/join/org/{token_id}` → POST `/organizations/claim-invitation/{token_id}`
 *
 * 4. **Analytics Display:**
 * - Show usage trends over time
 * - Display member vs staff token breakdown
 * - Track which tokens are most effective for growth
 *
 * **Use Cases:**
 * - Monitor all organization invitation links in one place
 * - Audit who created which tokens and track their usage
 * - Identify which recruitment channels are most effective
 * - Clean up expired or unused tokens
 * - Verify staff invitation tokens are properly restricted
 */
export const organizationadminListOrganizationTokens = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListOrganizationTokens740Cfa0eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListOrganizationTokens740Cfa0eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens',
		...options
	});
};

/**
 * Create Organization Token
 *
 * Create a new shareable token for this organization.
 *
 * Organization tokens serve dual purposes:
 * 1. **Primary: Visibility** - Share links like `/organizations/{slug}?ot={token}`
 * to let non-members view private orgs
 * 2. **Secondary: Membership** - Optionally allow users to claim membership/staff status
 *
 * This enables sharing organization details in group chats, social media, or with partners without
 * requiring them to become members first.
 *
 * **Use Cases:**
 * - **Member Recruitment:** Share on social media or email to grow membership
 * - **Staff Onboarding:** Create staff-level tokens for new employees/volunteers
 * - **Partner Access:** Give to partner organizations for bulk member addition
 * - **Time-Limited Campaigns:** Trial memberships that expire after promotional period
 * - **Capacity Management:** Limit new members (e.g., "Accept first 50 applicants")
 * - **Department-Specific Links:** Track which recruitment channels are most effective
 * - **Bulk Invitations:** Instead of entering 100 emails, share one link
 *
 * **Parameters:**
 * - `name`: Display name for organization (e.g., "Spring 2025 Recruitment", "Staff Portal")
 * - `duration`: Minutes until expiration (default: 24*60 = 1 day)
 * - `max_uses`: Maximum people who can use this token (default: 1, use 0 for unlimited)
 * - `grants_membership`: If true, users become organization members (default: true)
 * - `grants_staff_status`: If true, users become staff with permissions (default: false)
 *
 * **Important:** You CANNOT set both `grants_membership` and `grants_staff_status` to false.
 * The token must grant at least one type of access.
 *
 * **Returns:**
 * The created token with a unique `id` that serves as the shareable code.
 *
 * **Business Logic:**
 * - Token issuer is automatically set to the current authenticated user
 * - Expiration is calculated from current time + duration
 * - Token ID is a secure random 8-character alphanumeric code
 * - Staff tokens also grant member status automatically
 * - Created tokens start with 0 uses
 *
 * **Frontend Implementation:**
 * After creation, immediately display the shareable link:
 *
 * ```javascript
 * // On successful creation:
 * const shareableUrl = `https://yourapp.com/join/org/${response.id}`;
 *
 * // Show UI with:
 * - Prominent "Copy Link" button
 * - QR code for physical distribution (posters, flyers)
 * - Email template with embedded link
 * - Social media share buttons (Twitter, LinkedIn, Facebook)
 * - Usage tracking: "0 / 100 people joined" with progress bar
 * - Expiration countdown: "Expires in 6 days, 23 hours"
 * - Type badge: "Member Access" or "Staff Access" (with warning icon for staff)
 * ```
 *
 * **Example Workflows:**
 *
 * 1. **Member Recruitment Campaign:**
 * ```
 * POST /organization-admin/my-org/token
 * {
 * "name": "Fall 2025 Open House",
 * "duration": 30 * 24 * 60,  // 30 days
 * "max_uses": 0,  // unlimited
 * "grants_membership": true,
 * "grants_staff_status": false
 * }
 * ```
 * → Share link on website/social media
 * → New members join automatically
 *
 * 2. **Staff Onboarding:**
 * ```
 * POST /organization-admin/my-org/token
 * {
 * "name": "New Staff Onboarding Q1 2025",
 * "duration": 7 * 24 * 60,  // 7 days
 * "max_uses": 5,  // exactly 5 new staff
 * "grants_membership": true,
 * "grants_staff_status": true
 * }
 * ```
 * → Send link privately to 5 new hires
 * → They get staff access immediately
 * → Token auto-expires after 5 uses
 *
 * **Security Considerations:**
 * - **Staff tokens are sensitive** - only share privately (email, Slack DM)
 * - Member tokens can be public (social media, website)
 * - Consider short expiration for staff tokens (1-7 days)
 * - Use max_uses to prevent link abuse
 * - Staff get default permissions defined in PermissionMap
 *
 * **Error Cases:**
 * - 403: User lacks "manage_members" permission
 * - 404: Organization slug not found or user lacks access
 */
export const organizationadminCreateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminCreateOrganizationTokenB13Ad2C6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateOrganizationTokenB13Ad2C6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Organization Token
 *
 * Permanently delete an organization token and invalidate all links using it.
 *
 * **Use Cases:**
 * - Revoke access when a token is compromised or shared inappropriately
 * - Clean up expired tokens to keep the token list organized
 * - Remove tokens after completing a recruitment campaign
 * - Invalidate staff tokens after onboarding is complete
 * - Cancel public links that are no longer needed
 *
 * **Important Warnings:**
 * - This action is IRREVERSIBLE - the token and its link become permanently invalid
 * - New users with the link will no longer be able to join the organization
 * - However, users who ALREADY joined using this token remain as members/staff
 * - The token's usage statistics are permanently lost
 * - If you want to temporarily disable a token, consider updating max_uses instead
 *
 * **What Happens to Existing Users:**
 * - Members who joined via this token: Still members (unchanged)
 * - Staff who joined via this token: Still staff with permissions (unchanged)
 * - Their membership/staff status persists even after token deletion
 * - Only NEW attempts to use the link will fail
 *
 * **Frontend Implementation:**
 *
 * 1. **Confirmation Dialog:**
 * ```
 * Title: Delete "{token.name}"?
 *
 * This will permanently disable the link. No one will be able to use it to join.
 *
 * • {token.uses} people already joined using this link
 * • Those members/staff will keep their access
 * • This action cannot be undone
 *
 * [Cancel] [Delete Token]
 * ```
 *
 * 2. **Token Type Warnings:**
 * ```javascript
 * if (token.grants_staff_status) {
 * showExtraWarning(
 * "This is a STAFF token. Make sure all intended staff have already joined."
 * );
 * }
 * ```
 *
 * 3. **Pre-Deletion Actions:**
 * - Show "Copy link" button in confirmation dialog (for archival)
 * - Display current usage stats one last time
 * - Optionally allow user to download list of people who used it
 *
 * 4. **Post-Deletion:**
 * - Remove token from list immediately
 * - Show success toast: "Token deleted. The invitation link is now invalid."
 * - Update organization stats (total tokens count)
 *
 * **Alternative to Deletion:**
 * Instead of deleting, consider setting `max_uses` = current `uses` to disable it
 * while preserving usage statistics for analytics.
 *
 * **Example Scenarios:**
 *
 * 1. **Compromised Staff Token:**
 * Staff token accidentally posted publicly → Delete immediately
 * → Existing staff keep access, no new staff can join
 *
 * 2. **Campaign Cleanup:**
 * Recruitment campaign ended → Delete old tokens
 * → Keeps member list clean and organized
 *
 * 3. **Accidental Creation:**
 * Created token with wrong settings → Delete and recreate
 * → No one used it yet, safe to remove
 *
 * **Error Cases:**
 * - 403: User lacks "manage_members" permission
 * - 404: Token ID not found or doesn't belong to this organization
 */
export const organizationadminDeleteOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminDeleteOrganizationToken58A99A0dData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteOrganizationToken58A99A0dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens/{token_id}',
		...options
	});
};

/**
 * Update Organization Token
 *
 * Update an existing organization token's configuration.
 *
 * Organization tokens are shareable codes/links that allow users to join your organization.
 * Use this endpoint to modify token settings after creation.
 *
 * **Use Cases:**
 * - Extend expiration date for ongoing recruitment campaigns
 * - Increase/decrease maximum uses based on capacity needs
 * - Change token name for better organization
 * - Convert member-only token to grant staff status (for promotions)
 * - Disable token by setting max_uses equal to current uses
 *
 * **Parameters:**
 * - `name`: Optional display name (e.g., "Q2 Recruitment", "Core Team")
 * - `max_uses`: Maximum number of people who can use this (0 = unlimited)
 * - `expires_at`: When the token becomes invalid (null = never expires)
 * - `grants_membership`: Whether users become organization members
 * - `grants_staff_status`: Whether users become staff with permissions
 *
 * **Business Logic:**
 * - The token's usage count (current uses) is NOT reset when updating
 * - If you set max_uses lower than current uses, the token becomes inactive immediately
 * - Staff tokens automatically include membership (grants_membership is implied)
 * - The token ID itself never changes (shareable link remains the same)
 * - Changing grant types only affects future users, not those who already joined
 *
 * **Frontend Implementation:**
 * Display a token edit form with:
 *
 * 1. **Current Status Display:**
 * ```
 * Current uses: 45 / 100
 * Expires: May 15, 2025 (in 12 days)
 * Type: Member Access
 * ```
 *
 * 2. **Edit Form with Validation:**
 * - Name input (optional, max 150 chars)
 * - Max uses input (warn if lowering below current uses)
 * - Expiration date picker
 * - Checkbox: "Grant membership access" (checked by default)
 * - Checkbox: "Grant staff access" (warning icon - requires manage_members)
 *
 * 3. **Warnings & Validation:**
 * ```javascript
 * if (newMaxUses < token.uses) {
 * showWarning("This will disable the token immediately! Current uses exceed new limit.");
 * }
 * if (payload.grants_staff_status) {
 * showWarning("Staff tokens grant sensitive permissions. Share carefully.");
 * }
 * ```
 *
 * 4. **Real-time Effects Display:**
 * - "If you reduce max_uses from 100 to 40, this link will stop working (already 45 uses)"
 * - "Extending expiration will allow the link to work for 30 more days"
 *
 * **Example Scenarios:**
 *
 * 1. **Extend Successful Campaign:**
 * User created a token expiring in 7 days, but it's going viral.
 * → Update expires_at to 30 days from now
 * → Keep max_uses at 0 (unlimited)
 *
 * 2. **Limit Runaway Token:**
 * Token was shared publicly and getting too many signups.
 * → Update max_uses from 0 to current_uses + 10
 * → This stops growth at 10 more people
 *
 * 3. **Promote Members to Staff:**
 * Want to give existing token staff-granting powers.
 * → Update grants_staff_status from false to true
 * → Future users get staff access (past users unchanged)
 *
 * **Security Note:**
 * Be careful when granting staff status - staff members can:
 * - Create events
 * - Manage tickets
 * - Invite other users
 * - View sensitive organization data
 *
 * **Error Cases:**
 * - 403: User lacks "manage_members" permission
 * - 404: Token ID not found or doesn't belong to this organization
 */
export const organizationadminUpdateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateOrganizationToken1Db98412Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationToken1Db98412Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Membership Requests
 *
 * List all membership requests for an organization.
 *
 * By default shows all requests. Use ?status=pending to filter by status.
 */
export const organizationadminListMembershipRequests = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListMembershipRequests88728Fe8Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembershipRequests88728Fe8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests',
		...options
	});
};

/**
 * Approve Membership Request
 *
 * Approve a membership request.
 */
export const organizationadminApproveMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminApproveMembershipRequest110A0B49Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminApproveMembershipRequest110A0B49Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/approve',
		...options
	});
};

/**
 * Reject Membership Request
 *
 * Reject a membership request.
 */
export const organizationadminRejectMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminRejectMembershipRequestB3338732Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRejectMembershipRequestB3338732Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/reject',
		...options
	});
};

/**
 * List Resources
 *
 * List all resources for a specific organization.
 */
export const organizationadminListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListResourcesBc1A1334Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListResourcesBc1A1334Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options
	});
};

/**
 * Create Resource
 *
 * Create a new resource for the organization.
 *
 * Accepts multipart/form-data with individual form fields for each schema property.
 * For FILE type resources, include the file parameter.
 */
export const organizationadminCreateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateResource4Af0Be0bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateResource4Af0Be0bResponses,
		unknown,
		ThrowOnError
	>({
		...urlSearchParamsBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options,
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded',
			...options.headers
		}
	});
};

/**
 * Delete Resource
 *
 * Delete a resource from the organization.
 */
export const organizationadminDeleteResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteResource9D744D88Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteResource9D744D88Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Get Resource
 *
 * Retrieve a specific resource for the organization.
 */
export const organizationadminGetResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetResource58Dffb3eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetResource58Dffb3eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Update Resource
 *
 * Update a resource for the organization.
 */
export const organizationadminUpdateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateResource128112C5Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateResource128112C5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Members
 *
 * List all members of an organization.
 */
export const organizationadminListMembers = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListMembersA55C82A9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembersA55C82A9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members',
		...options
	});
};

/**
 * Remove Member
 *
 * Remove a member from an organization.
 */
export const organizationadminRemoveMember = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveMemberCe474271Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveMemberCe474271Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members/{user_id}',
		...options
	});
};

/**
 * List Staff
 *
 * List all staff of an organization.
 */
export const organizationadminListStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListStaff3C52F6A2Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListStaff3C52F6A2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff',
		...options
	});
};

/**
 * Remove Staff
 *
 * Remove a staff member from an organization.
 */
export const organizationadminRemoveStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveStaffFf71CedfData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveStaffFf71CedfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options
	});
};

/**
 * Add Staff
 *
 * Add a staff member to an organization.
 */
export const organizationadminAddStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddStaff1C50988eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddStaff1C50988eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Staff Permissions
 *
 * Update a staff member's permissions.
 */
export const organizationadminUpdateStaffPermissions = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateStaffPermissionsC3Fdf02fData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateStaffPermissionsC3Fdf02fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}/permissions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Clear akk tags from the organization.
 */
export const organizationadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminClearTags56Eb84DcData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminClearTags56Eb84DcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const organizationadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddTagsC7573A9bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddTagsC7573A9bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const organizationadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveTags1Cc2Fe64Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRemoveTags1Cc2Fe64Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Events
 *
 * Browse and search events visible to the current user.
 *
 * Results are filtered by visibility rules (public/private), event status, and user permissions.
 * By default shows only upcoming events; set include_past=true to see past events.
 * Ordering: 'distance' (default) shows nearest events based on user location, 'start' shows
 * soonest first, '-start' shows latest first. Supports filtering by organization, series,
 * tags, and text search.
 */
export const eventListEvents = <ThrowOnError extends boolean = false>(
	options?: Options<EventListEvents3D775C9fData, ThrowOnError>
) => {
	return (options?.client ?? client).get<EventListEvents3D775C9fResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/',
		...options
	});
};

/**
 * Get Event Token Details
 *
 * Preview an event token to see what access it grants.
 *
 * This endpoint allows users to see token details before deciding whether to claim it.
 * No authentication required - tokens are meant to be shareable.
 *
 * **Primary Use Case: Visibility via Token Header**
 * The main purpose of event tokens is to grant temporary visibility to events.
 * Frontend extracts tokens from shareable URLs like `/events/{event_id}?et={token_id}`
 * and passes them to the API via the `X-Event-Token` header.
 *
 * **Returns:**
 * - `id`: The token code (for use in URLs as `?et=` query param)
 * - `event`: The event this token grants access to
 * - `name`: Display name (e.g., "Instagram Followers Link")
 * - `expires_at`: When the token stops working (null = never expires)
 * - `max_uses`: Maximum number of claims (0 = unlimited)
 * - `uses`: Current number of claims
 * - `grants_invitation`: Whether users can claim invitations with this token
 * - `ticket_tier`: Which ticket tier users get when claiming (null if no invitation)
 * - `invitation_payload`: Custom invitation metadata (null if no invitation)
 *
 * **Frontend Usage:**
 * ```javascript
 * // When user visits /events/123?et=abc123, extract and use the token:
 * const urlParams = new URLSearchParams(window.location.search);
 * const eventToken = urlParams.get('et');
 *
 * // Preview the token first
 * const token = await fetch(`/api/events/tokens/${eventToken}`).then(r => r.json());
 *
 * // Then access the event with token in header
 * const event = await fetch(`/api/events/123`, {
 * headers: { 'X-Event-Token': eventToken }
 * }).then(r => r.json());
 *
 * if (token.grants_invitation) {
 * // This token can be claimed for an invitation
 * showClaimButton(`You can join: ${event.name}`);
 * } else {
 * // This is a read-only token for viewing only
 * showMessage(`View access to: ${event.name}`);
 * }
 * ```
 *
 * **Token Types:**
 * 1. **Read-Only Tokens** (`grants_invitation=False`, `invitation_payload=null`)
 * - Share event link with non-members
 * - Users can VIEW the event but cannot automatically join
 * - Example: Share in group chat so members can see event details
 *
 * 2. **Invitation Tokens** (`grants_invitation=True` with `invitation_payload`)
 * - Users can both VIEW and CLAIM an invitation
 * - Creates EventInvitation when claimed via POST `/events/claim-invitation/{token}`
 * - Optional ticket tier auto-assignment
 *
 * **Error Cases:**
 * - 404: Token doesn't exist or has been deleted
 */
export const eventGetEventTokenDetails = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventTokenDetails390E245aData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventTokenDetails390E245aResponses,
		EventGetEventTokenDetails390E245aErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/tokens/{token_id}',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an event invitation using a token from an invitation link or email.
 *
 * Creates an EventInvitation record for the user, granting access to the event.
 * Invitations can bypass certain eligibility requirements like membership, capacity limits,
 * and RSVP deadlines. Returns the event on success, or 400 if the token is invalid/expired.
 */
export const eventClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventClaimInvitationBb885D60Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventClaimInvitationBb885D60Responses,
		EventClaimInvitationBb885D60Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Event Attendees
 *
 * Get the list of confirmed attendees for this event.
 *
 * Returns users who have RSVPed 'yes' or have active tickets. Visibility is controlled by
 * event settings - attendee lists may be hidden from regular attendees. Organization staff
 * and event creators always have access.
 */
export const eventGetEventAttendees = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventAttendees84D06628Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventAttendees84D06628Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/attendee-list',
		...options
	});
};

/**
 * Get My Event Status
 *
 * Check the authenticated user's current status and eligibility for an event.
 *
 * Returns either the user's RSVP/ticket status if they've already joined, or an eligibility
 * check result explaining what steps are needed to attend. The eligibility check validates:
 * event status, RSVP deadline, invitations, organization membership, required questionnaires,
 * capacity limits, and ticket availability. Use this to determine which action to show users
 * (RSVP button, buy ticket, fill questionnaire, etc.).
 */
export const eventGetMyEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventGetMyEventStatus0Bf15F87Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetMyEventStatus0Bf15F87Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/my-status',
		...options
	});
};

/**
 * Create Invitation Request
 *
 * Submit a request to be invited to a private or invite-only event.
 *
 * Creates an invitation request that event organizers can approve or reject. Include an
 * optional message explaining why you want to attend. Returns 400 if you've already
 * submitted a request for this event. Check GET /{event_id}/my-status to see if you
 * need an invitation.
 */
export const eventCreateInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventCreateInvitationRequestD453835eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventCreateInvitationRequestD453835eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/invitation-requests',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Resources
 *
 * Get supplementary resources attached to this event.
 *
 * Returns resources like documents, links, or media files provided by event organizers.
 * Resources may be public or restricted to attendees only. Supports filtering by type
 * (file, link, etc.) and text search.
 */
export const eventListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventListResourcesA5B7F979Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListResourcesA5B7F979Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/events/{event_id}/resources',
			...options
		}
	);
};

/**
 * Delete Invitation Request
 *
 * Cancel a pending invitation request.
 *
 * Withdraws your invitation request for an event. Only works for your own requests
 * that haven't been decided yet. Returns 404 if the request doesn't exist or doesn't
 * belong to you.
 */
export const eventDeleteInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventDeleteInvitationRequestA4F9B116Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventDeleteInvitationRequestA4F9B116Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/invitation-requests/{request_id}',
		...options
	});
};

/**
 * Get Event By Slugs
 *
 * Retrieve event details using human-readable organization and event slugs.
 *
 * Use this for clean URLs like /events/tech-meetup/monthly-session. Returns 404 if
 * the event doesn't exist or you don't have permission to view it.
 */
export const eventGetEventBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventBySlugsEccf9Ec7Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventBySlugsEccf9Ec7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{org_slug}/{event_slug}',
		...options
	});
};

/**
 * Get Event
 *
 * Retrieve full event details by ID.
 *
 * Returns comprehensive event information including description, location, times, organization,
 * ticket tiers, and visibility settings. Use this to display the event detail page.
 */
export const eventGetEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEvent8494160fData, ThrowOnError>
) => {
	return (options.client ?? client).get<EventGetEvent8494160fResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}',
		...options
	});
};

/**
 * Rsvp Event
 *
 * RSVP to a non-ticketed event (answer: 'yes', 'no', or 'maybe').
 *
 * Only works for events where requires_ticket=false. Runs full eligibility check including
 * event status, RSVP deadline, invitations, membership requirements, required questionnaires,
 * and capacity limits. Returns RSVP record on success. On failure, returns eligibility details
 * explaining what's blocking you and what next_step to take (e.g., complete questionnaire,
 * request invitation).
 */
export const eventRsvpEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventRsvpEventBed47A36Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRsvpEventBed47A36Responses,
		EventRsvpEventBed47A36Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/rsvp/{answer}',
		...options
	});
};

/**
 * List Tiers
 *
 * Get all ticket tiers available for purchase at this event.
 *
 * Returns ticket types with pricing, availability, and sales windows. Filters tiers based
 * on user eligibility - you'll only see tiers you're allowed to purchase. Check visibility
 * settings and sales_start_at/sales_end_at to determine which are currently on sale.
 */
export const eventListTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventListTiersF61009CfData, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListTiersF61009CfResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/tiers',
		...options
	});
};

/**
 * Ticket Checkout
 *
 * Purchase a fixed-price event ticket.
 *
 * Runs eligibility checks before allowing purchase. For online payment: returns Stripe
 * checkout URL to redirect user for payment. For free/offline/at-the-door tickets: creates
 * ticket immediately and returns it. Cannot be used for pay-what-you-can (PWYC) tiers -
 * use POST /{event_id}/tickets/{tier_id}/checkout/pwyc instead. On eligibility failure,
 * returns 400 with eligibility details explaining what's blocking you and what next_step
 * to take (e.g., complete questionnaire, request invitation, wait for tickets to go on sale).
 */
export const eventTicketCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketCheckoutA3A0818bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketCheckoutA3A0818bResponses,
		EventTicketCheckoutA3A0818bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout',
		...options
	});
};

/**
 * Ticket Pwyc Checkout
 *
 * Purchase a pay-what-you-can (PWYC) ticket with a user-specified amount.
 *
 * Only works for ticket tiers with price_type=PWYC. Validates the amount is within the
 * tier's min/max bounds. Returns Stripe checkout URL for online payment, or creates ticket
 * immediately for free/offline payment methods. Returns 400 for non-PWYC tiers, if amount
 * is out of bounds, or on eligibility failure (with eligibility details explaining what's
 * blocking you and what next_step to take).
 */
export const eventTicketPwycCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketPwycCheckoutFb14F59bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketPwycCheckoutFb14F59bResponses,
		EventTicketPwycCheckoutFb14F59bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout/pwyc',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Questionnaire
 *
 * Retrieve a questionnaire required for event admission.
 *
 * Returns the questionnaire structure with all sections and questions. Questions may be
 * shuffled based on questionnaire settings. Use this to display the form that users must
 * complete before accessing the event.
 */
export const eventGetQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventGetQuestionnaireC269B7B6Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetQuestionnaireC269B7B6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}',
		...options
	});
};

/**
 * Submit Questionnaire
 *
 * Submit answers to an event admission questionnaire.
 *
 * Validates all required questions are answered. If submission status is 'ready', triggers
 * automatic evaluation (may use LLM for free-text answers). Depending on the questionnaire's
 * evaluation_mode (automatic/manual/hybrid), results may be immediate or pending staff review.
 * Passing the questionnaire may be required before you can RSVP or purchase tickets.
 */
export const eventSubmitQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventSubmitQuestionnaireFf674C6eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventSubmitQuestionnaireFf674C6eResponses,
		EventSubmitQuestionnaireFf674C6eErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}/submit',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Event Token
 *
 * Permanently delete an event token and invalidate all links using it.
 *
 * **Use Cases:**
 * - Revoke access when a shareable link is compromised or leaked publicly
 * - Clean up expired or unused tokens
 * - Remove tokens after an event closes or capacity is reached
 * - Invalidate outdated promotional links
 *
 * **Important Warnings:**
 * - This action is IRREVERSIBLE - the token and its link become permanently invalid
 * - Users with the link will no longer be able to claim invitations
 * - However, users who ALREADY claimed invitations keep their access (their EventInvitations persist)
 * - The token's usage statistics are lost
 *
 * **Frontend Implementation:**
 * 1. Show a confirmation dialog: "Delete this token? The link will stop working immediately."
 * 2. Clarify that existing invitations from this token remain valid
 * 3. Remove the token from the list immediately after successful deletion
 * 4. Consider showing a "copy shareable link" button before deletion for archival
 */
export const eventadminDeleteEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteEventToken252642A2Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteEventToken252642A2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens/{token_id}',
		...options
	});
};

/**
 * Update Event Token
 *
 * Update an existing event token's configuration.
 *
 * Event tokens are shareable codes/links that allow users to claim invitations to your event.
 * Use this endpoint to modify token settings after creation.
 *
 * **Use Cases:**
 * - Change the expiration date to extend or shorten token validity
 * - Update the maximum number of uses (e.g., limit invites to 50 people)
 * - Change which ticket tier users get when claiming (e.g., switch from VIP to General)
 * - Update the token name for better organization
 * - Modify custom invitation metadata (welcome message, special instructions, etc.)
 *
 * **Parameters:**
 * - `name`: Optional display name to help you identify this token (e.g., "Alumni Link", "Early Bird")
 * - `max_uses`: Maximum number of times this token can be claimed (0 = unlimited)
 * - `expires_at`: When the token becomes invalid (users can't claim after this time)
 * - `ticket_tier_id`: Which ticket tier to assign when users claim (required for ticketed events)
 * - `invitation`: Custom invitation metadata like welcome messages, special flags, etc.
 *
 * **Business Logic:**
 * - The token's usage count (how many times it's been claimed) is NOT reset when updating
 * - If you set max_uses lower than current uses, the token becomes inactive
 * - Changing the tier only affects future claims, not existing invitations
 * - The token ID itself never changes
 *
 * **Frontend Implementation:**
 * Display a token management UI where organizers can:
 * 1. View token stats (uses, expiration, link)
 * 2. Edit token settings with a form
 * 3. Show validation errors if tier_id doesn't match event
 * 4. Warn when reducing max_uses below current usage
 */
export const eventadminUpdateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventToken8617D4C3Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventToken8617D4C3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Event Tokens
 *
 * Retrieve all invitation tokens for this event with usage statistics.
 *
 * Event tokens serve two purposes:
 * 1. **Visibility** - Grant temporary access to view private events via `?et=` URL parameter
 * 2. **Invitations** - Allow users to claim invitations with optional ticket tier assignment
 *
 * Each token can have usage limits, expiration dates, and associated ticket tiers.
 *
 * **Returns:**
 * Paginated list of tokens with:
 * - `id`: The unique token code (used in shareable links and as `?et=` param)
 * - `name`: Display name for organization
 * - `issuer`: The user who created this token
 * - `expires_at`: When the token stops working (null = never expires)
 * - `uses`: How many times it's been claimed so far
 * - `max_uses`: Maximum allowed claims (0 = unlimited)
 * - `ticket_tier`: Which ticket tier users get when claiming
 * - `invitation_payload`: Custom metadata (welcome message, flags, etc.)
 * - `created_at`: When the token was created
 *
 * **Filtering & Search:**
 * - Search by token name, event name/description, or custom message
 * - Filter by expiration status, tier, or usage count (via params)
 * - Results are paginated (20 per page by default)
 *
 * **Frontend Implementation:**
 * Build a token management dashboard showing:
 * 1. **Token List Table:**
 * - Token name (with copy-link button)
 * - Usage: "23 / 50 uses" or "15 uses (unlimited)"
 * - Status badge: "Active" (green), "Expired" (red), "Limit Reached" (yellow)
 * - Tier name if specified
 * - Expiration date
 * - Actions: Edit, Delete, Copy Link
 *
 * 2. **Shareable Link Format:**
 * - For visibility: `https://yourapp.com/events/{event_id}?et={token_id}`
 * (Frontend extracts `?et=` and sends as `X-Event-Token` header to API)
 * - For claiming: `https://yourapp.com/invite/event/{token_id}` → POST `/events/claim-invitation/{token_id}`
 *
 * 3. **Status Indicators:**
 * ```javascript
 * function getTokenStatus(token) {
 * if (token.expires_at && new Date(token.expires_at) < new Date()) return "Expired";
 * if (token.max_uses > 0 && token.uses >= token.max_uses) return "Limit Reached";
 * return "Active";
 * }
 * ```
 *
 * 4. **Analytics Display:**
 * - Show usage percentage as progress bar
 * - Display "# claimed today" if tracking recent activity
 * - Show which tier most users are getting
 *
 * **Use Cases:**
 * - Display all invitation links in the event admin panel
 * - Monitor token usage for capacity planning
 * - Identify which promotional channels are most effective
 * - Audit who created which tokens and when
 */
export const eventadminListEventTokens = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventTokens5B374771Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventTokens5B374771Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options
	});
};

/**
 * Create Event Token
 *
 * Create a new shareable token for this event.
 *
 * Event tokens serve dual purposes:
 * 1. **Primary: Visibility** - Share links like `/events/{id}?et={token}` to let non-members view private events
 * 2. **Secondary: Invitations** - Optionally allow users to claim event invitations with ticket tier assignment
 *
 * This enables sharing event details in group chats, social media, or with non-members without
 * requiring them to join first.
 *
 * **Use Cases:**
 * - **Social Media Promotions:** Share on Twitter/Instagram to let followers RSVP
 * - **Email Campaigns:** Include in newsletters for easy one-click registration
 * - **Partner Organizations:** Give to affiliated groups for member distribution
 * - **Tiered Access:** Create different tokens for VIP, General, Student tiers
 * - **Time-Limited Offers:** Early bird tokens that expire before price increase
 * - **Capacity Management:** Tokens with usage limits (e.g., "50 from marketing list")
 * - **Referral Tracking:** Create per-channel tokens to measure effectiveness
 *
 * **Parameters:**
 * - `name`: Display name for organization (e.g., "Instagram Followers", "Alumni Network")
 * - `duration`: Minutes until expiration (default: 24*60 = 1 day)
 * - `max_uses`: Maximum claims allowed (default: 1, use 0 for unlimited)
 * - `ticket_tier_id`: Ticket tier to auto-assign (required for ticketed events, optional otherwise)
 * - `invitation`: Optional custom metadata:
 * - `custom_message`: Personalized welcome text
 * - Additional fields that your EventInvitation model supports
 *
 * **Returns:**
 * The created token with a unique `id` that serves as the shareable code.
 *
 * **Business Logic:**
 * - Token issuer is automatically set to the current authenticated user
 * - Expiration is calculated from current time + duration
 * - If ticket_tier_id provided, validates it belongs to this event
 * - For ticketed events, ticket_tier_id is REQUIRED
 * - Token ID is a secure random 8-character alphanumeric code
 * - Created tokens start with 0 uses
 *
 * **Frontend Implementation:**
 * After creation, immediately show the shareable link:
 *
 * ```javascript
 * // On successful creation:
 * const shareableUrl = `https://yourapp.com/invite/event/${response.id}`;
 *
 * // Show UI with:
 * - Shareable link with copy button
 * - QR code for in-person distribution
 * - Social media share buttons
 * - Usage tracking: "0 / {max_uses} used"
 * - Expiration countdown: "Expires in 23 hours"
 * ```
 *
 * **Example Workflow:**
 * 1. Organizer creates token with name="Instagram Post", max_uses=100, duration=7*24*60
 * 2. Frontend displays: `https://yourapp.com/invite/event/aBc12XyZ`
 * 3. Organizer shares link on Instagram
 * 4. Users visit link → Frontend calls POST `/events/claim-invitation` → Users get EventInvitation
 * 5. After 100 claims or 7 days, token becomes inactive
 *
 * **Error Cases:**
 * - 400: ticket_tier_id missing for ticketed event, or tier doesn't belong to this event
 * - 403: User lacks "invite_to_event" permission
 * - 404: event_id not found or user lacks access
 */
export const eventadminCreateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateEventToken57De582dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateEventToken57De582dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Invitation Requests
 *
 * List all invitation requests for an event.
 *
 * By default shows all requests. Use ?status=pending to filter by status.
 */
export const eventadminListInvitationRequests = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListInvitationRequestsC8F27BfaData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListInvitationRequestsC8F27BfaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-requests',
		...options
	});
};

/**
 * Approve Invitation Request
 *
 * Approve an invitation request.
 */
export const eventadminApproveInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventadminApproveInvitationRequestF8B94Ad8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminApproveInvitationRequestF8B94Ad8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-requests/{request_id}/approve',
		...options
	});
};

/**
 * Reject Invitation Request
 *
 * Reject an invitation request.
 */
export const eventadminRejectInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventadminRejectInvitationRequest4E2B5Cd1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminRejectInvitationRequest4E2B5Cd1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-requests/{request_id}/reject',
		...options
	});
};

/**
 * Update Event
 *
 * Update event by ID.
 */
export const eventadminUpdateEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventF788A5DaData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventF788A5DaResponses,
		EventadminUpdateEventF788A5DaErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Event Status
 *
 * Update event status to the specified value.
 */
export const eventadminUpdateEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventStatus0D75A909Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUpdateEventStatus0D75A909Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/actions/update-status/{status}',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to event.
 */
export const eventadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadLogo92F3024eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadLogo92F3024eResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to event.
 */
export const eventadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadCoverArtC9E9E1E1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadCoverArtC9E9E1E1Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event.
 */
export const eventadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteLogo536765D1Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteLogo536765D1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event.
 */
export const eventadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteCoverArtE898B386Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteCoverArtE898B386Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminClearTagsF2D4D570Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminClearTagsF2D4D570Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const eventadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminAddTagsA8700D97Data, ThrowOnError>
) => {
	return (options.client ?? client).post<EventadminAddTagsA8700D97Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/event-admin/{event_id}/tags',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options.headers
			}
		}
	);
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminRemoveTagsA67038CaData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminRemoveTagsA67038CaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Ticket Tiers
 *
 * List all ticket tiers for an event.
 */
export const eventadminListTicketTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketTiersC747E0D9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketTiersC747E0D9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tiers',
		...options
	});
};

/**
 * Create Ticket Tier
 *
 * Create a new ticket tier for an event.
 */
export const eventadminCreateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateTicketTierCd4C7981Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateTicketTierCd4C7981Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ticket Tier
 *
 * Delete a ticket tier.
 *
 * Note this might raise a 400 if ticket with this tier where already bought.
 */
export const eventadminDeleteTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteTicketTierD00Ef5FaData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteTicketTierD00Ef5FaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options
	});
};

/**
 * Update Ticket Tier
 *
 * Update a ticket tier.
 */
export const eventadminUpdateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateTicketTier2Ec98A6fData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateTicketTier2Ec98A6fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Tickets
 *
 * List tickets for an event with optional filters.
 *
 * Supports filtering by:
 * - status: Filter by ticket status (PENDING, ACTIVE, CANCELLED, CHECKED_IN)
 * - tier__payment_method: Filter by payment method (ONLINE, OFFLINE, AT_THE_DOOR, FREE)
 */
export const eventadminListTickets = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketsE4298D62Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketsE4298D62Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets',
		...options
	});
};

/**
 * Get Ticket
 *
 * Get a ticket by its ID.
 */
export const eventadminGetTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminGetTicketB5B51CaaData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminGetTicketB5B51CaaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}',
		...options
	});
};

/**
 * Confirm Ticket Payment
 *
 * Confirm payment for a pending offline ticket and activate it.
 */
export const eventadminConfirmTicketPayment = <ThrowOnError extends boolean = false>(
	options: Options<EventadminConfirmTicketPaymentC7A2E802Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminConfirmTicketPaymentC7A2E802Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/confirm-payment',
		...options
	});
};

/**
 * Mark Ticket Refunded
 *
 * Mark a manual payment ticket as refunded and cancel it.
 *
 * This endpoint is for offline/at-the-door tickets only.
 * Online tickets (Stripe) are automatically managed via webhooks.
 */
export const eventadminMarkTicketRefunded = <ThrowOnError extends boolean = false>(
	options: Options<EventadminMarkTicketRefunded59F15C10Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminMarkTicketRefunded59F15C10Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/mark-refunded',
		...options
	});
};

/**
 * Cancel Ticket
 *
 * Cancel a manual payment ticket.
 *
 * This endpoint is for offline/at-the-door tickets only.
 * Online tickets (Stripe) should be refunded via Stripe Dashboard.
 */
export const eventadminCancelTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCancelTicketCe874F75Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCancelTicketCe874F75Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/cancel',
		...options
	});
};

/**
 * Check In Ticket
 *
 * Check in an attendee by scanning their ticket.
 */
export const eventadminCheckInTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCheckInTicket04A3521eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCheckInTicket04A3521eResponses,
		EventadminCheckInTicket04A3521eErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/check-in',
		...options
	});
};

/**
 * List Invitations
 *
 * List all invitations for registered users.
 */
export const eventadminListInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListInvitations574F56C1Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListInvitations574F56C1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options
	});
};

/**
 * Create Invitations
 *
 * Create direct invitations for users by email addresses.
 */
export const eventadminCreateInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateInvitationsE4873B37Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateInvitationsE4873B37Responses,
		EventadminCreateInvitationsE4873B37Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Invitations
 *
 * List all pending invitations for unregistered users.
 */
export const eventadminListPendingInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingInvitations3C2259E9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingInvitations3C2259E9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-invitations',
		...options
	});
};

/**
 * Delete Invitation Endpoint
 *
 * Delete an invitation (registered or pending).
 */
export const eventadminDeleteInvitationEndpoint = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteInvitationEndpoint32E91926Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteInvitationEndpoint32E91926Responses,
		EventadminDeleteInvitationEndpoint32E91926Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations/{invitation_type}/{invitation_id}',
		...options
	});
};

/**
 * List Rsvps
 *
 * List all RSVPs for an event.
 *
 * Shows all users who have RSVPed to the event with their status.
 * Use this to see who is attending, not attending, or maybe attending.
 * Supports filtering by status and user_id.
 */
export const eventadminListRsvps = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListRsvpsD45452A3Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListRsvpsD45452A3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps',
		...options
	});
};

/**
 * Create Rsvp
 *
 * Create an RSVP on behalf of a user.
 *
 * Use this when a user contacts the organization to RSVP outside the platform
 * (e.g., via text, email, or in person).
 */
export const eventadminCreateRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateRsvpB210405aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateRsvpB210405aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Rsvp
 *
 * Delete an RSVP.
 *
 * Use this to remove a user's RSVP entirely from the event.
 * Note: This is different from setting status to "no" - it completely removes the RSVP record.
 */
export const eventadminDeleteRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteRsvp66F0247cData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteRsvp66F0247cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps/{rsvp_id}',
		...options
	});
};

/**
 * Get Rsvp
 *
 * Get details of a specific RSVP.
 */
export const eventadminGetRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminGetRsvpF44Ab408Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventadminGetRsvpF44Ab408Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps/{rsvp_id}',
		...options
	});
};

/**
 * Update Rsvp
 *
 * Update an existing RSVP.
 *
 * Use this to change a user's RSVP status when they contact you to update their response.
 */
export const eventadminUpdateRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateRsvp85B0321fData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateRsvp85B0321fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps/{rsvp_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * My Permissions
 *
 * Get a user's permission map, per organization.
 */
export const permissionMyPermissions = <ThrowOnError extends boolean = false>(
	options?: Options<PermissionMyPermissions4F143B34Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		PermissionMyPermissions4F143B34Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/permissions/my-permissions',
		...options
	});
};

/**
 * List Event Series
 *
 * Browse event series (recurring event collections) visible to the current user.
 *
 * Event series group related recurring events (e.g., "Monthly Tech Meetup"). Results are
 * filtered by visibility and permissions. Supports filtering by organization and text search.
 */
export const eventseriesListEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<EventseriesListEventSeries360C43BaData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventseriesListEventSeries360C43BaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/',
		...options
	});
};

/**
 * Get Event Series By Slugs
 *
 * Retrieve event series details using human-readable organization and series slugs.
 *
 * Use this for clean URLs like /event-series/tech-meetup/monthly-sessions. Returns 404
 * if the series doesn't exist or you don't have permission to view it.
 */
export const eventseriesGetEventSeriesBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesBySlugs74B9F036Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesBySlugs74B9F036Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{org_slug}/{series_slug}',
		...options
	});
};

/**
 * Get Event Series
 *
 * Retrieve full event series details by ID.
 *
 * Returns series information including description, organization, and settings. Use this
 * to display the series profile page and list related events.
 */
export const eventseriesGetEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesFe999077Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesFe999077Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this event series.
 *
 * Returns documents, links, or media files that apply to all events in the series.
 * Resources may be public or restricted based on visibility settings. Supports filtering
 * by type and text search.
 */
export const eventseriesListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesListResourcesEfa19705Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesListResourcesEfa19705Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}/resources',
		...options
	});
};

/**
 * Delete Event Series
 *
 * Permanently delete an event series (admin only).
 *
 * Removes the series. Events in the series are not deleted but become standalone.
 * Requires 'delete_event_series' permission (typically organization owners only).
 */
export const eventseriesadminDeleteEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteEventSeriesE4121FdaData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteEventSeriesE4121FdaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options
	});
};

/**
 * Update Event Series
 *
 * Update event series details (admin only).
 *
 * Modify series name, description, or settings. Requires 'edit_event_series' permission
 * (organization staff/owners). Changes apply to the series but not individual events.
 */
export const eventseriesadminUpdateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUpdateEventSeriesE96E47A4Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventseriesadminUpdateEventSeriesE96E47A4Responses,
		EventseriesadminUpdateEventSeriesE96E47A4Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Upload Logo
 *
 * Upload a logo image for the event series (admin only).
 *
 * Replaces the existing logo. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadLogo15D67412Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadLogo15D67412Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art/banner image for the event series (admin only).
 *
 * Replaces the existing cover art. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadCoverArt2A75B17fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadCoverArt2A75B17fResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event series (admin only).
 *
 * Removes the logo image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteLogo636B29D7Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteLogo636B29D7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event series (admin only).
 *
 * Removes the cover art image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteCoverArt4600Bb1bData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteCoverArt4600Bb1bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove all tags from the event series (admin only).
 *
 * Clears all categorization tags. Requires 'edit_event_series' permission.
 */
export const eventseriesadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminClearTagsF7C25Db6Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminClearTagsF7C25Db6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add tags to categorize the event series (admin only).
 *
 * Tags help users discover series through filtering and search. Returns the updated tag list.
 * Requires 'edit_event_series' permission.
 */
export const eventseriesadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminAddTags51DcbbedData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminAddTags51DcbbedResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove specific tags from the event series (admin only).
 *
 * Removes only the specified tags, keeping others. Returns the updated tag list. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminRemoveTagsF5870F2dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminRemoveTagsF5870F2dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Potluck Items
 *
 * View all potluck items for this event.
 *
 * Returns items users can bring, with flags indicating if each item is assigned and if you
 * own it. Available when event.potluck_open=true. Use this to display what's needed and
 * what you've claimed.
 */
export const potluckListPotluckItems = <ThrowOnError extends boolean = false>(
	options: Options<PotluckListPotluckItemsAae21A49Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		PotluckListPotluckItemsAae21A49Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options
	});
};

/**
 * Create Potluck Item
 *
 * Add a new item to the event's potluck list.
 *
 * Specify item name, quantity, and optional notes. Attendees can claim items via
 * POST /{event_id}/potluck/{item_id}/claim. Requires permission to create potluck items.
 */
export const potluckCreatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckCreatePotluckItem48B8C4D9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckCreatePotluckItem48B8C4D9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Potluck Item
 *
 * Remove a potluck item from the event.
 *
 * Deletes the item even if it's been claimed. Requires permission to manage potluck items.
 */
export const potluckDeletePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckDeletePotluckItem86981B8dData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		PotluckDeletePotluckItem86981B8dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options
	});
};

/**
 * Update Potluck Item
 *
 * Update a potluck item's details.
 *
 * Modify item name, quantity, or notes. Requires permission to manage potluck items
 * (typically event organizers).
 */
export const potluckUpdatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUpdatePotluckItemAac1B400Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		PotluckUpdatePotluckItemAac1B400Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Claim Potluck Item
 *
 * Claim a potluck item to bring to the event.
 *
 * Assigns the item to you. Returns 400 if already claimed by someone else. Use this when
 * you want to commit to bringing a specific item.
 */
export const potluckClaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckClaimPotluckItem14527Ac3Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckClaimPotluckItem14527Ac3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/claim',
		...options
	});
};

/**
 * Unclaim Potluck Item
 *
 * Release a potluck item you previously claimed.
 *
 * Makes the item available for others to claim. Returns 404 if the item isn't claimed
 * by you.
 */
export const potluckUnclaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUnclaimPotluckItem5Bcf943cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckUnclaimPotluckItem5Bcf943cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/unclaim',
		...options
	});
};

/**
 * List Org Questionnaires
 *
 * Browse questionnaires you have permission to view or manage.
 *
 * Returns questionnaires from organizations where you have staff/owner access. Use this to
 * find questionnaires to attach to events or review submissions. Supports filtering by
 * event_id or event_series_id to find questionnaires assigned to specific events or series.
 *
 * Each questionnaire includes a count of pending evaluations (submissions with no evaluation
 * or evaluations with "pending review" status).
 */
export const questionnaireListOrgQuestionnaires = <ThrowOnError extends boolean = false>(
	options?: Options<QuestionnaireListOrgQuestionnairesBec0Bb17Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		QuestionnaireListOrgQuestionnairesBec0Bb17Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/',
		...options
	});
};

/**
 * Create Org Questionnaire
 *
 * Create a new questionnaire for an organization (admin only).
 *
 * Creates a questionnaire with specified type (admission, membership, feedback, or generic)
 * and optional max_submission_age. After creation, add sections and questions via
 * POST /questionnaires/{id}/sections and /multiple-choice-questions endpoints. Requires
 * 'create_questionnaire' permission (organization staff/owners).
 */
export const questionnaireCreateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateOrgQuestionnaire8E25E4FaData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateOrgQuestionnaire8E25E4FaResponses,
		QuestionnaireCreateOrgQuestionnaire8E25E4FaErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{organization_id}/create-questionnaire',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Org Questionnaire
 *
 * Delete an organization questionnaire (admin only).
 *
 * Permanently removes the questionnaire. Requires 'delete_questionnaire' permission.
 */
export const questionnaireDeleteOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteOrgQuestionnaireF9D0E2B8Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteOrgQuestionnaireF9D0E2B8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Get Org Questionnaire
 *
 * Retrieve a questionnaire's details and structure (admin only).
 *
 * Returns the questionnaire with all sections, questions, and settings. Use this to view or
 * edit an existing questionnaire. Requires permission to manage the organization's questionnaires.
 */
export const questionnaireGetOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetOrgQuestionnaire9412880fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetOrgQuestionnaire9412880fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Update Org Questionnaire
 *
 * Update organization questionnaire and underlying questionnaire settings (admin only).
 *
 * Allows updating both OrganizationQuestionnaire wrapper fields (max_submission_age,
 * questionnaire_type) and the underlying Questionnaire fields (name, min_score, llm_guidelines,
 * shuffle_questions, shuffle_sections, evaluation_mode, can_retake_after, max_attempts).
 * Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateOrgQuestionnaire874Aede8Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateOrgQuestionnaire874Aede8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Section
 *
 * Add a section to organize questions in the questionnaire (admin only).
 *
 * Sections group related questions. Specify section name and display order. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateSectionD0885Cf4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateSectionD0885Cf4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Section
 *
 * Delete a questionnaire section (admin only).
 *
 * Removes the section and all questions within it. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteSection4947C09dData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteSection4947C09dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options
	});
};

/**
 * Update Section
 *
 * Update a questionnaire section's details (admin only).
 *
 * Modify section name or display order. Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateSection0A7B3FaaData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateSection0A7B3FaaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Question
 *
 * Add a multiple-choice question to the questionnaire (admin only).
 *
 * Create a question with predefined answer options. After creation, add options via
 * POST /questionnaires/{id}/multiple-choice-questions/{question_id}/options. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcQuestionF602F098Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcQuestionF602F098Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Question
 *
 * Delete a multiple choice question (admin only).
 *
 * Removes the question and all its options. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcQuestion59670769Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcQuestion59670769Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options
	});
};

/**
 * Update Mc Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcQuestion27Af4B1aData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcQuestion27Af4B1aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireCreateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcOption09F1F36fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcOption09F1F36fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}/options',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Option
 *
 * Delete a multiple choice option (admin only).
 *
 * Removes the option from a question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcOption8Cac0Cf2Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcOption8Cac0Cf2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options
	});
};

/**
 * Update Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcOption6Ffba14bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcOption6Ffba14bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Ft Question
 *
 * Add a free-text question to the questionnaire (admin only).
 *
 * Create an open-ended question for text responses. Can be auto-evaluated by LLM based on
 * scoring criteria. Requires 'edit_questionnaire' permission.
 */
export const questionnaireCreateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateFtQuestion03B51084Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateFtQuestion03B51084Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ft Question
 *
 * Delete a free text question (admin only).
 *
 * Removes the question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteFtQuestion28Fb3533Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteFtQuestion28Fb3533Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options
	});
};

/**
 * Update Ft Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateFtQuestionDd5C4Ea7Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateFtQuestionDd5C4Ea7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Submissions
 *
 * View user submissions for this questionnaire (admin only).
 *
 * Returns submitted questionnaires ready for review. Use this to see who has applied for
 * event access and their responses. Requires 'evaluate_questionnaire' permission.
 *
 * Filtering:
 * - evaluation_status: Filter by evaluation status (approved/rejected/pending review/no_evaluation)
 *
 * Ordering:
 * - submitted_at: Oldest submissions first
 * - -submitted_at: Newest submissions first (default)
 */
export const questionnaireListSubmissions = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireListSubmissionsD1E7Bf1fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireListSubmissionsD1E7Bf1fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions',
		...options
	});
};

/**
 * Get Submission Detail
 *
 * View detailed answers for a specific submission (admin only).
 *
 * Returns all questions and the user's answers, plus automatic evaluation results if available.
 * Use this to review a submission before manual approval/rejection. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireGetSubmissionDetail = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetSubmissionDetail84Eca3E0Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetSubmissionDetail84Eca3E0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}',
		...options
	});
};

/**
 * Evaluate Submission
 *
 * Manually approve or reject a questionnaire submission (admin only).
 *
 * Overrides automatic evaluation or provides decision for manual-review questionnaires.
 * Approved users can then RSVP or purchase tickets for the event. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireEvaluateSubmission = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireEvaluateSubmission8A937596Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireEvaluateSubmission8A937596Responses,
		QuestionnaireEvaluateSubmission8A937596Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}/evaluate',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Questionnaire Status
 *
 * Update the status of a questionnaire (admin only).
 *
 * Changes the questionnaire status between DRAFT, READY, and PUBLISHED.
 * - DRAFT: Questionnaire is being created/edited
 * - READY: Questionnaire is complete but not yet published
 * - PUBLISHED: Questionnaire is live and can be taken by users
 *
 * Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateQuestionnaireStatus = <
	ThrowOnError extends boolean = false
>(
	options: Options<QuestionnaireUpdateQuestionnaireStatusE10312EfData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireUpdateQuestionnaireStatusE10312EfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/status/{status}',
		...options
	});
};

/**
 * Replace Events
 *
 * Replace all assigned events for this questionnaire (admin only).
 *
 * Batch operation to set exactly which events require this questionnaire. Validates that
 * events belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEvents = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEventsD94Bbf53Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEventsD94Bbf53Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event
 *
 * Unassign a single event from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEvent6Fe80482Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEvent6Fe80482Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Assign Event
 *
 * Assign a single event to this questionnaire (admin only).
 *
 * Adds one event that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEventAc744640Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEventAc744640Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Replace Event Series
 *
 * Replace all assigned event series for this questionnaire (admin only).
 *
 * Batch operation to set exactly which event series require this questionnaire. Validates that
 * series belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEventSeriesEf1415E1Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEventSeriesEf1415E1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event Series
 *
 * Unassign a single event series from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event series. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEventSeriesC6F8E438Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEventSeriesC6F8E438Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Assign Event Series
 *
 * Assign a single event series to this questionnaire (admin only).
 *
 * Adds one event series that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEventSeries77D7F148Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEventSeries77D7F148Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Get General Preferences
 *
 * Get your global preferences that apply across all organizations and events.
 *
 * Returns default notification and privacy settings. These serve as defaults that can be
 * overridden at organization, series, or event level.
 */
export const userpreferencesGetGeneralPreferences = <ThrowOnError extends boolean = false>(
	options?: Options<UserpreferencesGetGeneralPreferencesDd20038dData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		UserpreferencesGetGeneralPreferencesDd20038dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options
	});
};

/**
 * Update Global Preferences
 *
 * Update your global preference defaults.
 *
 * Modify notification and privacy settings. Set overwrite_children=true to cascade changes
 * to all organization/series/event-level preferences, overriding custom settings.
 */
export const userpreferencesUpdateGlobalPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateGlobalPreferences882D0D3fData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateGlobalPreferences882D0D3fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Organization Preferences
 *
 * Get your preferences for a specific organization.
 *
 * Returns organization-level overrides for notifications and privacy. Falls back to global
 * preferences if not customized.
 */
export const userpreferencesGetOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetOrganizationPreferences9A545225Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetOrganizationPreferences9A545225Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options
	});
};

/**
 * Update Organization Preferences
 *
 * Update preferences for a specific organization.
 *
 * Overrides global defaults for this organization. Set overwrite_children=true to cascade
 * changes to all series/event-level preferences within this organization.
 */
export const userpreferencesUpdateOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateOrganizationPreferences338Db882Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateOrganizationPreferences338Db882Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Series Preferences
 *
 * Get your preferences for a specific event series.
 *
 * Returns series-level overrides for notifications. Falls back to organization or global
 * preferences if not customized.
 */
export const userpreferencesGetEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetEventSeriesPreferences1C61AeacData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventSeriesPreferences1C61AeacResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options
	});
};

/**
 * Update Event Series Preferences
 *
 * Update preferences for a specific event series.
 *
 * Overrides organization/global defaults for this series. Set overwrite_children=true to
 * cascade changes to all individual event preferences within this series.
 */
export const userpreferencesUpdateEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateEventSeriesPreferences401Fa475Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventSeriesPreferences401Fa475Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Preferences
 *
 * Get your preferences for a specific event.
 *
 * Returns event-level overrides for notifications. Falls back to series, organization, or
 * global preferences if not customized.
 */
export const userpreferencesGetEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesGetEventPreferencesDdb0Bab4Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventPreferencesDdb0Bab4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options
	});
};

/**
 * Update Event Preferences
 *
 * Update preferences for a specific event.
 *
 * Overrides series/organization/global defaults for this event. The most specific preference
 * level always takes precedence.
 */
export const userpreferencesUpdateEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesUpdateEventPreferences2E1B5D41Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventPreferences2E1B5D41Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Handle Webhook
 *
 * Process Stripe webhook events for payment processing.
 *
 * Handles payment confirmations, failures, and refunds. Verifies webhook signature for
 * security. This endpoint is called by Stripe, not by clients directly.
 */
export const stripewebhookHandleWebhook = <ThrowOnError extends boolean = false>(
	options?: Options<StripewebhookHandleWebhook3Dfe6523Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		StripewebhookHandleWebhook3Dfe6523Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/stripe/webhook',
		...options
	});
};

/**
 * List Tags
 *
 * Browse and search all available tags in the system.
 *
 * Tags are used to categorize organizations, events, and series. Supports autocomplete via
 * the 'search' query parameter (e.g., /api/tags/?search=tech). Use this to populate tag
 * selection dropdowns or filters. Results are ordered by popularity (most used first).
 */
export const tagListTags = <ThrowOnError extends boolean = false>(
	options?: Options<TagListTagsD09052F8Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<TagListTagsD09052F8Responses, unknown, ThrowOnError>({
		url: '/api/tags/',
		...options
	});
};

/**
 * List Cities
 *
 * Search and browse cities from the global database.
 *
 * Supports filtering by country and searching by city name. Use the 'search' parameter
 * for autocomplete functionality. Useful for setting user location preferences or
 * filtering events by location.
 */
export const cityListCities = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCitiesE4Aeaf5cData, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCitiesE4Aeaf5cResponses, unknown, ThrowOnError>({
		url: '/api/cities/',
		...options
	});
};

/**
 * List Countries
 *
 * Get a list of all countries with cities in the database.
 *
 * Returns country names for filtering cities. Use this to populate country
 * selection dropdowns in location pickers.
 */
export const cityListCountries = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCountries0B04745eData, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCountries0B04745eResponses, unknown, ThrowOnError>(
		{
			url: '/api/cities/countries',
			...options
		}
	);
};

/**
 * Get City
 *
 * Retrieve detailed information for a specific city by ID.
 *
 * Returns city details including name, coordinates, and country. Use this to
 * get full city information after selecting from a search result.
 */
export const cityGetCity = <ThrowOnError extends boolean = false>(
	options: Options<CityGetCityCc01Fc60Data, ThrowOnError>
) => {
	return (options.client ?? client).get<CityGetCityCc01Fc60Responses, unknown, ThrowOnError>({
		url: '/api/cities/{city_id}',
		...options
	});
};
