// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	formDataBodySerializer,
	type Options as Options2,
	type TDataShape,
	urlSearchParamsBodySerializer
} from './client';
import { client } from './client.gen';
import type {
	AccountDeleteAccountConfirmC0Bd682eData,
	AccountDeleteAccountConfirmC0Bd682eResponses,
	AccountDeleteAccountRequestEed0Bca8Data,
	AccountDeleteAccountRequestEed0Bca8Responses,
	AccountExportData5A221F12Data,
	AccountExportData5A221F12Responses,
	AccountMe13Bb5758Data,
	AccountMe13Bb5758Responses,
	AccountRegister4E681D6dData,
	AccountRegister4E681D6dResponses,
	AccountResendVerificationEmail49D75E05Data,
	AccountResendVerificationEmail49D75E05Errors,
	AccountResendVerificationEmail49D75E05Responses,
	AccountResetPassword27235294Data,
	AccountResetPassword27235294Responses,
	AccountResetPasswordRequest441Ed737Data,
	AccountResetPasswordRequest441Ed737Responses,
	AccountUpdateProfileDeec3496Data,
	AccountUpdateProfileDeec3496Responses,
	AccountVerifyEmailDeedbe60Data,
	AccountVerifyEmailDeedbe60Responses,
	ApiApiHealthcheckData,
	ApiApiHealthcheckResponses,
	ApiApiVersionData,
	ApiApiVersionResponses,
	AuthDemoObtainTokenB4D7Cc40Data,
	AuthDemoObtainTokenB4D7Cc40Responses,
	AuthGoogleLoginA0783B8dData,
	AuthGoogleLoginA0783B8dResponses,
	AuthObtainTokenCb6C96D2Data,
	AuthObtainTokenCb6C96D2Responses,
	AuthObtainTokenWithOtp30Fa5516Data,
	AuthObtainTokenWithOtp30Fa5516Responses,
	CityGetCity78C23682Data,
	CityGetCity78C23682Responses,
	CityListCities80D0C8EcData,
	CityListCities80D0C8EcResponses,
	CityListCountriesCb3B06E8Data,
	CityListCountriesCb3B06E8Responses,
	DashboardDashboardEvents139F6B7fData,
	DashboardDashboardEvents139F6B7fResponses,
	DashboardDashboardEventSeries60Fd47FfData,
	DashboardDashboardEventSeries60Fd47FfResponses,
	DashboardDashboardInvitations3E67CecfData,
	DashboardDashboardInvitations3E67CecfResponses,
	DashboardDashboardOrganizationsC060D462Data,
	DashboardDashboardOrganizationsC060D462Responses,
	EventadminAddTags70Aabfd5Data,
	EventadminAddTags70Aabfd5Responses,
	EventadminApproveInvitationRequestE9866FadData,
	EventadminApproveInvitationRequestE9866FadResponses,
	EventadminCancelTicketB6Fa6B12Data,
	EventadminCancelTicketB6Fa6B12Responses,
	EventadminCheckInTicketC377B71cData,
	EventadminCheckInTicketC377B71cErrors,
	EventadminCheckInTicketC377B71cResponses,
	EventadminClearTags26Aa4801Data,
	EventadminClearTags26Aa4801Responses,
	EventadminConfirmTicketPaymentF625949aData,
	EventadminConfirmTicketPaymentF625949aResponses,
	EventadminCreateEventToken6088Aa2eData,
	EventadminCreateEventToken6088Aa2eResponses,
	EventadminCreateInvitationsAeb671CaData,
	EventadminCreateInvitationsAeb671CaErrors,
	EventadminCreateInvitationsAeb671CaResponses,
	EventadminCreateRsvpAe4C06BdData,
	EventadminCreateRsvpAe4C06BdResponses,
	EventadminCreateTicketTierEef6940cData,
	EventadminCreateTicketTierEef6940cResponses,
	EventadminDeleteCoverArt2730591aData,
	EventadminDeleteCoverArt2730591aResponses,
	EventadminDeleteEventToken63D4230cData,
	EventadminDeleteEventToken63D4230cResponses,
	EventadminDeleteInvitationEndpointCc7D561fData,
	EventadminDeleteInvitationEndpointCc7D561fErrors,
	EventadminDeleteInvitationEndpointCc7D561fResponses,
	EventadminDeleteLogoDf398925Data,
	EventadminDeleteLogoDf398925Responses,
	EventadminDeleteRsvpD38A6CddData,
	EventadminDeleteRsvpD38A6CddResponses,
	EventadminDeleteTicketTierE1Fad3F4Data,
	EventadminDeleteTicketTierE1Fad3F4Responses,
	EventadminGetRsvp4081853fData,
	EventadminGetRsvp4081853fResponses,
	EventadminGetTicket40Cb7BceData,
	EventadminGetTicket40Cb7BceResponses,
	EventadminListEventTokens381Ae5C8Data,
	EventadminListEventTokens381Ae5C8Responses,
	EventadminListInvitationRequests27D365EfData,
	EventadminListInvitationRequests27D365EfResponses,
	EventadminListInvitations7Cba66E2Data,
	EventadminListInvitations7Cba66E2Responses,
	EventadminListPendingInvitations3F2A7E9fData,
	EventadminListPendingInvitations3F2A7E9fResponses,
	EventadminListRsvpsBfe3B86eData,
	EventadminListRsvpsBfe3B86eResponses,
	EventadminListTicketsAc212310Data,
	EventadminListTicketsAc212310Responses,
	EventadminListTicketTiersE1E271C5Data,
	EventadminListTicketTiersE1E271C5Responses,
	EventadminMarkTicketRefunded2Bf8F923Data,
	EventadminMarkTicketRefunded2Bf8F923Responses,
	EventadminRejectInvitationRequestB54A34EcData,
	EventadminRejectInvitationRequestB54A34EcResponses,
	EventadminRemoveTags98C573D5Data,
	EventadminRemoveTags98C573D5Responses,
	EventadminUpdateEvent32Ec9363Data,
	EventadminUpdateEvent32Ec9363Errors,
	EventadminUpdateEvent32Ec9363Responses,
	EventadminUpdateEventStatusAbfae6B8Data,
	EventadminUpdateEventStatusAbfae6B8Responses,
	EventadminUpdateEventToken5285415bData,
	EventadminUpdateEventToken5285415bResponses,
	EventadminUpdateRsvp5Cf4943bData,
	EventadminUpdateRsvp5Cf4943bResponses,
	EventadminUpdateTicketTier1352Ae9eData,
	EventadminUpdateTicketTier1352Ae9eResponses,
	EventadminUploadCoverArt5C2199C2Data,
	EventadminUploadCoverArt5C2199C2Responses,
	EventadminUploadLogo07C9F785Data,
	EventadminUploadLogo07C9F785Responses,
	EventClaimInvitationA62Eab7eData,
	EventClaimInvitationA62Eab7eErrors,
	EventClaimInvitationA62Eab7eResponses,
	EventCreateInvitationRequest91833Ec3Data,
	EventCreateInvitationRequest91833Ec3Responses,
	EventDeleteInvitationRequestAa53F276Data,
	EventDeleteInvitationRequestAa53F276Responses,
	EventGetEvent6Cefcde4Data,
	EventGetEvent6Cefcde4Responses,
	EventGetEventAttendees1D7Cbde8Data,
	EventGetEventAttendees1D7Cbde8Responses,
	EventGetEventBySlugs14898B86Data,
	EventGetEventBySlugs14898B86Responses,
	EventGetMyEventStatus0F7B4596Data,
	EventGetMyEventStatus0F7B4596Responses,
	EventGetQuestionnaireFc97069fData,
	EventGetQuestionnaireFc97069fResponses,
	EventListEvents20F8DfffData,
	EventListEvents20F8DfffResponses,
	EventListResources22B54F41Data,
	EventListResources22B54F41Responses,
	EventListTiersC36D6C42Data,
	EventListTiersC36D6C42Responses,
	EventListUserInvitationRequests6Dc8F97cData,
	EventListUserInvitationRequests6Dc8F97cResponses,
	EventRsvpEvent6982B2B6Data,
	EventRsvpEvent6982B2B6Errors,
	EventRsvpEvent6982B2B6Responses,
	EventseriesadminAddTags62Aa21B4Data,
	EventseriesadminAddTags62Aa21B4Responses,
	EventseriesadminClearTags36D8Fd8dData,
	EventseriesadminClearTags36D8Fd8dResponses,
	EventseriesadminDeleteCoverArt536BccbcData,
	EventseriesadminDeleteCoverArt536BccbcResponses,
	EventseriesadminDeleteEventSeries20F30DcbData,
	EventseriesadminDeleteEventSeries20F30DcbResponses,
	EventseriesadminDeleteLogoAc497596Data,
	EventseriesadminDeleteLogoAc497596Responses,
	EventseriesadminRemoveTagsBf9E4C65Data,
	EventseriesadminRemoveTagsBf9E4C65Responses,
	EventseriesadminUpdateEventSeries017A4C99Data,
	EventseriesadminUpdateEventSeries017A4C99Errors,
	EventseriesadminUpdateEventSeries017A4C99Responses,
	EventseriesadminUploadCoverArtC8913B2cData,
	EventseriesadminUploadCoverArtC8913B2cResponses,
	EventseriesadminUploadLogoE1De4A9dData,
	EventseriesadminUploadLogoE1De4A9dResponses,
	EventseriesGetEventSeriesBySlugs9F01E43cData,
	EventseriesGetEventSeriesBySlugs9F01E43cResponses,
	EventseriesGetEventSeriesD687F58fData,
	EventseriesGetEventSeriesD687F58fResponses,
	EventseriesListEventSeries6A98Db8bData,
	EventseriesListEventSeries6A98Db8bResponses,
	EventseriesListResourcesAeb552AfData,
	EventseriesListResourcesAeb552AfResponses,
	EventSubmitQuestionnaire2D4818D2Data,
	EventSubmitQuestionnaire2D4818D2Errors,
	EventSubmitQuestionnaire2D4818D2Responses,
	EventTicketCheckoutAc9200CaData,
	EventTicketCheckoutAc9200CaErrors,
	EventTicketCheckoutAc9200CaResponses,
	EventTicketPwycCheckout6A22A15dData,
	EventTicketPwycCheckout6A22A15dErrors,
	EventTicketPwycCheckout6A22A15dResponses,
	OrganizationadminAddStaffB6532A3fData,
	OrganizationadminAddStaffB6532A3fResponses,
	OrganizationadminAddTags1Bbfe6E0Data,
	OrganizationadminAddTags1Bbfe6E0Responses,
	OrganizationadminApproveMembershipRequest9Fdb22CdData,
	OrganizationadminApproveMembershipRequest9Fdb22CdResponses,
	OrganizationadminClearTags03D1A960Data,
	OrganizationadminClearTags03D1A960Responses,
	OrganizationadminCreateEvent9Bfe5593Data,
	OrganizationadminCreateEvent9Bfe5593Errors,
	OrganizationadminCreateEvent9Bfe5593Responses,
	OrganizationadminCreateEventSeriesC8F626CbData,
	OrganizationadminCreateEventSeriesC8F626CbErrors,
	OrganizationadminCreateEventSeriesC8F626CbResponses,
	OrganizationadminCreateOrganizationToken2Badda76Data,
	OrganizationadminCreateOrganizationToken2Badda76Responses,
	OrganizationadminCreateResourceB1091D47Data,
	OrganizationadminCreateResourceB1091D47Responses,
	OrganizationadminDeleteCoverArtCb39A926Data,
	OrganizationadminDeleteCoverArtCb39A926Responses,
	OrganizationadminDeleteLogoA6Cdc51dData,
	OrganizationadminDeleteLogoA6Cdc51dResponses,
	OrganizationadminDeleteOrganizationTokenD33212A4Data,
	OrganizationadminDeleteOrganizationTokenD33212A4Responses,
	OrganizationadminDeleteResourceEc80Eed5Data,
	OrganizationadminDeleteResourceEc80Eed5Responses,
	OrganizationadminGetOrganization1904D0AcData,
	OrganizationadminGetOrganization1904D0AcResponses,
	OrganizationadminGetResource644E918fData,
	OrganizationadminGetResource644E918fResponses,
	OrganizationadminListMembers24B060DfData,
	OrganizationadminListMembers24B060DfResponses,
	OrganizationadminListMembershipRequests468E6758Data,
	OrganizationadminListMembershipRequests468E6758Responses,
	OrganizationadminListOrganizationTokens92012749Data,
	OrganizationadminListOrganizationTokens92012749Responses,
	OrganizationadminListResources264Fad5fData,
	OrganizationadminListResources264Fad5fResponses,
	OrganizationadminListStaff433B9860Data,
	OrganizationadminListStaff433B9860Responses,
	OrganizationadminRejectMembershipRequest76B64B55Data,
	OrganizationadminRejectMembershipRequest76B64B55Responses,
	OrganizationadminRemoveMember0Beb75C9Data,
	OrganizationadminRemoveMember0Beb75C9Responses,
	OrganizationadminRemoveStaff7Ef2473dData,
	OrganizationadminRemoveStaff7Ef2473dResponses,
	OrganizationadminRemoveTagsF31Ffb19Data,
	OrganizationadminRemoveTagsF31Ffb19Responses,
	OrganizationadminStripeAccountVerifyF5Bc937aData,
	OrganizationadminStripeAccountVerifyF5Bc937aResponses,
	OrganizationadminStripeConnectD0E8De60Data,
	OrganizationadminStripeConnectD0E8De60Responses,
	OrganizationadminUpdateOrganizationEf2A1072Data,
	OrganizationadminUpdateOrganizationEf2A1072Responses,
	OrganizationadminUpdateOrganizationToken15212De9Data,
	OrganizationadminUpdateOrganizationToken15212De9Responses,
	OrganizationadminUpdateResource7864D008Data,
	OrganizationadminUpdateResource7864D008Responses,
	OrganizationadminUpdateStaffPermissionsFffa69BeData,
	OrganizationadminUpdateStaffPermissionsFffa69BeResponses,
	OrganizationadminUploadCoverArtB4Fe9E44Data,
	OrganizationadminUploadCoverArtB4Fe9E44Responses,
	OrganizationadminUploadLogoFf231D13Data,
	OrganizationadminUploadLogoFf231D13Responses,
	OrganizationClaimInvitationEb3E868aData,
	OrganizationClaimInvitationEb3E868aErrors,
	OrganizationClaimInvitationEb3E868aResponses,
	OrganizationCreateMembershipRequest415F85E6Data,
	OrganizationCreateMembershipRequest415F85E6Responses,
	OrganizationGetOrganizationC3271D1aData,
	OrganizationGetOrganizationC3271D1aResponses,
	OrganizationListOrganizationsA4E95D55Data,
	OrganizationListOrganizationsA4E95D55Responses,
	OrganizationListResources9801857bData,
	OrganizationListResources9801857bResponses,
	OtpDisableOtp8Cde6103Data,
	OtpDisableOtp8Cde6103Responses,
	OtpEnableOtp728D4216Data,
	OtpEnableOtp728D4216Responses,
	OtpSetupOtp698A4D9fData,
	OtpSetupOtp698A4D9fResponses,
	PermissionMyPermissionsB0E4172dData,
	PermissionMyPermissionsB0E4172dResponses,
	PotluckClaimPotluckItem207C16E9Data,
	PotluckClaimPotluckItem207C16E9Responses,
	PotluckCreatePotluckItemF9E35522Data,
	PotluckCreatePotluckItemF9E35522Responses,
	PotluckDeletePotluckItem9566283aData,
	PotluckDeletePotluckItem9566283aResponses,
	PotluckListPotluckItemsBa99B3BcData,
	PotluckListPotluckItemsBa99B3BcResponses,
	PotluckUnclaimPotluckItemA1F38FebData,
	PotluckUnclaimPotluckItemA1F38FebResponses,
	PotluckUpdatePotluckItemB57030F9Data,
	PotluckUpdatePotluckItemB57030F9Responses,
	QuestionnaireAssignEventB960D17eData,
	QuestionnaireAssignEventB960D17eResponses,
	QuestionnaireAssignEventSeries7D54B589Data,
	QuestionnaireAssignEventSeries7D54B589Responses,
	QuestionnaireCreateFtQuestion25F1Ae92Data,
	QuestionnaireCreateFtQuestion25F1Ae92Responses,
	QuestionnaireCreateMcOptionE8D0F419Data,
	QuestionnaireCreateMcOptionE8D0F419Responses,
	QuestionnaireCreateMcQuestionE54E6A21Data,
	QuestionnaireCreateMcQuestionE54E6A21Responses,
	QuestionnaireCreateOrgQuestionnaireC1B97Eb0Data,
	QuestionnaireCreateOrgQuestionnaireC1B97Eb0Errors,
	QuestionnaireCreateOrgQuestionnaireC1B97Eb0Responses,
	QuestionnaireCreateSection10B3909eData,
	QuestionnaireCreateSection10B3909eResponses,
	QuestionnaireDeleteFtQuestion3F2A0E5dData,
	QuestionnaireDeleteFtQuestion3F2A0E5dResponses,
	QuestionnaireDeleteMcOptionEf3F087fData,
	QuestionnaireDeleteMcOptionEf3F087fResponses,
	QuestionnaireDeleteMcQuestion81E447F8Data,
	QuestionnaireDeleteMcQuestion81E447F8Responses,
	QuestionnaireDeleteOrgQuestionnaire16F90370Data,
	QuestionnaireDeleteOrgQuestionnaire16F90370Responses,
	QuestionnaireDeleteSection1Fb2A350Data,
	QuestionnaireDeleteSection1Fb2A350Responses,
	QuestionnaireEvaluateSubmission1A818927Data,
	QuestionnaireEvaluateSubmission1A818927Errors,
	QuestionnaireEvaluateSubmission1A818927Responses,
	QuestionnaireGetOrgQuestionnaire29E9AdefData,
	QuestionnaireGetOrgQuestionnaire29E9AdefResponses,
	QuestionnaireGetSubmissionDetail0Be7Ba25Data,
	QuestionnaireGetSubmissionDetail0Be7Ba25Responses,
	QuestionnaireListOrgQuestionnaires31Eb8A8aData,
	QuestionnaireListOrgQuestionnaires31Eb8A8aResponses,
	QuestionnaireListSubmissions8C19Efb9Data,
	QuestionnaireListSubmissions8C19Efb9Responses,
	QuestionnaireReplaceEvents6C81827bData,
	QuestionnaireReplaceEvents6C81827bResponses,
	QuestionnaireReplaceEventSeries9D9A0511Data,
	QuestionnaireReplaceEventSeries9D9A0511Responses,
	QuestionnaireUnassignEvent63581AabData,
	QuestionnaireUnassignEvent63581AabResponses,
	QuestionnaireUnassignEventSeriesCbfe94EeData,
	QuestionnaireUnassignEventSeriesCbfe94EeResponses,
	QuestionnaireUpdateFtQuestion25C024B3Data,
	QuestionnaireUpdateFtQuestion25C024B3Responses,
	QuestionnaireUpdateMcOption0E84Efc5Data,
	QuestionnaireUpdateMcOption0E84Efc5Responses,
	QuestionnaireUpdateMcQuestion7Bb39B6cData,
	QuestionnaireUpdateMcQuestion7Bb39B6cResponses,
	QuestionnaireUpdateOrgQuestionnaire2Bd764AdData,
	QuestionnaireUpdateOrgQuestionnaire2Bd764AdResponses,
	QuestionnaireUpdateQuestionnaireStatusBc53F88dData,
	QuestionnaireUpdateQuestionnaireStatusBc53F88dResponses,
	QuestionnaireUpdateSectionFccd25AcData,
	QuestionnaireUpdateSectionFccd25AcResponses,
	StripewebhookHandleWebhookA02871B3Data,
	StripewebhookHandleWebhookA02871B3Responses,
	TagListTagsCa6F7E6eData,
	TagListTagsCa6F7E6eResponses,
	TokenRefreshData,
	TokenRefreshResponses,
	UserpreferencesGetEventPreferences11D3Ed02Data,
	UserpreferencesGetEventPreferences11D3Ed02Responses,
	UserpreferencesGetEventSeriesPreferencesA5B4Ea65Data,
	UserpreferencesGetEventSeriesPreferencesA5B4Ea65Responses,
	UserpreferencesGetGeneralPreferencesCddd1C77Data,
	UserpreferencesGetGeneralPreferencesCddd1C77Responses,
	UserpreferencesGetOrganizationPreferences1E3B59A8Data,
	UserpreferencesGetOrganizationPreferences1E3B59A8Responses,
	UserpreferencesUpdateEventPreferences61F378A2Data,
	UserpreferencesUpdateEventPreferences61F378A2Responses,
	UserpreferencesUpdateEventSeriesPreferencesAeae321bData,
	UserpreferencesUpdateEventSeriesPreferencesAeae321bResponses,
	UserpreferencesUpdateGlobalPreferences7D21A822Data,
	UserpreferencesUpdateGlobalPreferences7D21A822Responses,
	UserpreferencesUpdateOrganizationPreferencesA0B804AbData,
	UserpreferencesUpdateOrganizationPreferencesA0B804AbResponses
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Version
 *
 * Get the API version.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiVersion = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiVersionData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiVersionResponses, unknown, ThrowOnError>({
		url: '/api/version',
		...options
	});
};

/**
 * Healthcheck
 *
 * Check the health of the API.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiHealthcheck = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiHealthcheckData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiHealthcheckResponses, unknown, ThrowOnError>({
		url: '/api/healthcheck',
		...options
	});
};

/**
 * Obtain Token
 *
 * Authenticate with email and password to obtain JWT access/refresh tokens.
 *
 * For users without 2FA: Returns standard JWT token pair for immediate access.
 * For users with TOTP enabled: Returns a temporary token that must be exchanged for
 * a full token pair via POST /auth/token/pair/otp along with the TOTP code.
 * Users registered via Google SSO must use POST /auth/google/login instead.
 */
export const authObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainTokenCb6C96D2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthObtainTokenCb6C96D2Responses, unknown, ThrowOnError>({
		url: '/api/auth/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Refresh Token
 */
export const tokenRefresh = <ThrowOnError extends boolean = false>(
	options: Options<TokenRefreshData, ThrowOnError>
) => {
	return (options.client ?? client).post<TokenRefreshResponses, unknown, ThrowOnError>({
		url: '/api/auth/refresh',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Demo Obtain Token
 *
 * Create and authenticate a demo user account (demo mode only).
 *
 * Automatically creates a user account with the provided credentials if it doesn't exist,
 * then returns JWT tokens. Only available when DEMO_MODE is enabled in settings.
 * Email must end with @example.com.
 */
export const authDemoObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthDemoObtainTokenB4D7Cc40Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthDemoObtainTokenB4D7Cc40Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/demo/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Obtain Token With Otp
 *
 * Complete 2FA authentication by exchanging temporary token and TOTP code for JWT tokens.
 *
 * Call this after POST /auth/token/pair returns a temporary token for a 2FA-enabled user.
 * Validates the TOTP code from the user's authenticator app and returns a standard JWT token
 * pair on success. Returns 401 if the TOTP code is invalid.
 */
export const authObtainTokenWithOtp = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainTokenWithOtp30Fa5516Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthObtainTokenWithOtp30Fa5516Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/token/pair/otp',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Google Login
 *
 * Authenticate or register via Google SSO using a Google ID token.
 *
 * Verifies the Google ID token, creates a new user if needed, and returns JWT tokens.
 * For existing Google SSO users, this is the only valid login method - they cannot
 * use password-based authentication.
 */
export const authGoogleLogin = <ThrowOnError extends boolean = false>(
	options: Options<AuthGoogleLoginA0783B8dData, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthGoogleLoginA0783B8dResponses, unknown, ThrowOnError>({
		url: '/api/auth/google/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Setup Otp
 *
 * Get the TOTP provisioning URI to configure an authenticator app.
 *
 * Returns a URI (often as QR code) to scan with authenticator apps like Google Authenticator
 * or Authy. Returns 400 if 2FA is already enabled. After scanning, verify the setup with
 * POST /otp/verify to activate 2FA.
 */
export const otpSetupOtp = <ThrowOnError extends boolean = false>(
	options?: Options<OtpSetupOtp698A4D9fData, ThrowOnError>
) => {
	return (options?.client ?? client).get<OtpSetupOtp698A4D9fResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/setup',
		...options
	});
};

/**
 * Enable Otp
 *
 * Activate 2FA by verifying the TOTP code from the authenticator app.
 *
 * Call this after GET /otp/setup with a code from your authenticator app to confirm
 * it's configured correctly. On success, activates 2FA for the account. Future logins
 * will require the TOTP code via POST /auth/token/pair/otp. Returns 403 if code is invalid.
 */
export const otpEnableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpEnableOtp728D4216Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpEnableOtp728D4216Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Disable Otp
 *
 * Deactivate 2FA after verifying the current TOTP code.
 *
 * Requires the current TOTP code to prevent unauthorized disabling. After disabling,
 * login will only require email and password via POST /auth/token/pair. Returns 403
 * if the TOTP code is invalid.
 */
export const otpDisableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpDisableOtp8Cde6103Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpDisableOtp8Cde6103Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/disable',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Export Data
 *
 * Request a GDPR-compliant export of all personal data.
 *
 * Initiates an asynchronous export of all user data including profile, events, tickets,
 * and submissions. The export will be emailed to the user when ready. Rate-limited to
 * prevent abuse.
 */
export const accountExportData = <ThrowOnError extends boolean = false>(
	options?: Options<AccountExportData5A221F12Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountExportData5A221F12Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/export-data',
		...options
	});
};

/**
 * Me
 *
 * Retrieve the authenticated user's profile information.
 *
 * Returns complete user profile including email, name, location preferences, and 2FA status.
 * Use this to display user info in the UI or verify authentication status.
 */
export const accountMe = <ThrowOnError extends boolean = false>(
	options?: Options<AccountMe13Bb5758Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<AccountMe13Bb5758Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options
	});
};

/**
 * Update Profile
 *
 * Update the authenticated user's profile information.
 *
 * Allows updating name, location preferences, and other profile fields. Only provided
 * fields are updated. Returns the updated user profile.
 */
export const accountUpdateProfile = <ThrowOnError extends boolean = false>(
	options: Options<AccountUpdateProfileDeec3496Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		AccountUpdateProfileDeec3496Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Register
 *
 * Create a new user account with email and password.
 *
 * Creates a new account and sends a verification email. The account is created but not
 * fully active until email is verified via POST /account/verify. If an unverified account
 * with the same email exists, resends the verification email. Returns 400 if a verified
 * account already exists.
 */
export const accountRegister = <ThrowOnError extends boolean = false>(
	options: Options<AccountRegister4E681D6dData, ThrowOnError>
) => {
	return (options.client ?? client).post<AccountRegister4E681D6dResponses, unknown, ThrowOnError>({
		url: '/api/account/register',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Verify Email
 *
 * Verify email address using the token from the verification email.
 *
 * Call this with the token received via email after registration. On success, activates
 * the account and returns the verified user profile along with JWT tokens for immediate login.
 * The verification token is single-use and expires after a set period.
 */
export const accountVerifyEmail = <ThrowOnError extends boolean = false>(
	options: Options<AccountVerifyEmailDeedbe60Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountVerifyEmailDeedbe60Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Resend Verification Email
 *
 * Resend the email verification link to the authenticated user.
 *
 * Use this if the original verification email was lost or expired. Returns 400 if the
 * email is already verified. Requires authentication with the unverified account's JWT.
 */
export const accountResendVerificationEmail = <ThrowOnError extends boolean = false>(
	options?: Options<AccountResendVerificationEmail49D75E05Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountResendVerificationEmail49D75E05Responses,
		AccountResendVerificationEmail49D75E05Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/verify-resend',
		...options
	});
};

/**
 * Delete Account Request
 *
 * Initiate GDPR-compliant account deletion by sending confirmation email.
 *
 * Sends an email with a deletion confirmation link. The account is not deleted until
 * the user confirms via POST /account/delete-confirm with the token from the email.
 * This two-step process prevents accidental deletions.
 */
export const accountDeleteAccountRequest = <ThrowOnError extends boolean = false>(
	options?: Options<AccountDeleteAccountRequestEed0Bca8Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountDeleteAccountRequestEed0Bca8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/delete-request',
		...options
	});
};

/**
 * Delete Account Confirm
 *
 * Permanently delete the account using the confirmation token from email.
 *
 * Call this with the token received via email after POST /account/delete-request.
 * This action is irreversible and deletes all user data. The deletion is processed
 * asynchronously in the background. The deletion token is single-use and expires
 * after a set period.
 */
export const accountDeleteAccountConfirm = <ThrowOnError extends boolean = false>(
	options: Options<AccountDeleteAccountConfirmC0Bd682eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountDeleteAccountConfirmC0Bd682eResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/delete-confirm',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password Request
 *
 * Request a password reset by email.
 *
 * Sends a password reset link to the provided email if an account exists. Always returns
 * a success message to prevent user enumeration attacks. Google SSO users cannot use this
 * endpoint. After receiving the email, use POST /account/password/reset with the token.
 */
export const accountResetPasswordRequest = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordRequest441Ed737Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordRequest441Ed737Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset-request',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password
 *
 * Reset password using the token from the password reset email.
 *
 * Call this with the token received via email after POST /account/password/reset-request.
 * The new password must meet security requirements. The reset token is single-use and
 * expires after a set period. After reset, the user must login again with the new password.
 */
export const accountResetPassword = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPassword27235294Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPassword27235294Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Dashboard Organizations
 *
 * View organizations for your dashboard filtered by your relationship to them.
 *
 * Filter by: organizations you own, are staff of, are a member of, or have pending requests to.
 * Shows only organizations you have permission to view. Use this to display "My Organizations"
 * sections in the UI.
 */
export const dashboardDashboardOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardOrganizationsC060D462Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardOrganizationsC060D462Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/organizations',
		...options
	});
};

/**
 * Dashboard Events
 *
 * View upcoming events for your dashboard filtered by your relationship to them.
 *
 * Filter by: events you're organizing, attending (RSVP'd or have tickets), invited to, or have
 * requested invitations to. Only shows future events you have permission to view. Use this to
 * display "My Events" sections in the UI.
 */
export const dashboardDashboardEvents = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEvents139F6B7fData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEvents139F6B7fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/events',
		...options
	});
};

/**
 * Dashboard Event Series
 *
 * View event series for your dashboard filtered by your relationship to them.
 *
 * Filter by: series you're organizing or series you're attending events in. Shows only
 * series you have permission to view. Use this to display "My Series" sections in the UI.
 */
export const dashboardDashboardEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventSeries60Fd47FfData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventSeries60Fd47FfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/event_series',
		...options
	});
};

/**
 * Dashboard Invitations
 *
 * View your pending event invitations.
 *
 * Returns invitations you've received but not yet acted on, sorted by event date (soonest first).
 * Use this to display a "Pending Invitations" section prompting users to RSVP or purchase tickets.
 */
export const dashboardDashboardInvitations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardInvitations3E67CecfData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardInvitations3E67CecfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/invitations',
		...options
	});
};

/**
 * List Organizations
 *
 * Browse and search organizations visible to the current user.
 *
 * Results are filtered by visibility settings and user memberships. By default orders by
 * 'distance' (nearest first based on user location). Can also sort alphabetically by 'name'
 * or reverse with '-name'. Supports text search and filtering.
 */
export const organizationListOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<OrganizationListOrganizationsA4E95D55Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		OrganizationListOrganizationsA4E95D55Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/',
		...options
	});
};

/**
 * Get Organization
 *
 * Retrieve organization details using its unique slug.
 *
 * Returns full organization information including description, location, member count, and
 * settings. Use this to display the organization profile page.
 */
export const organizationGetOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationGetOrganizationC3271D1aData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationGetOrganizationC3271D1aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this organization and marked for display on organization page.
 *
 * Returns documents, links, or media files provided by organization admins. Resources may
 * be public or restricted to members only. Supports filtering by type and text search.
 */
export const organizationListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationListResources9801857bData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationListResources9801857bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/resources',
		...options
	});
};

/**
 * Create Membership Request
 *
 * Submit a request to become a member of this organization.
 *
 * Creates a membership request that organization admins can approve or reject. Being a
 * member may be required to access certain members-only events. Returns the created
 * request for tracking status.
 */
export const organizationCreateMembershipRequest = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationCreateMembershipRequest415F85E6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationCreateMembershipRequest415F85E6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/membership-requests',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Claim Invitation
 *
 * Accept an organization membership invitation using a token from invitation link.
 *
 * Creates an OrganizationMember record, granting you member status. Members may have
 * access to members-only events and resources. Returns the organization on success,
 * or 400 if the token is invalid/expired.
 */
export const organizationClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationClaimInvitationEb3E868aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationClaimInvitationEb3E868aResponses,
		OrganizationClaimInvitationEb3E868aErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Organization
 *
 * Get comprehensive organization details including all platform fee and Stripe fields.
 */
export const organizationadminGetOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetOrganization1904D0AcData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetOrganization1904D0AcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options
	});
};

/**
 * Update Organization
 *
 * Update organization by slug.
 */
export const organizationadminUpdateOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateOrganizationEf2A1072Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationEf2A1072Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Stripe Connect
 *
 * Get a link to onboard the organization to Stripe.
 */
export const organizationadminStripeConnect = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeConnectD0E8De60Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeConnectD0E8De60Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/connect',
		...options
	});
};

/**
 * Stripe Account Verify
 *
 * Get the organization's Stripe account status.
 */
export const organizationadminStripeAccountVerify = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeAccountVerifyF5Bc937aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeAccountVerifyF5Bc937aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/account/verify',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to organization.
 */
export const organizationadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadLogoFf231D13Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadLogoFf231D13Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to organization.
 */
export const organizationadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadCoverArtB4Fe9E44Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadCoverArtB4Fe9E44Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from organization.
 */
export const organizationadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteLogoA6Cdc51dData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteLogoA6Cdc51dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from organization.
 */
export const organizationadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteCoverArtCb39A926Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteCoverArtCb39A926Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-cover-art',
		...options
	});
};

/**
 * Create Event Series
 *
 * Create a new event series.
 */
export const organizationadminCreateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEventSeriesC8F626CbData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEventSeriesC8F626CbResponses,
		OrganizationadminCreateEventSeriesC8F626CbErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Event
 *
 * Create a new event.
 */
export const organizationadminCreateEvent = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEvent9Bfe5593Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEvent9Bfe5593Responses,
		OrganizationadminCreateEvent9Bfe5593Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Organization Tokens
 *
 * List all tokens for an organization that the user has admin rights for.
 */
export const organizationadminListOrganizationTokens = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListOrganizationTokens92012749Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListOrganizationTokens92012749Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens',
		...options
	});
};

/**
 * Create Organization Token
 *
 * Create a new token for an organization.
 */
export const organizationadminCreateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminCreateOrganizationToken2Badda76Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateOrganizationToken2Badda76Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Organization Token
 *
 * Delete an organization token.
 */
export const organizationadminDeleteOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminDeleteOrganizationTokenD33212A4Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteOrganizationTokenD33212A4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options
	});
};

/**
 * Update Organization Token
 *
 * Update an organization token.
 */
export const organizationadminUpdateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateOrganizationToken15212De9Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationToken15212De9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Membership Requests
 *
 * List all membership requests for an organization.
 *
 * By default shows all requests. Use ?status=pending to filter by status.
 */
export const organizationadminListMembershipRequests = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListMembershipRequests468E6758Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembershipRequests468E6758Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests',
		...options
	});
};

/**
 * Approve Membership Request
 *
 * Approve a membership request.
 */
export const organizationadminApproveMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminApproveMembershipRequest9Fdb22CdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminApproveMembershipRequest9Fdb22CdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/approve',
		...options
	});
};

/**
 * Reject Membership Request
 *
 * Reject a membership request.
 */
export const organizationadminRejectMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminRejectMembershipRequest76B64B55Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRejectMembershipRequest76B64B55Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/reject',
		...options
	});
};

/**
 * List Resources
 *
 * List all resources for a specific organization.
 */
export const organizationadminListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListResources264Fad5fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListResources264Fad5fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options
	});
};

/**
 * Create Resource
 *
 * Create a new resource for the organization.
 *
 * Accepts multipart/form-data with individual form fields for each schema property.
 * For FILE type resources, include the file parameter.
 */
export const organizationadminCreateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateResourceB1091D47Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateResourceB1091D47Responses,
		unknown,
		ThrowOnError
	>({
		...urlSearchParamsBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options,
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded',
			...options.headers
		}
	});
};

/**
 * Delete Resource
 *
 * Delete a resource from the organization.
 */
export const organizationadminDeleteResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteResourceEc80Eed5Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteResourceEc80Eed5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Get Resource
 *
 * Retrieve a specific resource for the organization.
 */
export const organizationadminGetResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetResource644E918fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetResource644E918fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Update Resource
 *
 * Update a resource for the organization.
 */
export const organizationadminUpdateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateResource7864D008Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateResource7864D008Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Members
 *
 * List all members of an organization.
 */
export const organizationadminListMembers = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListMembers24B060DfData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembers24B060DfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members',
		...options
	});
};

/**
 * Remove Member
 *
 * Remove a member from an organization.
 */
export const organizationadminRemoveMember = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveMember0Beb75C9Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveMember0Beb75C9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members/{user_id}',
		...options
	});
};

/**
 * List Staff
 *
 * List all staff of an organization.
 */
export const organizationadminListStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListStaff433B9860Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListStaff433B9860Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff',
		...options
	});
};

/**
 * Remove Staff
 *
 * Remove a staff member from an organization.
 */
export const organizationadminRemoveStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveStaff7Ef2473dData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveStaff7Ef2473dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options
	});
};

/**
 * Add Staff
 *
 * Add a staff member to an organization.
 */
export const organizationadminAddStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddStaffB6532A3fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddStaffB6532A3fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Staff Permissions
 *
 * Update a staff member's permissions.
 */
export const organizationadminUpdateStaffPermissions = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateStaffPermissionsFffa69BeData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateStaffPermissionsFffa69BeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}/permissions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Clear akk tags from the organization.
 */
export const organizationadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminClearTags03D1A960Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminClearTags03D1A960Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const organizationadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddTags1Bbfe6E0Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddTags1Bbfe6E0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const organizationadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveTagsF31Ffb19Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRemoveTagsF31Ffb19Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Events
 *
 * Browse and search events visible to the current user.
 *
 * Results are filtered by visibility rules (public/private), event status, and user permissions.
 * By default shows only upcoming events; set include_past=true to see past events.
 * Ordering: 'distance' (default) shows nearest events based on user location, 'start' shows
 * soonest first, '-start' shows latest first. Supports filtering by organization, series,
 * tags, and text search.
 */
export const eventListEvents = <ThrowOnError extends boolean = false>(
	options?: Options<EventListEvents20F8DfffData, ThrowOnError>
) => {
	return (options?.client ?? client).get<EventListEvents20F8DfffResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an event invitation using a token from an invitation link or email.
 *
 * Creates an EventInvitation record for the user, granting access to the event.
 * Invitations can bypass certain eligibility requirements like membership, capacity limits,
 * and RSVP deadlines. Returns the event on success, or 400 if the token is invalid/expired.
 */
export const eventClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventClaimInvitationA62Eab7eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventClaimInvitationA62Eab7eResponses,
		EventClaimInvitationA62Eab7eErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Event Attendees
 *
 * Get the list of confirmed attendees for this event.
 *
 * Returns users who have RSVPed 'yes' or have active tickets. Visibility is controlled by
 * event settings - attendee lists may be hidden from regular attendees. Organization staff
 * and event creators always have access.
 */
export const eventGetEventAttendees = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventAttendees1D7Cbde8Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventAttendees1D7Cbde8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/attendee-list',
		...options
	});
};

/**
 * Get My Event Status
 *
 * Check the authenticated user's current status and eligibility for an event.
 *
 * Returns either the user's RSVP/ticket status if they've already joined, or an eligibility
 * check result explaining what steps are needed to attend. The eligibility check validates:
 * event status, RSVP deadline, invitations, organization membership, required questionnaires,
 * capacity limits, and ticket availability. Use this to determine which action to show users
 * (RSVP button, buy ticket, fill questionnaire, etc.).
 */
export const eventGetMyEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventGetMyEventStatus0F7B4596Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetMyEventStatus0F7B4596Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/my-status',
		...options
	});
};

/**
 * Create Invitation Request
 *
 * Submit a request to be invited to a private or invite-only event.
 *
 * Creates an invitation request that event organizers can approve or reject. Include an
 * optional message explaining why you want to attend. Returns 400 if you've already
 * submitted a request for this event. Check GET /{event_id}/my-status to see if you
 * need an invitation.
 */
export const eventCreateInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventCreateInvitationRequest91833Ec3Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventCreateInvitationRequest91833Ec3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/invitation-requests',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Resources
 *
 * Get supplementary resources attached to this event.
 *
 * Returns resources like documents, links, or media files provided by event organizers.
 * Resources may be public or restricted to attendees only. Supports filtering by type
 * (file, link, etc.) and text search.
 */
export const eventListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventListResources22B54F41Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListResources22B54F41Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/events/{event_id}/resources',
			...options
		}
	);
};

/**
 * Delete Invitation Request
 *
 * Cancel a pending invitation request.
 *
 * Withdraws your invitation request for an event. Only works for your own requests
 * that haven't been decided yet. Returns 404 if the request doesn't exist or doesn't
 * belong to you.
 */
export const eventDeleteInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventDeleteInvitationRequestAa53F276Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventDeleteInvitationRequestAa53F276Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/invitation-requests/{request_id}',
		...options
	});
};

/**
 * List User Invitation Requests
 *
 * View your invitation requests across all events.
 *
 * Returns your invitation requests with their current status (pending/approved/rejected).
 * Filter by event_id to see requests for a specific event, or by status to see approved/
 * rejected requests. Use this to track which events you've requested access to.
 */
export const eventListUserInvitationRequests = <ThrowOnError extends boolean = false>(
	options?: Options<EventListUserInvitationRequests6Dc8F97cData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventListUserInvitationRequests6Dc8F97cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/me/pending-invitation-requests',
		...options
	});
};

/**
 * Get Event By Slugs
 *
 * Retrieve event details using human-readable organization and event slugs.
 *
 * Use this for clean URLs like /events/tech-meetup/monthly-session. Returns 404 if
 * the event doesn't exist or you don't have permission to view it.
 */
export const eventGetEventBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventBySlugs14898B86Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventBySlugs14898B86Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{org_slug}/{event_slug}',
		...options
	});
};

/**
 * Get Event
 *
 * Retrieve full event details by ID.
 *
 * Returns comprehensive event information including description, location, times, organization,
 * ticket tiers, and visibility settings. Use this to display the event detail page.
 */
export const eventGetEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEvent6Cefcde4Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventGetEvent6Cefcde4Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}',
		...options
	});
};

/**
 * Rsvp Event
 *
 * RSVP to a non-ticketed event (answer: 'yes', 'no', or 'maybe').
 *
 * Only works for events where requires_ticket=false. Runs full eligibility check including
 * event status, RSVP deadline, invitations, membership requirements, required questionnaires,
 * and capacity limits. Returns RSVP record on success. On failure, returns eligibility details
 * explaining what's blocking you and what next_step to take (e.g., complete questionnaire,
 * request invitation).
 */
export const eventRsvpEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventRsvpEvent6982B2B6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRsvpEvent6982B2B6Responses,
		EventRsvpEvent6982B2B6Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/rsvp/{answer}',
		...options
	});
};

/**
 * List Tiers
 *
 * Get all ticket tiers available for purchase at this event.
 *
 * Returns ticket types with pricing, availability, and sales windows. Filters tiers based
 * on user eligibility - you'll only see tiers you're allowed to purchase. Check visibility
 * settings and sales_start_at/sales_end_at to determine which are currently on sale.
 */
export const eventListTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventListTiersC36D6C42Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListTiersC36D6C42Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/tiers',
		...options
	});
};

/**
 * Ticket Checkout
 *
 * Purchase a fixed-price event ticket.
 *
 * Runs eligibility checks before allowing purchase. For online payment: returns Stripe
 * checkout URL to redirect user for payment. For free/offline/at-the-door tickets: creates
 * ticket immediately and returns it. Cannot be used for pay-what-you-can (PWYC) tiers -
 * use POST /{event_id}/tickets/{tier_id}/checkout/pwyc instead. On eligibility failure,
 * returns 400 with eligibility details explaining what's blocking you and what next_step
 * to take (e.g., complete questionnaire, request invitation, wait for tickets to go on sale).
 */
export const eventTicketCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketCheckoutAc9200CaData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketCheckoutAc9200CaResponses,
		EventTicketCheckoutAc9200CaErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout',
		...options
	});
};

/**
 * Ticket Pwyc Checkout
 *
 * Purchase a pay-what-you-can (PWYC) ticket with a user-specified amount.
 *
 * Only works for ticket tiers with price_type=PWYC. Validates the amount is within the
 * tier's min/max bounds. Returns Stripe checkout URL for online payment, or creates ticket
 * immediately for free/offline payment methods. Returns 400 for non-PWYC tiers, if amount
 * is out of bounds, or on eligibility failure (with eligibility details explaining what's
 * blocking you and what next_step to take).
 */
export const eventTicketPwycCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketPwycCheckout6A22A15dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketPwycCheckout6A22A15dResponses,
		EventTicketPwycCheckout6A22A15dErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout/pwyc',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Questionnaire
 *
 * Retrieve a questionnaire required for event admission.
 *
 * Returns the questionnaire structure with all sections and questions. Questions may be
 * shuffled based on questionnaire settings. Use this to display the form that users must
 * complete before accessing the event.
 */
export const eventGetQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventGetQuestionnaireFc97069fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetQuestionnaireFc97069fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}',
		...options
	});
};

/**
 * Submit Questionnaire
 *
 * Submit answers to an event admission questionnaire.
 *
 * Validates all required questions are answered. If submission status is 'ready', triggers
 * automatic evaluation (may use LLM for free-text answers). Depending on the questionnaire's
 * evaluation_mode (automatic/manual/hybrid), results may be immediate or pending staff review.
 * Passing the questionnaire may be required before you can RSVP or purchase tickets.
 */
export const eventSubmitQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventSubmitQuestionnaire2D4818D2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventSubmitQuestionnaire2D4818D2Responses,
		EventSubmitQuestionnaire2D4818D2Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}/submit',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Event Token
 *
 * Delete an event token.
 */
export const eventadminDeleteEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteEventToken63D4230cData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteEventToken63D4230cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens/{token_id}',
		...options
	});
};

/**
 * Update Event Token
 *
 * Update an event token.
 */
export const eventadminUpdateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventToken5285415bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventToken5285415bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Event Tokens
 *
 * List all event tokens.
 */
export const eventadminListEventTokens = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventTokens381Ae5C8Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventTokens381Ae5C8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options
	});
};

/**
 * Create Event Token
 *
 * Create a new event token.
 */
export const eventadminCreateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateEventToken6088Aa2eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateEventToken6088Aa2eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Invitation Requests
 *
 * List all invitation requests for an event.
 *
 * By default shows all requests. Use ?status=pending to filter by status.
 */
export const eventadminListInvitationRequests = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListInvitationRequests27D365EfData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListInvitationRequests27D365EfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-requests',
		...options
	});
};

/**
 * Approve Invitation Request
 *
 * Approve an invitation request.
 */
export const eventadminApproveInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventadminApproveInvitationRequestE9866FadData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminApproveInvitationRequestE9866FadResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-requests/{request_id}/approve',
		...options
	});
};

/**
 * Reject Invitation Request
 *
 * Reject an invitation request.
 */
export const eventadminRejectInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventadminRejectInvitationRequestB54A34EcData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminRejectInvitationRequestB54A34EcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-requests/{request_id}/reject',
		...options
	});
};

/**
 * Update Event
 *
 * Update event by ID.
 */
export const eventadminUpdateEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEvent32Ec9363Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEvent32Ec9363Responses,
		EventadminUpdateEvent32Ec9363Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Event Status
 *
 * Update event status to the specified value.
 */
export const eventadminUpdateEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventStatusAbfae6B8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUpdateEventStatusAbfae6B8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/actions/update-status/{status}',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to event.
 */
export const eventadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadLogo07C9F785Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadLogo07C9F785Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to event.
 */
export const eventadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadCoverArt5C2199C2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadCoverArt5C2199C2Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event.
 */
export const eventadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteLogoDf398925Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteLogoDf398925Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event.
 */
export const eventadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteCoverArt2730591aData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteCoverArt2730591aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminClearTags26Aa4801Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminClearTags26Aa4801Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const eventadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminAddTags70Aabfd5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<EventadminAddTags70Aabfd5Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/event-admin/{event_id}/tags',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options.headers
			}
		}
	);
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminRemoveTags98C573D5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminRemoveTags98C573D5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Ticket Tiers
 *
 * List all ticket tiers for an event.
 */
export const eventadminListTicketTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketTiersE1E271C5Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketTiersE1E271C5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tiers',
		...options
	});
};

/**
 * Create Ticket Tier
 *
 * Create a new ticket tier for an event.
 */
export const eventadminCreateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateTicketTierEef6940cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateTicketTierEef6940cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ticket Tier
 *
 * Delete a ticket tier.
 *
 * Note this might raise a 400 if ticket with this tier where already bought.
 */
export const eventadminDeleteTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteTicketTierE1Fad3F4Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteTicketTierE1Fad3F4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options
	});
};

/**
 * Update Ticket Tier
 *
 * Update a ticket tier.
 */
export const eventadminUpdateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateTicketTier1352Ae9eData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateTicketTier1352Ae9eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Tickets
 *
 * List tickets for an event with optional filters.
 *
 * Supports filtering by:
 * - status: Filter by ticket status (PENDING, ACTIVE, CANCELLED, CHECKED_IN)
 * - tier__payment_method: Filter by payment method (ONLINE, OFFLINE, AT_THE_DOOR, FREE)
 */
export const eventadminListTickets = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketsAc212310Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketsAc212310Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets',
		...options
	});
};

/**
 * Get Ticket
 *
 * Get a ticket by its ID.
 */
export const eventadminGetTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminGetTicket40Cb7BceData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminGetTicket40Cb7BceResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}',
		...options
	});
};

/**
 * Confirm Ticket Payment
 *
 * Confirm payment for a pending offline ticket and activate it.
 */
export const eventadminConfirmTicketPayment = <ThrowOnError extends boolean = false>(
	options: Options<EventadminConfirmTicketPaymentF625949aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminConfirmTicketPaymentF625949aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/confirm-payment',
		...options
	});
};

/**
 * Mark Ticket Refunded
 *
 * Mark a manual payment ticket as refunded and cancel it.
 *
 * This endpoint is for offline/at-the-door tickets only.
 * Online tickets (Stripe) are automatically managed via webhooks.
 */
export const eventadminMarkTicketRefunded = <ThrowOnError extends boolean = false>(
	options: Options<EventadminMarkTicketRefunded2Bf8F923Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminMarkTicketRefunded2Bf8F923Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/mark-refunded',
		...options
	});
};

/**
 * Cancel Ticket
 *
 * Cancel a manual payment ticket.
 *
 * This endpoint is for offline/at-the-door tickets only.
 * Online tickets (Stripe) should be refunded via Stripe Dashboard.
 */
export const eventadminCancelTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCancelTicketB6Fa6B12Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCancelTicketB6Fa6B12Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/cancel',
		...options
	});
};

/**
 * Check In Ticket
 *
 * Check in an attendee by scanning their ticket.
 */
export const eventadminCheckInTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCheckInTicketC377B71cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCheckInTicketC377B71cResponses,
		EventadminCheckInTicketC377B71cErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/check-in',
		...options
	});
};

/**
 * List Invitations
 *
 * List all invitations for registered users.
 */
export const eventadminListInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListInvitations7Cba66E2Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListInvitations7Cba66E2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options
	});
};

/**
 * Create Invitations
 *
 * Create direct invitations for users by email addresses.
 */
export const eventadminCreateInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateInvitationsAeb671CaData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateInvitationsAeb671CaResponses,
		EventadminCreateInvitationsAeb671CaErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Invitations
 *
 * List all pending invitations for unregistered users.
 */
export const eventadminListPendingInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingInvitations3F2A7E9fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingInvitations3F2A7E9fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-invitations',
		...options
	});
};

/**
 * Delete Invitation Endpoint
 *
 * Delete an invitation (registered or pending).
 */
export const eventadminDeleteInvitationEndpoint = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteInvitationEndpointCc7D561fData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteInvitationEndpointCc7D561fResponses,
		EventadminDeleteInvitationEndpointCc7D561fErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations/{invitation_type}/{invitation_id}',
		...options
	});
};

/**
 * List Rsvps
 *
 * List all RSVPs for an event.
 *
 * Shows all users who have RSVPed to the event with their status.
 * Use this to see who is attending, not attending, or maybe attending.
 * Supports filtering by status and user_id.
 */
export const eventadminListRsvps = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListRsvpsBfe3B86eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListRsvpsBfe3B86eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps',
		...options
	});
};

/**
 * Create Rsvp
 *
 * Create an RSVP on behalf of a user.
 *
 * Use this when a user contacts the organization to RSVP outside the platform
 * (e.g., via text, email, or in person).
 */
export const eventadminCreateRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateRsvpAe4C06BdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateRsvpAe4C06BdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Rsvp
 *
 * Delete an RSVP.
 *
 * Use this to remove a user's RSVP entirely from the event.
 * Note: This is different from setting status to "no" - it completely removes the RSVP record.
 */
export const eventadminDeleteRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteRsvpD38A6CddData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteRsvpD38A6CddResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps/{rsvp_id}',
		...options
	});
};

/**
 * Get Rsvp
 *
 * Get details of a specific RSVP.
 */
export const eventadminGetRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminGetRsvp4081853fData, ThrowOnError>
) => {
	return (options.client ?? client).get<EventadminGetRsvp4081853fResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps/{rsvp_id}',
		...options
	});
};

/**
 * Update Rsvp
 *
 * Update an existing RSVP.
 *
 * Use this to change a user's RSVP status when they contact you to update their response.
 */
export const eventadminUpdateRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateRsvp5Cf4943bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateRsvp5Cf4943bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps/{rsvp_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * My Permissions
 *
 * Get a user's permission map, per organization.
 */
export const permissionMyPermissions = <ThrowOnError extends boolean = false>(
	options?: Options<PermissionMyPermissionsB0E4172dData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		PermissionMyPermissionsB0E4172dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/permissions/my-permissions',
		...options
	});
};

/**
 * List Event Series
 *
 * Browse event series (recurring event collections) visible to the current user.
 *
 * Event series group related recurring events (e.g., "Monthly Tech Meetup"). Results are
 * filtered by visibility and permissions. Supports filtering by organization and text search.
 */
export const eventseriesListEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<EventseriesListEventSeries6A98Db8bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventseriesListEventSeries6A98Db8bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/',
		...options
	});
};

/**
 * Get Event Series By Slugs
 *
 * Retrieve event series details using human-readable organization and series slugs.
 *
 * Use this for clean URLs like /event-series/tech-meetup/monthly-sessions. Returns 404
 * if the series doesn't exist or you don't have permission to view it.
 */
export const eventseriesGetEventSeriesBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesBySlugs9F01E43cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesBySlugs9F01E43cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{org_slug}/{series_slug}',
		...options
	});
};

/**
 * Get Event Series
 *
 * Retrieve full event series details by ID.
 *
 * Returns series information including description, organization, and settings. Use this
 * to display the series profile page and list related events.
 */
export const eventseriesGetEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesD687F58fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesD687F58fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this event series.
 *
 * Returns documents, links, or media files that apply to all events in the series.
 * Resources may be public or restricted based on visibility settings. Supports filtering
 * by type and text search.
 */
export const eventseriesListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesListResourcesAeb552AfData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesListResourcesAeb552AfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}/resources',
		...options
	});
};

/**
 * Delete Event Series
 *
 * Permanently delete an event series (admin only).
 *
 * Removes the series. Events in the series are not deleted but become standalone.
 * Requires 'delete_event_series' permission (typically organization owners only).
 */
export const eventseriesadminDeleteEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteEventSeries20F30DcbData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteEventSeries20F30DcbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options
	});
};

/**
 * Update Event Series
 *
 * Update event series details (admin only).
 *
 * Modify series name, description, or settings. Requires 'edit_event_series' permission
 * (organization staff/owners). Changes apply to the series but not individual events.
 */
export const eventseriesadminUpdateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUpdateEventSeries017A4C99Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventseriesadminUpdateEventSeries017A4C99Responses,
		EventseriesadminUpdateEventSeries017A4C99Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Upload Logo
 *
 * Upload a logo image for the event series (admin only).
 *
 * Replaces the existing logo. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadLogoE1De4A9dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadLogoE1De4A9dResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art/banner image for the event series (admin only).
 *
 * Replaces the existing cover art. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadCoverArtC8913B2cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadCoverArtC8913B2cResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event series (admin only).
 *
 * Removes the logo image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteLogoAc497596Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteLogoAc497596Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event series (admin only).
 *
 * Removes the cover art image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteCoverArt536BccbcData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteCoverArt536BccbcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove all tags from the event series (admin only).
 *
 * Clears all categorization tags. Requires 'edit_event_series' permission.
 */
export const eventseriesadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminClearTags36D8Fd8dData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminClearTags36D8Fd8dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add tags to categorize the event series (admin only).
 *
 * Tags help users discover series through filtering and search. Returns the updated tag list.
 * Requires 'edit_event_series' permission.
 */
export const eventseriesadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminAddTags62Aa21B4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminAddTags62Aa21B4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove specific tags from the event series (admin only).
 *
 * Removes only the specified tags, keeping others. Returns the updated tag list. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminRemoveTagsBf9E4C65Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminRemoveTagsBf9E4C65Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Potluck Items
 *
 * View all potluck items for this event.
 *
 * Returns items users can bring, with flags indicating if each item is assigned and if you
 * own it. Available when event.potluck_open=true. Use this to display what's needed and
 * what you've claimed.
 */
export const potluckListPotluckItems = <ThrowOnError extends boolean = false>(
	options: Options<PotluckListPotluckItemsBa99B3BcData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		PotluckListPotluckItemsBa99B3BcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options
	});
};

/**
 * Create Potluck Item
 *
 * Add a new item to the event's potluck list.
 *
 * Specify item name, quantity, and optional notes. Attendees can claim items via
 * POST /{event_id}/potluck/{item_id}/claim. Requires permission to create potluck items.
 */
export const potluckCreatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckCreatePotluckItemF9E35522Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckCreatePotluckItemF9E35522Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Potluck Item
 *
 * Remove a potluck item from the event.
 *
 * Deletes the item even if it's been claimed. Requires permission to manage potluck items.
 */
export const potluckDeletePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckDeletePotluckItem9566283aData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		PotluckDeletePotluckItem9566283aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options
	});
};

/**
 * Update Potluck Item
 *
 * Update a potluck item's details.
 *
 * Modify item name, quantity, or notes. Requires permission to manage potluck items
 * (typically event organizers).
 */
export const potluckUpdatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUpdatePotluckItemB57030F9Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		PotluckUpdatePotluckItemB57030F9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Claim Potluck Item
 *
 * Claim a potluck item to bring to the event.
 *
 * Assigns the item to you. Returns 400 if already claimed by someone else. Use this when
 * you want to commit to bringing a specific item.
 */
export const potluckClaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckClaimPotluckItem207C16E9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckClaimPotluckItem207C16E9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/claim',
		...options
	});
};

/**
 * Unclaim Potluck Item
 *
 * Release a potluck item you previously claimed.
 *
 * Makes the item available for others to claim. Returns 404 if the item isn't claimed
 * by you.
 */
export const potluckUnclaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUnclaimPotluckItemA1F38FebData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckUnclaimPotluckItemA1F38FebResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/unclaim',
		...options
	});
};

/**
 * List Org Questionnaires
 *
 * Browse questionnaires you have permission to view or manage.
 *
 * Returns questionnaires from organizations where you have staff/owner access. Use this to
 * find questionnaires to attach to events or review submissions. Supports filtering by
 * event_id or event_series_id to find questionnaires assigned to specific events or series.
 *
 * Each questionnaire includes a count of pending evaluations (submissions with no evaluation
 * or evaluations with "pending review" status).
 */
export const questionnaireListOrgQuestionnaires = <ThrowOnError extends boolean = false>(
	options?: Options<QuestionnaireListOrgQuestionnaires31Eb8A8aData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		QuestionnaireListOrgQuestionnaires31Eb8A8aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/',
		...options
	});
};

/**
 * Create Org Questionnaire
 *
 * Create a new questionnaire for an organization (admin only).
 *
 * Creates a questionnaire with specified type (admission, membership, feedback, or generic)
 * and optional max_submission_age. After creation, add sections and questions via
 * POST /questionnaires/{id}/sections and /multiple-choice-questions endpoints. Requires
 * 'create_questionnaire' permission (organization staff/owners).
 */
export const questionnaireCreateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateOrgQuestionnaireC1B97Eb0Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateOrgQuestionnaireC1B97Eb0Responses,
		QuestionnaireCreateOrgQuestionnaireC1B97Eb0Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{organization_id}/create-questionnaire',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Org Questionnaire
 *
 * Delete an organization questionnaire (admin only).
 *
 * Permanently removes the questionnaire. Requires 'delete_questionnaire' permission.
 */
export const questionnaireDeleteOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteOrgQuestionnaire16F90370Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteOrgQuestionnaire16F90370Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Get Org Questionnaire
 *
 * Retrieve a questionnaire's details and structure (admin only).
 *
 * Returns the questionnaire with all sections, questions, and settings. Use this to view or
 * edit an existing questionnaire. Requires permission to manage the organization's questionnaires.
 */
export const questionnaireGetOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetOrgQuestionnaire29E9AdefData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetOrgQuestionnaire29E9AdefResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Update Org Questionnaire
 *
 * Update organization questionnaire and underlying questionnaire settings (admin only).
 *
 * Allows updating both OrganizationQuestionnaire wrapper fields (max_submission_age,
 * questionnaire_type) and the underlying Questionnaire fields (name, min_score, llm_guidelines,
 * shuffle_questions, shuffle_sections, evaluation_mode, can_retake_after, max_attempts).
 * Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateOrgQuestionnaire2Bd764AdData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateOrgQuestionnaire2Bd764AdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Section
 *
 * Add a section to organize questions in the questionnaire (admin only).
 *
 * Sections group related questions. Specify section name and display order. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateSection10B3909eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateSection10B3909eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Section
 *
 * Delete a questionnaire section (admin only).
 *
 * Removes the section and all questions within it. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteSection1Fb2A350Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteSection1Fb2A350Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options
	});
};

/**
 * Update Section
 *
 * Update a questionnaire section's details (admin only).
 *
 * Modify section name or display order. Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateSectionFccd25AcData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateSectionFccd25AcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Question
 *
 * Add a multiple-choice question to the questionnaire (admin only).
 *
 * Create a question with predefined answer options. After creation, add options via
 * POST /questionnaires/{id}/multiple-choice-questions/{question_id}/options. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcQuestionE54E6A21Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcQuestionE54E6A21Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Question
 *
 * Delete a multiple choice question (admin only).
 *
 * Removes the question and all its options. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcQuestion81E447F8Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcQuestion81E447F8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options
	});
};

/**
 * Update Mc Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcQuestion7Bb39B6cData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcQuestion7Bb39B6cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireCreateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcOptionE8D0F419Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcOptionE8D0F419Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}/options',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Option
 *
 * Delete a multiple choice option (admin only).
 *
 * Removes the option from a question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcOptionEf3F087fData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcOptionEf3F087fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options
	});
};

/**
 * Update Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcOption0E84Efc5Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcOption0E84Efc5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Ft Question
 *
 * Add a free-text question to the questionnaire (admin only).
 *
 * Create an open-ended question for text responses. Can be auto-evaluated by LLM based on
 * scoring criteria. Requires 'edit_questionnaire' permission.
 */
export const questionnaireCreateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateFtQuestion25F1Ae92Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateFtQuestion25F1Ae92Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ft Question
 *
 * Delete a free text question (admin only).
 *
 * Removes the question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteFtQuestion3F2A0E5dData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteFtQuestion3F2A0E5dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options
	});
};

/**
 * Update Ft Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateFtQuestion25C024B3Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateFtQuestion25C024B3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Submissions
 *
 * View user submissions for this questionnaire (admin only).
 *
 * Returns submitted questionnaires ready for review. Use this to see who has applied for
 * event access and their responses. Requires 'evaluate_questionnaire' permission.
 *
 * Filtering:
 * - evaluation_status: Filter by evaluation status (approved/rejected/pending review/no_evaluation)
 *
 * Ordering:
 * - submitted_at: Oldest submissions first
 * - -submitted_at: Newest submissions first (default)
 */
export const questionnaireListSubmissions = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireListSubmissions8C19Efb9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireListSubmissions8C19Efb9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions',
		...options
	});
};

/**
 * Get Submission Detail
 *
 * View detailed answers for a specific submission (admin only).
 *
 * Returns all questions and the user's answers, plus automatic evaluation results if available.
 * Use this to review a submission before manual approval/rejection. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireGetSubmissionDetail = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetSubmissionDetail0Be7Ba25Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetSubmissionDetail0Be7Ba25Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}',
		...options
	});
};

/**
 * Evaluate Submission
 *
 * Manually approve or reject a questionnaire submission (admin only).
 *
 * Overrides automatic evaluation or provides decision for manual-review questionnaires.
 * Approved users can then RSVP or purchase tickets for the event. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireEvaluateSubmission = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireEvaluateSubmission1A818927Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireEvaluateSubmission1A818927Responses,
		QuestionnaireEvaluateSubmission1A818927Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}/evaluate',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Questionnaire Status
 *
 * Update the status of a questionnaire (admin only).
 *
 * Changes the questionnaire status between DRAFT, READY, and PUBLISHED.
 * - DRAFT: Questionnaire is being created/edited
 * - READY: Questionnaire is complete but not yet published
 * - PUBLISHED: Questionnaire is live and can be taken by users
 *
 * Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateQuestionnaireStatus = <
	ThrowOnError extends boolean = false
>(
	options: Options<QuestionnaireUpdateQuestionnaireStatusBc53F88dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireUpdateQuestionnaireStatusBc53F88dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/status/{status}',
		...options
	});
};

/**
 * Replace Events
 *
 * Replace all assigned events for this questionnaire (admin only).
 *
 * Batch operation to set exactly which events require this questionnaire. Validates that
 * events belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEvents = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEvents6C81827bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEvents6C81827bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event
 *
 * Unassign a single event from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEvent63581AabData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEvent63581AabResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Assign Event
 *
 * Assign a single event to this questionnaire (admin only).
 *
 * Adds one event that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEventB960D17eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEventB960D17eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Replace Event Series
 *
 * Replace all assigned event series for this questionnaire (admin only).
 *
 * Batch operation to set exactly which event series require this questionnaire. Validates that
 * series belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEventSeries9D9A0511Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEventSeries9D9A0511Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event Series
 *
 * Unassign a single event series from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event series. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEventSeriesCbfe94EeData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEventSeriesCbfe94EeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Assign Event Series
 *
 * Assign a single event series to this questionnaire (admin only).
 *
 * Adds one event series that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEventSeries7D54B589Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEventSeries7D54B589Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Get General Preferences
 *
 * Get your global preferences that apply across all organizations and events.
 *
 * Returns default notification and privacy settings. These serve as defaults that can be
 * overridden at organization, series, or event level.
 */
export const userpreferencesGetGeneralPreferences = <ThrowOnError extends boolean = false>(
	options?: Options<UserpreferencesGetGeneralPreferencesCddd1C77Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		UserpreferencesGetGeneralPreferencesCddd1C77Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options
	});
};

/**
 * Update Global Preferences
 *
 * Update your global preference defaults.
 *
 * Modify notification and privacy settings. Set overwrite_children=true to cascade changes
 * to all organization/series/event-level preferences, overriding custom settings.
 */
export const userpreferencesUpdateGlobalPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateGlobalPreferences7D21A822Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateGlobalPreferences7D21A822Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Organization Preferences
 *
 * Get your preferences for a specific organization.
 *
 * Returns organization-level overrides for notifications and privacy. Falls back to global
 * preferences if not customized.
 */
export const userpreferencesGetOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetOrganizationPreferences1E3B59A8Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetOrganizationPreferences1E3B59A8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options
	});
};

/**
 * Update Organization Preferences
 *
 * Update preferences for a specific organization.
 *
 * Overrides global defaults for this organization. Set overwrite_children=true to cascade
 * changes to all series/event-level preferences within this organization.
 */
export const userpreferencesUpdateOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateOrganizationPreferencesA0B804AbData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateOrganizationPreferencesA0B804AbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Series Preferences
 *
 * Get your preferences for a specific event series.
 *
 * Returns series-level overrides for notifications. Falls back to organization or global
 * preferences if not customized.
 */
export const userpreferencesGetEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetEventSeriesPreferencesA5B4Ea65Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventSeriesPreferencesA5B4Ea65Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options
	});
};

/**
 * Update Event Series Preferences
 *
 * Update preferences for a specific event series.
 *
 * Overrides organization/global defaults for this series. Set overwrite_children=true to
 * cascade changes to all individual event preferences within this series.
 */
export const userpreferencesUpdateEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateEventSeriesPreferencesAeae321bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventSeriesPreferencesAeae321bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Preferences
 *
 * Get your preferences for a specific event.
 *
 * Returns event-level overrides for notifications. Falls back to series, organization, or
 * global preferences if not customized.
 */
export const userpreferencesGetEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesGetEventPreferences11D3Ed02Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventPreferences11D3Ed02Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options
	});
};

/**
 * Update Event Preferences
 *
 * Update preferences for a specific event.
 *
 * Overrides series/organization/global defaults for this event. The most specific preference
 * level always takes precedence.
 */
export const userpreferencesUpdateEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesUpdateEventPreferences61F378A2Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventPreferences61F378A2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Handle Webhook
 *
 * Process Stripe webhook events for payment processing.
 *
 * Handles payment confirmations, failures, and refunds. Verifies webhook signature for
 * security. This endpoint is called by Stripe, not by clients directly.
 */
export const stripewebhookHandleWebhook = <ThrowOnError extends boolean = false>(
	options?: Options<StripewebhookHandleWebhookA02871B3Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		StripewebhookHandleWebhookA02871B3Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/stripe/webhook',
		...options
	});
};

/**
 * List Tags
 *
 * Browse and search all available tags in the system.
 *
 * Tags are used to categorize organizations, events, and series. Supports autocomplete via
 * the 'search' query parameter (e.g., /api/tags/?search=tech). Use this to populate tag
 * selection dropdowns or filters. Results are ordered by popularity (most used first).
 */
export const tagListTags = <ThrowOnError extends boolean = false>(
	options?: Options<TagListTagsCa6F7E6eData, ThrowOnError>
) => {
	return (options?.client ?? client).get<TagListTagsCa6F7E6eResponses, unknown, ThrowOnError>({
		url: '/api/tags/',
		...options
	});
};

/**
 * List Cities
 *
 * Search and browse cities from the global database.
 *
 * Supports filtering by country and searching by city name. Use the 'search' parameter
 * for autocomplete functionality. Useful for setting user location preferences or
 * filtering events by location.
 */
export const cityListCities = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCities80D0C8EcData, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCities80D0C8EcResponses, unknown, ThrowOnError>({
		url: '/api/cities/',
		...options
	});
};

/**
 * List Countries
 *
 * Get a list of all countries with cities in the database.
 *
 * Returns country names for filtering cities. Use this to populate country
 * selection dropdowns in location pickers.
 */
export const cityListCountries = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCountriesCb3B06E8Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCountriesCb3B06E8Responses, unknown, ThrowOnError>(
		{
			url: '/api/cities/countries',
			...options
		}
	);
};

/**
 * Get City
 *
 * Retrieve detailed information for a specific city by ID.
 *
 * Returns city details including name, coordinates, and country. Use this to
 * get full city information after selecting from a search result.
 */
export const cityGetCity = <ThrowOnError extends boolean = false>(
	options: Options<CityGetCity78C23682Data, ThrowOnError>
) => {
	return (options.client ?? client).get<CityGetCity78C23682Responses, unknown, ThrowOnError>({
		url: '/api/cities/{city_id}',
		...options
	});
};
