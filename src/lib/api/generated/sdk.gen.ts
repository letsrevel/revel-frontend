// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	formDataBodySerializer,
	type Options as Options2,
	type TDataShape,
	urlSearchParamsBodySerializer
} from './client';
import { client } from './client.gen';
import type {
	AccountDeleteAccountConfirm152Eddb8Data,
	AccountDeleteAccountConfirm152Eddb8Responses,
	AccountDeleteAccountRequestFd5Cfe90Data,
	AccountDeleteAccountRequestFd5Cfe90Responses,
	AccountExportData7C3Fdb36Data,
	AccountExportData7C3Fdb36Responses,
	AccountMe14Fa55D7Data,
	AccountMe14Fa55D7Responses,
	AccountRegister86Dd5180Data,
	AccountRegister86Dd5180Responses,
	AccountResendVerificationEmailE5157D6fData,
	AccountResendVerificationEmailE5157D6fErrors,
	AccountResendVerificationEmailE5157D6fResponses,
	AccountResetPasswordEcef93B4Data,
	AccountResetPasswordEcef93B4Responses,
	AccountResetPasswordRequest7D5E4A96Data,
	AccountResetPasswordRequest7D5E4A96Responses,
	AccountUpdateProfile3869Ae57Data,
	AccountUpdateProfile3869Ae57Responses,
	AccountVerifyEmail9Fcc3Ee2Data,
	AccountVerifyEmail9Fcc3Ee2Responses,
	ApiApiHealthcheckData,
	ApiApiHealthcheckResponses,
	ApiApiVersionData,
	ApiApiVersionResponses,
	AuthDemoObtainToken4Ac9Ee9dData,
	AuthDemoObtainToken4Ac9Ee9dResponses,
	AuthGoogleLogin924D953dData,
	AuthGoogleLogin924D953dResponses,
	AuthObtainToken68F81816Data,
	AuthObtainToken68F81816Responses,
	AuthObtainTokenWithOtpD74252DbData,
	AuthObtainTokenWithOtpD74252DbResponses,
	CityGetCityE44Db90fData,
	CityGetCityE44Db90fResponses,
	CityListCities7Be091A3Data,
	CityListCities7Be091A3Responses,
	CityListCountries84356Df6Data,
	CityListCountries84356Df6Responses,
	DashboardDashboardEventsBdafa463Data,
	DashboardDashboardEventsBdafa463Responses,
	DashboardDashboardEventSeries201C8CdfData,
	DashboardDashboardEventSeries201C8CdfResponses,
	DashboardDashboardInvitationsC0B2A48aData,
	DashboardDashboardInvitationsC0B2A48aResponses,
	DashboardDashboardOrganizationsF38Dfa4cData,
	DashboardDashboardOrganizationsF38Dfa4cResponses,
	EventadminAddTagsB8B5797aData,
	EventadminAddTagsB8B5797aResponses,
	EventadminCheckInTicket9D130D3fData,
	EventadminCheckInTicket9D130D3fErrors,
	EventadminCheckInTicket9D130D3fResponses,
	EventadminClearTagsB22759D8Data,
	EventadminClearTagsB22759D8Responses,
	EventadminConfirmTicketPayment6277A1B9Data,
	EventadminConfirmTicketPayment6277A1B9Responses,
	EventadminCreateEventToken281C9407Data,
	EventadminCreateEventToken281C9407Responses,
	EventadminCreateInvitationsEea9B9F4Data,
	EventadminCreateInvitationsEea9B9F4Errors,
	EventadminCreateInvitationsEea9B9F4Responses,
	EventadminCreateTicketTier13802984Data,
	EventadminCreateTicketTier13802984Responses,
	EventadminDecideInvitationRequest4369D633Data,
	EventadminDecideInvitationRequest4369D633Responses,
	EventadminDeleteCoverArtAca0F5EdData,
	EventadminDeleteCoverArtAca0F5EdResponses,
	EventadminDeleteEventToken4018D66dData,
	EventadminDeleteEventToken4018D66dResponses,
	EventadminDeleteInvitationEndpoint331D013fData,
	EventadminDeleteInvitationEndpoint331D013fErrors,
	EventadminDeleteInvitationEndpoint331D013fResponses,
	EventadminDeleteLogoF4680F7eData,
	EventadminDeleteLogoF4680F7eResponses,
	EventadminDeleteTicketTier361D59C4Data,
	EventadminDeleteTicketTier361D59C4Responses,
	EventadminListEventInvitationRequests5C2E5Ad6Data,
	EventadminListEventInvitationRequests5C2E5Ad6Responses,
	EventadminListEventTokens5B46473eData,
	EventadminListEventTokens5B46473eResponses,
	EventadminListInvitations1Fa3C180Data,
	EventadminListInvitations1Fa3C180Responses,
	EventadminListPendingInvitationsBebc80F5Data,
	EventadminListPendingInvitationsBebc80F5Responses,
	EventadminListPendingTickets7F4D25CcData,
	EventadminListPendingTickets7F4D25CcResponses,
	EventadminListTicketTiers9E4Ac630Data,
	EventadminListTicketTiers9E4Ac630Responses,
	EventadminRemoveTags9393A4A4Data,
	EventadminRemoveTags9393A4A4Responses,
	EventadminUpdateEvent80B8425bData,
	EventadminUpdateEvent80B8425bErrors,
	EventadminUpdateEvent80B8425bResponses,
	EventadminUpdateEventStatus88B75B48Data,
	EventadminUpdateEventStatus88B75B48Responses,
	EventadminUpdateEventToken41A58094Data,
	EventadminUpdateEventToken41A58094Responses,
	EventadminUpdateTicketTier428D3050Data,
	EventadminUpdateTicketTier428D3050Responses,
	EventadminUploadCoverArt0C1B5Be8Data,
	EventadminUploadCoverArt0C1B5Be8Responses,
	EventadminUploadLogoCfd98A08Data,
	EventadminUploadLogoCfd98A08Responses,
	EventClaimInvitationC20Ec43cData,
	EventClaimInvitationC20Ec43cErrors,
	EventClaimInvitationC20Ec43cResponses,
	EventDeleteInvitationRequestFc483F46Data,
	EventDeleteInvitationRequestFc483F46Responses,
	EventGetEvent708Afc71Data,
	EventGetEvent708Afc71Responses,
	EventGetEventAttendeesCc5726E6Data,
	EventGetEventAttendeesCc5726E6Responses,
	EventGetEventBySlugsB7D1177cData,
	EventGetEventBySlugsB7D1177cResponses,
	EventGetMyEventStatusBa55A4DbData,
	EventGetMyEventStatusBa55A4DbResponses,
	EventGetQuestionnaire568F200eData,
	EventGetQuestionnaire568F200eResponses,
	EventListEventsFeea1A6cData,
	EventListEventsFeea1A6cResponses,
	EventListResources4D195E6dData,
	EventListResources4D195E6dResponses,
	EventListTiers6E93Af9dData,
	EventListTiers6E93Af9dResponses,
	EventListUserInvitationRequestsE6191Eb5Data,
	EventListUserInvitationRequestsE6191Eb5Responses,
	EventRequestInvitationEd55901cData,
	EventRequestInvitationEd55901cErrors,
	EventRequestInvitationEd55901cResponses,
	EventRsvpEventB923A96bData,
	EventRsvpEventB923A96bErrors,
	EventRsvpEventB923A96bResponses,
	EventseriesadminAddTags7D68C532Data,
	EventseriesadminAddTags7D68C532Responses,
	EventseriesadminClearTags71D1Dff2Data,
	EventseriesadminClearTags71D1Dff2Responses,
	EventseriesadminDeleteCoverArt7D43Fff0Data,
	EventseriesadminDeleteCoverArt7D43Fff0Responses,
	EventseriesadminDeleteEventSeries6603914fData,
	EventseriesadminDeleteEventSeries6603914fResponses,
	EventseriesadminDeleteLogoB282998aData,
	EventseriesadminDeleteLogoB282998aResponses,
	EventseriesadminRemoveTags8B33C0FcData,
	EventseriesadminRemoveTags8B33C0FcResponses,
	EventseriesadminUpdateEventSeries0D7Ab2EcData,
	EventseriesadminUpdateEventSeries0D7Ab2EcErrors,
	EventseriesadminUpdateEventSeries0D7Ab2EcResponses,
	EventseriesadminUploadCoverArtD5F1187eData,
	EventseriesadminUploadCoverArtD5F1187eResponses,
	EventseriesadminUploadLogo2233160fData,
	EventseriesadminUploadLogo2233160fResponses,
	EventseriesGetEventSeriesBf8E75B9Data,
	EventseriesGetEventSeriesBf8E75B9Responses,
	EventseriesGetEventSeriesBySlugsE82E9Cc9Data,
	EventseriesGetEventSeriesBySlugsE82E9Cc9Responses,
	EventseriesListEventSeriesBc7B93EdData,
	EventseriesListEventSeriesBc7B93EdResponses,
	EventseriesListResourcesD9499491Data,
	EventseriesListResourcesD9499491Responses,
	EventSubmitQuestionnaire105Df2D3Data,
	EventSubmitQuestionnaire105Df2D3Errors,
	EventSubmitQuestionnaire105Df2D3Responses,
	EventTicketCheckout72B30814Data,
	EventTicketCheckout72B30814Errors,
	EventTicketCheckout72B30814Responses,
	EventTicketPwycCheckout0893709aData,
	EventTicketPwycCheckout0893709aErrors,
	EventTicketPwycCheckout0893709aResponses,
	OrganizationadminAddStaff92Ef141fData,
	OrganizationadminAddStaff92Ef141fResponses,
	OrganizationadminAddTags6Cf2B076Data,
	OrganizationadminAddTags6Cf2B076Responses,
	OrganizationadminApproveMembershipRequestD29C9517Data,
	OrganizationadminApproveMembershipRequestD29C9517Responses,
	OrganizationadminClearTagsB20D8128Data,
	OrganizationadminClearTagsB20D8128Responses,
	OrganizationadminCreateEvent1A9C9EbdData,
	OrganizationadminCreateEvent1A9C9EbdErrors,
	OrganizationadminCreateEvent1A9C9EbdResponses,
	OrganizationadminCreateEventSeries53046AfdData,
	OrganizationadminCreateEventSeries53046AfdErrors,
	OrganizationadminCreateEventSeries53046AfdResponses,
	OrganizationadminCreateOrganizationTokenEd083203Data,
	OrganizationadminCreateOrganizationTokenEd083203Responses,
	OrganizationadminCreateResource761981AaData,
	OrganizationadminCreateResource761981AaResponses,
	OrganizationadminDeleteCoverArt64B20540Data,
	OrganizationadminDeleteCoverArt64B20540Responses,
	OrganizationadminDeleteLogo1E8F48DdData,
	OrganizationadminDeleteLogo1E8F48DdResponses,
	OrganizationadminDeleteOrganizationToken04469B86Data,
	OrganizationadminDeleteOrganizationToken04469B86Responses,
	OrganizationadminDeleteResource7Fcdbe1fData,
	OrganizationadminDeleteResource7Fcdbe1fResponses,
	OrganizationadminGetResourceA1Fef32cData,
	OrganizationadminGetResourceA1Fef32cResponses,
	OrganizationadminListMembers4Ad70E58Data,
	OrganizationadminListMembers4Ad70E58Responses,
	OrganizationadminListMembershipRequests3B7E946bData,
	OrganizationadminListMembershipRequests3B7E946bResponses,
	OrganizationadminListOrganizationTokens56B4Bb60Data,
	OrganizationadminListOrganizationTokens56B4Bb60Responses,
	OrganizationadminListResources45B17F80Data,
	OrganizationadminListResources45B17F80Responses,
	OrganizationadminListStaffE8678334Data,
	OrganizationadminListStaffE8678334Responses,
	OrganizationadminRejectMembershipRequest9A493034Data,
	OrganizationadminRejectMembershipRequest9A493034Responses,
	OrganizationadminRemoveMember72474B45Data,
	OrganizationadminRemoveMember72474B45Responses,
	OrganizationadminRemoveStaffC038F470Data,
	OrganizationadminRemoveStaffC038F470Responses,
	OrganizationadminRemoveTags06826584Data,
	OrganizationadminRemoveTags06826584Responses,
	OrganizationadminStripeAccountVerify14D991F9Data,
	OrganizationadminStripeAccountVerify14D991F9Responses,
	OrganizationadminStripeConnect967E01EdData,
	OrganizationadminStripeConnect967E01EdResponses,
	OrganizationadminUpdateOrganization5B7C0788Data,
	OrganizationadminUpdateOrganization5B7C0788Responses,
	OrganizationadminUpdateOrganizationTokenD7Ceeb2aData,
	OrganizationadminUpdateOrganizationTokenD7Ceeb2aResponses,
	OrganizationadminUpdateResourceE704892cData,
	OrganizationadminUpdateResourceE704892cResponses,
	OrganizationadminUpdateStaffPermissions457Ad431Data,
	OrganizationadminUpdateStaffPermissions457Ad431Responses,
	OrganizationadminUploadCoverArtB3Cdd158Data,
	OrganizationadminUploadCoverArtB3Cdd158Responses,
	OrganizationadminUploadLogo9Acfa641Data,
	OrganizationadminUploadLogo9Acfa641Responses,
	OrganizationClaimInvitationD3720612Data,
	OrganizationClaimInvitationD3720612Errors,
	OrganizationClaimInvitationD3720612Responses,
	OrganizationCreateMembershipRequest90Fb47CcData,
	OrganizationCreateMembershipRequest90Fb47CcResponses,
	OrganizationGetOrganizationA60328D6Data,
	OrganizationGetOrganizationA60328D6Responses,
	OrganizationListOrganizations2Eeace4bData,
	OrganizationListOrganizations2Eeace4bResponses,
	OrganizationListResources6A3Be82fData,
	OrganizationListResources6A3Be82fResponses,
	OtpDisableOtpC4B83548Data,
	OtpDisableOtpC4B83548Responses,
	OtpEnableOtpF15733EeData,
	OtpEnableOtpF15733EeResponses,
	OtpSetupOtp00F0291eData,
	OtpSetupOtp00F0291eResponses,
	PermissionMyPermissions3B3155EeData,
	PermissionMyPermissions3B3155EeResponses,
	PotluckClaimPotluckItemE720Dd48Data,
	PotluckClaimPotluckItemE720Dd48Responses,
	PotluckCreatePotluckItem48Ddbc22Data,
	PotluckCreatePotluckItem48Ddbc22Responses,
	PotluckDeletePotluckItem1C09F326Data,
	PotluckDeletePotluckItem1C09F326Responses,
	PotluckListPotluckItems8E9D4Db8Data,
	PotluckListPotluckItems8E9D4Db8Responses,
	PotluckUnclaimPotluckItem9774Dd77Data,
	PotluckUnclaimPotluckItem9774Dd77Responses,
	PotluckUpdatePotluckItemCd877231Data,
	PotluckUpdatePotluckItemCd877231Responses,
	QuestionnaireAssignEventA212Aec5Data,
	QuestionnaireAssignEventA212Aec5Responses,
	QuestionnaireAssignEventSeries6Ec0Fd68Data,
	QuestionnaireAssignEventSeries6Ec0Fd68Responses,
	QuestionnaireCreateFtQuestionD12BeadaData,
	QuestionnaireCreateFtQuestionD12BeadaResponses,
	QuestionnaireCreateMcOption35314CcdData,
	QuestionnaireCreateMcOption35314CcdResponses,
	QuestionnaireCreateMcQuestionA098497dData,
	QuestionnaireCreateMcQuestionA098497dResponses,
	QuestionnaireCreateOrgQuestionnaire7C3Be4CdData,
	QuestionnaireCreateOrgQuestionnaire7C3Be4CdErrors,
	QuestionnaireCreateOrgQuestionnaire7C3Be4CdResponses,
	QuestionnaireCreateSection4159FfafData,
	QuestionnaireCreateSection4159FfafResponses,
	QuestionnaireDeleteFtQuestion56104A9cData,
	QuestionnaireDeleteFtQuestion56104A9cResponses,
	QuestionnaireDeleteMcOption5Ef827FaData,
	QuestionnaireDeleteMcOption5Ef827FaResponses,
	QuestionnaireDeleteMcQuestion34Cdc6C4Data,
	QuestionnaireDeleteMcQuestion34Cdc6C4Responses,
	QuestionnaireDeleteOrgQuestionnaire6D2C7D68Data,
	QuestionnaireDeleteOrgQuestionnaire6D2C7D68Responses,
	QuestionnaireDeleteSectionA914A418Data,
	QuestionnaireDeleteSectionA914A418Responses,
	QuestionnaireEvaluateSubmission3C1A289dData,
	QuestionnaireEvaluateSubmission3C1A289dErrors,
	QuestionnaireEvaluateSubmission3C1A289dResponses,
	QuestionnaireGetOrgQuestionnaire0708436dData,
	QuestionnaireGetOrgQuestionnaire0708436dResponses,
	QuestionnaireGetSubmissionDetail74415A65Data,
	QuestionnaireGetSubmissionDetail74415A65Responses,
	QuestionnaireListOrgQuestionnaires6A001De6Data,
	QuestionnaireListOrgQuestionnaires6A001De6Responses,
	QuestionnaireListSubmissions0F2B8C27Data,
	QuestionnaireListSubmissions0F2B8C27Responses,
	QuestionnaireReplaceEvents82Deac69Data,
	QuestionnaireReplaceEvents82Deac69Responses,
	QuestionnaireReplaceEventSeriesD19Ac6EaData,
	QuestionnaireReplaceEventSeriesD19Ac6EaResponses,
	QuestionnaireUnassignEvent692F411cData,
	QuestionnaireUnassignEvent692F411cResponses,
	QuestionnaireUnassignEventSeries82227759Data,
	QuestionnaireUnassignEventSeries82227759Responses,
	QuestionnaireUpdateFtQuestionBf717B44Data,
	QuestionnaireUpdateFtQuestionBf717B44Responses,
	QuestionnaireUpdateMcOptionC7Fa011dData,
	QuestionnaireUpdateMcOptionC7Fa011dResponses,
	QuestionnaireUpdateMcQuestion388A993aData,
	QuestionnaireUpdateMcQuestion388A993aResponses,
	QuestionnaireUpdateOrgQuestionnaire75B50052Data,
	QuestionnaireUpdateOrgQuestionnaire75B50052Responses,
	QuestionnaireUpdateSectionD2415D4dData,
	QuestionnaireUpdateSectionD2415D4dResponses,
	StripewebhookHandleWebhookF6258A88Data,
	StripewebhookHandleWebhookF6258A88Responses,
	TagListTags97E6F449Data,
	TagListTags97E6F449Responses,
	TokenRefreshData,
	TokenRefreshResponses,
	UserpreferencesGetEventPreferences69Cc8101Data,
	UserpreferencesGetEventPreferences69Cc8101Responses,
	UserpreferencesGetEventSeriesPreferencesBf83Daa1Data,
	UserpreferencesGetEventSeriesPreferencesBf83Daa1Responses,
	UserpreferencesGetGeneralPreferences57610495Data,
	UserpreferencesGetGeneralPreferences57610495Responses,
	UserpreferencesGetOrganizationPreferences0Facaf0dData,
	UserpreferencesGetOrganizationPreferences0Facaf0dResponses,
	UserpreferencesUpdateEventPreferencesBbe1C8E6Data,
	UserpreferencesUpdateEventPreferencesBbe1C8E6Responses,
	UserpreferencesUpdateEventSeriesPreferencesF085616dData,
	UserpreferencesUpdateEventSeriesPreferencesF085616dResponses,
	UserpreferencesUpdateGlobalPreferences74A7D1CcData,
	UserpreferencesUpdateGlobalPreferences74A7D1CcResponses,
	UserpreferencesUpdateOrganizationPreferences54915373Data,
	UserpreferencesUpdateOrganizationPreferences54915373Responses
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Version
 *
 * Get the API version.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiVersion = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiVersionData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiVersionResponses, unknown, ThrowOnError>({
		url: '/api/version',
		...options
	});
};

/**
 * Healthcheck
 *
 * Check the health of the API.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiHealthcheck = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiHealthcheckData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiHealthcheckResponses, unknown, ThrowOnError>({
		url: '/api/healthcheck',
		...options
	});
};

/**
 * Obtain Token
 *
 * Authenticate with email and password to obtain JWT access/refresh tokens.
 *
 * For users without 2FA: Returns standard JWT token pair for immediate access.
 * For users with TOTP enabled: Returns a temporary token that must be exchanged for
 * a full token pair via POST /auth/token/pair/otp along with the TOTP code.
 * Users registered via Google SSO must use POST /auth/google/login instead.
 */
export const authObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainToken68F81816Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthObtainToken68F81816Responses, unknown, ThrowOnError>({
		url: '/api/auth/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Refresh Token
 */
export const tokenRefresh = <ThrowOnError extends boolean = false>(
	options: Options<TokenRefreshData, ThrowOnError>
) => {
	return (options.client ?? client).post<TokenRefreshResponses, unknown, ThrowOnError>({
		url: '/api/auth/refresh',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Demo Obtain Token
 *
 * Create and authenticate a demo user account (demo mode only).
 *
 * Automatically creates a user account with the provided credentials if it doesn't exist,
 * then returns JWT tokens. Only available when DEMO_MODE is enabled in settings.
 * Email must end with @example.com.
 */
export const authDemoObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthDemoObtainToken4Ac9Ee9dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthDemoObtainToken4Ac9Ee9dResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/demo/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Obtain Token With Otp
 *
 * Complete 2FA authentication by exchanging temporary token and TOTP code for JWT tokens.
 *
 * Call this after POST /auth/token/pair returns a temporary token for a 2FA-enabled user.
 * Validates the TOTP code from the user's authenticator app and returns a standard JWT token
 * pair on success. Returns 401 if the TOTP code is invalid.
 */
export const authObtainTokenWithOtp = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainTokenWithOtpD74252DbData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthObtainTokenWithOtpD74252DbResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/token/pair/otp',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Google Login
 *
 * Authenticate or register via Google SSO using a Google ID token.
 *
 * Verifies the Google ID token, creates a new user if needed, and returns JWT tokens.
 * For existing Google SSO users, this is the only valid login method - they cannot
 * use password-based authentication.
 */
export const authGoogleLogin = <ThrowOnError extends boolean = false>(
	options: Options<AuthGoogleLogin924D953dData, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthGoogleLogin924D953dResponses, unknown, ThrowOnError>({
		url: '/api/auth/google/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Setup Otp
 *
 * Get the TOTP provisioning URI to configure an authenticator app.
 *
 * Returns a URI (often as QR code) to scan with authenticator apps like Google Authenticator
 * or Authy. Returns 400 if 2FA is already enabled. After scanning, verify the setup with
 * POST /otp/verify to activate 2FA.
 */
export const otpSetupOtp = <ThrowOnError extends boolean = false>(
	options?: Options<OtpSetupOtp00F0291eData, ThrowOnError>
) => {
	return (options?.client ?? client).get<OtpSetupOtp00F0291eResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/setup',
		...options
	});
};

/**
 * Enable Otp
 *
 * Activate 2FA by verifying the TOTP code from the authenticator app.
 *
 * Call this after GET /otp/setup with a code from your authenticator app to confirm
 * it's configured correctly. On success, activates 2FA for the account. Future logins
 * will require the TOTP code via POST /auth/token/pair/otp. Returns 403 if code is invalid.
 */
export const otpEnableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpEnableOtpF15733EeData, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpEnableOtpF15733EeResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Disable Otp
 *
 * Deactivate 2FA after verifying the current TOTP code.
 *
 * Requires the current TOTP code to prevent unauthorized disabling. After disabling,
 * login will only require email and password via POST /auth/token/pair. Returns 403
 * if the TOTP code is invalid.
 */
export const otpDisableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpDisableOtpC4B83548Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpDisableOtpC4B83548Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/disable',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Export Data
 *
 * Request a GDPR-compliant export of all personal data.
 *
 * Initiates an asynchronous export of all user data including profile, events, tickets,
 * and submissions. The export will be emailed to the user when ready. Rate-limited to
 * prevent abuse.
 */
export const accountExportData = <ThrowOnError extends boolean = false>(
	options?: Options<AccountExportData7C3Fdb36Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountExportData7C3Fdb36Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/export-data',
		...options
	});
};

/**
 * Me
 *
 * Retrieve the authenticated user's profile information.
 *
 * Returns complete user profile including email, name, location preferences, and 2FA status.
 * Use this to display user info in the UI or verify authentication status.
 */
export const accountMe = <ThrowOnError extends boolean = false>(
	options?: Options<AccountMe14Fa55D7Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<AccountMe14Fa55D7Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options
	});
};

/**
 * Update Profile
 *
 * Update the authenticated user's profile information.
 *
 * Allows updating name, location preferences, and other profile fields. Only provided
 * fields are updated. Returns the updated user profile.
 */
export const accountUpdateProfile = <ThrowOnError extends boolean = false>(
	options: Options<AccountUpdateProfile3869Ae57Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		AccountUpdateProfile3869Ae57Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Register
 *
 * Create a new user account with email and password.
 *
 * Creates a new account and sends a verification email. The account is created but not
 * fully active until email is verified via POST /account/verify. If an unverified account
 * with the same email exists, resends the verification email. Returns 400 if a verified
 * account already exists.
 */
export const accountRegister = <ThrowOnError extends boolean = false>(
	options: Options<AccountRegister86Dd5180Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AccountRegister86Dd5180Responses, unknown, ThrowOnError>({
		url: '/api/account/register',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Verify Email
 *
 * Verify email address using the token from the verification email.
 *
 * Call this with the token received via email after registration. On success, activates
 * the account and returns the verified user profile along with JWT tokens for immediate login.
 * The verification token is single-use and expires after a set period.
 */
export const accountVerifyEmail = <ThrowOnError extends boolean = false>(
	options: Options<AccountVerifyEmail9Fcc3Ee2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountVerifyEmail9Fcc3Ee2Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Resend Verification Email
 *
 * Resend the email verification link to the authenticated user.
 *
 * Use this if the original verification email was lost or expired. Returns 400 if the
 * email is already verified. Requires authentication with the unverified account's JWT.
 */
export const accountResendVerificationEmail = <ThrowOnError extends boolean = false>(
	options?: Options<AccountResendVerificationEmailE5157D6fData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountResendVerificationEmailE5157D6fResponses,
		AccountResendVerificationEmailE5157D6fErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/verify-resend',
		...options
	});
};

/**
 * Delete Account Request
 *
 * Initiate GDPR-compliant account deletion by sending confirmation email.
 *
 * Sends an email with a deletion confirmation link. The account is not deleted until
 * the user confirms via POST /account/delete-confirm with the token from the email.
 * This two-step process prevents accidental deletions.
 */
export const accountDeleteAccountRequest = <ThrowOnError extends boolean = false>(
	options?: Options<AccountDeleteAccountRequestFd5Cfe90Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountDeleteAccountRequestFd5Cfe90Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/delete-request',
		...options
	});
};

/**
 * Delete Account Confirm
 *
 * Permanently delete the account using the confirmation token from email.
 *
 * Call this with the token received via email after POST /account/delete-request.
 * This action is irreversible and deletes all user data. The deletion token is
 * single-use and expires after a set period.
 */
export const accountDeleteAccountConfirm = <ThrowOnError extends boolean = false>(
	options: Options<AccountDeleteAccountConfirm152Eddb8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountDeleteAccountConfirm152Eddb8Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/delete-confirm',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password Request
 *
 * Request a password reset by email.
 *
 * Sends a password reset link to the provided email if an account exists. Always returns
 * a success message to prevent user enumeration attacks. Google SSO users cannot use this
 * endpoint. After receiving the email, use POST /account/password/reset with the token.
 */
export const accountResetPasswordRequest = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordRequest7D5E4A96Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordRequest7D5E4A96Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset-request',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password
 *
 * Reset password using the token from the password reset email.
 *
 * Call this with the token received via email after POST /account/password/reset-request.
 * The new password must meet security requirements. The reset token is single-use and
 * expires after a set period. After reset, the user must login again with the new password.
 */
export const accountResetPassword = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordEcef93B4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordEcef93B4Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Dashboard Organizations
 *
 * View organizations for your dashboard filtered by your relationship to them.
 *
 * Filter by: organizations you own, are staff of, are a member of, or have pending requests to.
 * Shows only organizations you have permission to view. Use this to display "My Organizations"
 * sections in the UI.
 */
export const dashboardDashboardOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardOrganizationsF38Dfa4cData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardOrganizationsF38Dfa4cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/organizations',
		...options
	});
};

/**
 * Dashboard Events
 *
 * View upcoming events for your dashboard filtered by your relationship to them.
 *
 * Filter by: events you're organizing, attending (RSVP'd or have tickets), invited to, or have
 * requested invitations to. Only shows future events you have permission to view. Use this to
 * display "My Events" sections in the UI.
 */
export const dashboardDashboardEvents = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventsBdafa463Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventsBdafa463Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/events',
		...options
	});
};

/**
 * Dashboard Event Series
 *
 * View event series for your dashboard filtered by your relationship to them.
 *
 * Filter by: series you're organizing or series you're attending events in. Shows only
 * series you have permission to view. Use this to display "My Series" sections in the UI.
 */
export const dashboardDashboardEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventSeries201C8CdfData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventSeries201C8CdfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/event_series',
		...options
	});
};

/**
 * Dashboard Invitations
 *
 * View your pending event invitations.
 *
 * Returns invitations you've received but not yet acted on, sorted by event date (soonest first).
 * Use this to display a "Pending Invitations" section prompting users to RSVP or purchase tickets.
 */
export const dashboardDashboardInvitations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardInvitationsC0B2A48aData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardInvitationsC0B2A48aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/invitations',
		...options
	});
};

/**
 * List Organizations
 *
 * Browse and search organizations visible to the current user.
 *
 * Results are filtered by visibility settings and user memberships. By default orders by
 * 'distance' (nearest first based on user location). Can also sort alphabetically by 'name'
 * or reverse with '-name'. Supports text search and filtering.
 */
export const organizationListOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<OrganizationListOrganizations2Eeace4bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		OrganizationListOrganizations2Eeace4bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/',
		...options
	});
};

/**
 * Get Organization
 *
 * Retrieve organization details using its unique slug.
 *
 * Returns full organization information including description, location, member count, and
 * settings. Use this to display the organization profile page.
 */
export const organizationGetOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationGetOrganizationA60328D6Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationGetOrganizationA60328D6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this organization and marked for display on organization page.
 *
 * Returns documents, links, or media files provided by organization admins. Resources may
 * be public or restricted to members only. Supports filtering by type and text search.
 */
export const organizationListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationListResources6A3Be82fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationListResources6A3Be82fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/resources',
		...options
	});
};

/**
 * Create Membership Request
 *
 * Submit a request to become a member of this organization.
 *
 * Creates a membership request that organization admins can approve or reject. Being a
 * member may be required to access certain members-only events. Returns the created
 * request for tracking status.
 */
export const organizationCreateMembershipRequest = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationCreateMembershipRequest90Fb47CcData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationCreateMembershipRequest90Fb47CcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/membership-requests',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an organization membership invitation using a token from invitation link.
 *
 * Creates an OrganizationMember record, granting you member status. Members may have
 * access to members-only events and resources. Returns the organization on success,
 * or 400 if the token is invalid/expired.
 */
export const organizationClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationClaimInvitationD3720612Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationClaimInvitationD3720612Responses,
		OrganizationClaimInvitationD3720612Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/claim-invitation/{token}',
		...options
	});
};

/**
 * Update Organization
 *
 * Update organization by slug.
 */
export const organizationadminUpdateOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateOrganization5B7C0788Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganization5B7C0788Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Stripe Connect
 *
 * Get a link to onboard the organization to Stripe.
 */
export const organizationadminStripeConnect = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeConnect967E01EdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeConnect967E01EdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/connect',
		...options
	});
};

/**
 * Stripe Account Verify
 *
 * Get the organization's Stripe account status.
 */
export const organizationadminStripeAccountVerify = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeAccountVerify14D991F9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeAccountVerify14D991F9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/account/verify',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to organization.
 */
export const organizationadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadLogo9Acfa641Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadLogo9Acfa641Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to organization.
 */
export const organizationadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadCoverArtB3Cdd158Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadCoverArtB3Cdd158Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from organization.
 */
export const organizationadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteLogo1E8F48DdData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteLogo1E8F48DdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from organization.
 */
export const organizationadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteCoverArt64B20540Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteCoverArt64B20540Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-cover-art',
		...options
	});
};

/**
 * Create Event Series
 *
 * Create a new event series.
 */
export const organizationadminCreateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEventSeries53046AfdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEventSeries53046AfdResponses,
		OrganizationadminCreateEventSeries53046AfdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Event
 *
 * Create a new event.
 */
export const organizationadminCreateEvent = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEvent1A9C9EbdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEvent1A9C9EbdResponses,
		OrganizationadminCreateEvent1A9C9EbdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Organization Tokens
 *
 * List all tokens for an organization that the user has admin rights for.
 */
export const organizationadminListOrganizationTokens = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListOrganizationTokens56B4Bb60Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListOrganizationTokens56B4Bb60Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens',
		...options
	});
};

/**
 * Create Organization Token
 *
 * Create a new token for an organization.
 */
export const organizationadminCreateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminCreateOrganizationTokenEd083203Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateOrganizationTokenEd083203Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Organization Token
 *
 * Delete an organization token.
 */
export const organizationadminDeleteOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminDeleteOrganizationToken04469B86Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteOrganizationToken04469B86Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options
	});
};

/**
 * Update Organization Token
 *
 * Update an organization token.
 */
export const organizationadminUpdateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateOrganizationTokenD7Ceeb2aData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationTokenD7Ceeb2aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Membership Requests
 *
 * List all membership requests for an organization.
 */
export const organizationadminListMembershipRequests = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListMembershipRequests3B7E946bData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembershipRequests3B7E946bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests',
		...options
	});
};

/**
 * Approve Membership Request
 *
 * Approve a membership request.
 */
export const organizationadminApproveMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminApproveMembershipRequestD29C9517Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminApproveMembershipRequestD29C9517Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/approve',
		...options
	});
};

/**
 * Reject Membership Request
 *
 * Reject a membership request.
 */
export const organizationadminRejectMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminRejectMembershipRequest9A493034Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRejectMembershipRequest9A493034Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/reject',
		...options
	});
};

/**
 * List Resources
 *
 * List all resources for a specific organization.
 */
export const organizationadminListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListResources45B17F80Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListResources45B17F80Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options
	});
};

/**
 * Create Resource
 *
 * Create a new resource for the organization.
 *
 * Accepts multipart/form-data with individual form fields for each schema property.
 * For FILE type resources, include the file parameter.
 */
export const organizationadminCreateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateResource761981AaData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateResource761981AaResponses,
		unknown,
		ThrowOnError
	>({
		...urlSearchParamsBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options,
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded',
			...options.headers
		}
	});
};

/**
 * Delete Resource
 *
 * Delete a resource from the organization.
 */
export const organizationadminDeleteResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteResource7Fcdbe1fData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteResource7Fcdbe1fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Get Resource
 *
 * Retrieve a specific resource for the organization.
 */
export const organizationadminGetResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetResourceA1Fef32cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetResourceA1Fef32cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Update Resource
 *
 * Update a resource for the organization.
 */
export const organizationadminUpdateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateResourceE704892cData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateResourceE704892cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Members
 *
 * List all members of an organization.
 */
export const organizationadminListMembers = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListMembers4Ad70E58Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembers4Ad70E58Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members',
		...options
	});
};

/**
 * Remove Member
 *
 * Remove a member from an organization.
 */
export const organizationadminRemoveMember = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveMember72474B45Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveMember72474B45Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members/{user_id}',
		...options
	});
};

/**
 * List Staff
 *
 * List all staff of an organization.
 */
export const organizationadminListStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListStaffE8678334Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListStaffE8678334Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff',
		...options
	});
};

/**
 * Remove Staff
 *
 * Remove a staff member from an organization.
 */
export const organizationadminRemoveStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveStaffC038F470Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveStaffC038F470Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options
	});
};

/**
 * Add Staff
 *
 * Add a staff member to an organization.
 */
export const organizationadminAddStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddStaff92Ef141fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddStaff92Ef141fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Staff Permissions
 *
 * Update a staff member's permissions.
 */
export const organizationadminUpdateStaffPermissions = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateStaffPermissions457Ad431Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateStaffPermissions457Ad431Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}/permissions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Clear akk tags from the organization.
 */
export const organizationadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminClearTagsB20D8128Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminClearTagsB20D8128Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const organizationadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddTags6Cf2B076Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddTags6Cf2B076Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const organizationadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveTags06826584Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRemoveTags06826584Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Events
 *
 * Browse and search events visible to the current user.
 *
 * Results are filtered by visibility rules (public/private), event status, and user permissions.
 * By default shows only upcoming events; set include_past=true to see past events.
 * Ordering: 'distance' (default) shows nearest events based on user location, 'start' shows
 * soonest first, '-start' shows latest first. Supports filtering by organization, series,
 * tags, and text search.
 */
export const eventListEvents = <ThrowOnError extends boolean = false>(
	options?: Options<EventListEventsFeea1A6cData, ThrowOnError>
) => {
	return (options?.client ?? client).get<EventListEventsFeea1A6cResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an event invitation using a token from an invitation link or email.
 *
 * Creates an EventInvitation record for the user, granting access to the event.
 * Invitations can bypass certain eligibility requirements like membership, capacity limits,
 * and RSVP deadlines. Returns the event on success, or 400 if the token is invalid/expired.
 */
export const eventClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventClaimInvitationC20Ec43cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventClaimInvitationC20Ec43cResponses,
		EventClaimInvitationC20Ec43cErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Event Attendees
 *
 * Get the list of confirmed attendees for this event.
 *
 * Returns users who have RSVPed 'yes' or have active tickets. Visibility is controlled by
 * event settings - attendee lists may be hidden from regular attendees. Organization staff
 * and event creators always have access.
 */
export const eventGetEventAttendees = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventAttendeesCc5726E6Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventAttendeesCc5726E6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/attendee-list',
		...options
	});
};

/**
 * Get My Event Status
 *
 * Check the authenticated user's current status and eligibility for an event.
 *
 * Returns either the user's RSVP/ticket status if they've already joined, or an eligibility
 * check result explaining what steps are needed to attend. The eligibility check validates:
 * event status, RSVP deadline, invitations, organization membership, required questionnaires,
 * capacity limits, and ticket availability. Use this to determine which action to show users
 * (RSVP button, buy ticket, fill questionnaire, etc.).
 */
export const eventGetMyEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventGetMyEventStatusBa55A4DbData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetMyEventStatusBa55A4DbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/my-status',
		...options
	});
};

/**
 * Request Invitation
 *
 * Submit a request to be invited to a private or invite-only event.
 *
 * Creates an invitation request that event organizers can approve or reject. Include an
 * optional message explaining why you want to attend. Returns 400 if you've already
 * submitted a request for this event. Check GET /{event_id}/my-status to see if you
 * need an invitation.
 */
export const eventRequestInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventRequestInvitationEd55901cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRequestInvitationEd55901cResponses,
		EventRequestInvitationEd55901cErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/request-invitation',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Resources
 *
 * Get supplementary resources attached to this event.
 *
 * Returns resources like documents, links, or media files provided by event organizers.
 * Resources may be public or restricted to attendees only. Supports filtering by type
 * (file, link, etc.) and text search.
 */
export const eventListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventListResources4D195E6dData, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListResources4D195E6dResponses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/events/{event_id}/resources',
			...options
		}
	);
};

/**
 * Delete Invitation Request
 *
 * Cancel a pending invitation request.
 *
 * Withdraws your invitation request for an event. Only works for your own requests
 * that haven't been decided yet. Returns 404 if the request doesn't exist or doesn't
 * belong to you.
 */
export const eventDeleteInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventDeleteInvitationRequestFc483F46Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventDeleteInvitationRequestFc483F46Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/invitation-request/{request_id}',
		...options
	});
};

/**
 * List User Invitation Requests
 *
 * View your invitation requests across all events.
 *
 * Returns your invitation requests with their current status (pending/approved/rejected).
 * Filter by event_id to see requests for a specific event, or by status to see approved/
 * rejected requests. Use this to track which events you've requested access to.
 */
export const eventListUserInvitationRequests = <ThrowOnError extends boolean = false>(
	options?: Options<EventListUserInvitationRequestsE6191Eb5Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventListUserInvitationRequestsE6191Eb5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/me/pending_invitation_requests',
		...options
	});
};

/**
 * Get Event By Slugs
 *
 * Retrieve event details using human-readable organization and event slugs.
 *
 * Use this for clean URLs like /events/tech-meetup/monthly-session. Returns 404 if
 * the event doesn't exist or you don't have permission to view it.
 */
export const eventGetEventBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventBySlugsB7D1177cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventBySlugsB7D1177cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{org_slug}/{event_slug}',
		...options
	});
};

/**
 * Get Event
 *
 * Retrieve full event details by ID.
 *
 * Returns comprehensive event information including description, location, times, organization,
 * ticket tiers, and visibility settings. Use this to display the event detail page.
 */
export const eventGetEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEvent708Afc71Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventGetEvent708Afc71Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}',
		...options
	});
};

/**
 * Rsvp Event
 *
 * RSVP to a non-ticketed event (answer: 'yes', 'no', or 'maybe').
 *
 * Only works for events where requires_ticket=false. Runs full eligibility check including
 * event status, RSVP deadline, invitations, membership requirements, required questionnaires,
 * and capacity limits. Returns RSVP record on success. On failure, returns eligibility details
 * explaining what's blocking you and what next_step to take (e.g., complete questionnaire,
 * request invitation).
 */
export const eventRsvpEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventRsvpEventB923A96bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRsvpEventB923A96bResponses,
		EventRsvpEventB923A96bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/rsvp/{answer}',
		...options
	});
};

/**
 * List Tiers
 *
 * Get all ticket tiers available for purchase at this event.
 *
 * Returns ticket types with pricing, availability, and sales windows. Filters tiers based
 * on user eligibility - you'll only see tiers you're allowed to purchase. Check visibility
 * settings and sales_start_at/sales_end_at to determine which are currently on sale.
 */
export const eventListTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventListTiers6E93Af9dData, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListTiers6E93Af9dResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/tiers',
		...options
	});
};

/**
 * Ticket Checkout
 *
 * Purchase a fixed-price event ticket.
 *
 * Runs eligibility checks before allowing purchase. For online payment: returns Stripe
 * checkout URL to redirect user for payment. For free/offline/at-the-door tickets: creates
 * ticket immediately and returns it. Cannot be used for pay-what-you-can (PWYC) tiers -
 * use POST /{event_id}/tickets/{tier_id}/checkout/pwyc instead. On eligibility failure,
 * returns 400 with eligibility details explaining what's blocking you and what next_step
 * to take (e.g., complete questionnaire, request invitation, wait for tickets to go on sale).
 */
export const eventTicketCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketCheckout72B30814Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketCheckout72B30814Responses,
		EventTicketCheckout72B30814Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout',
		...options
	});
};

/**
 * Ticket Pwyc Checkout
 *
 * Purchase a pay-what-you-can (PWYC) ticket with a user-specified amount.
 *
 * Only works for ticket tiers with price_type=PWYC. Validates the amount is within the
 * tier's min/max bounds. Returns Stripe checkout URL for online payment, or creates ticket
 * immediately for free/offline payment methods. Returns 400 for non-PWYC tiers, if amount
 * is out of bounds, or on eligibility failure (with eligibility details explaining what's
 * blocking you and what next_step to take).
 */
export const eventTicketPwycCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketPwycCheckout0893709aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketPwycCheckout0893709aResponses,
		EventTicketPwycCheckout0893709aErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout/pwyc',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Questionnaire
 *
 * Retrieve a questionnaire required for event admission.
 *
 * Returns the questionnaire structure with all sections and questions. Questions may be
 * shuffled based on questionnaire settings. Use this to display the form that users must
 * complete before accessing the event.
 */
export const eventGetQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventGetQuestionnaire568F200eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetQuestionnaire568F200eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}',
		...options
	});
};

/**
 * Submit Questionnaire
 *
 * Submit answers to an event admission questionnaire.
 *
 * Validates all required questions are answered. If submission status is 'ready', triggers
 * automatic evaluation (may use LLM for free-text answers). Depending on the questionnaire's
 * evaluation_mode (automatic/manual/hybrid), results may be immediate or pending staff review.
 * Passing the questionnaire may be required before you can RSVP or purchase tickets.
 */
export const eventSubmitQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventSubmitQuestionnaire105Df2D3Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventSubmitQuestionnaire105Df2D3Responses,
		EventSubmitQuestionnaire105Df2D3Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}/submit',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Event Token
 *
 * Delete an event token.
 */
export const eventadminDeleteEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteEventToken4018D66dData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteEventToken4018D66dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options
	});
};

/**
 * Update Event Token
 *
 * Update an event token.
 */
export const eventadminUpdateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventToken41A58094Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventToken41A58094Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Event Tokens
 *
 * List all event tokens.
 */
export const eventadminListEventTokens = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventTokens5B46473eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventTokens5B46473eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options
	});
};

/**
 * Create Event Token
 *
 * Create a new event token.
 */
export const eventadminCreateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateEventToken281C9407Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateEventToken281C9407Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Decide Invitation Request
 *
 * Request an invitation to an event.
 */
export const eventadminDecideInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDecideInvitationRequest4369D633Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminDecideInvitationRequest4369D633Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-request/{request_id}/{decision}',
		...options
	});
};

/**
 * List Event Invitation Requests
 *
 * List all pending invitation requests for the current user.
 */
export const eventadminListEventInvitationRequests = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventInvitationRequests5C2E5Ad6Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventInvitationRequests5C2E5Ad6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation_requests',
		...options
	});
};

/**
 * Update Event
 *
 * Update event by ID.
 */
export const eventadminUpdateEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEvent80B8425bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEvent80B8425bResponses,
		EventadminUpdateEvent80B8425bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Event Status
 *
 * Update event status to the specified value.
 */
export const eventadminUpdateEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventStatus88B75B48Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUpdateEventStatus88B75B48Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/actions/update-status/{status}',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to event.
 */
export const eventadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadLogoCfd98A08Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadLogoCfd98A08Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to event.
 */
export const eventadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadCoverArt0C1B5Be8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadCoverArt0C1B5Be8Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event.
 */
export const eventadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteLogoF4680F7eData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteLogoF4680F7eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event.
 */
export const eventadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteCoverArtAca0F5EdData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteCoverArtAca0F5EdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminClearTagsB22759D8Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminClearTagsB22759D8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const eventadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminAddTagsB8B5797aData, ThrowOnError>
) => {
	return (options.client ?? client).post<EventadminAddTagsB8B5797aResponses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/event-admin/{event_id}/tags',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options.headers
			}
		}
	);
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminRemoveTags9393A4A4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminRemoveTags9393A4A4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Ticket Tiers
 *
 * List all ticket tiers for an event.
 */
export const eventadminListTicketTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketTiers9E4Ac630Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketTiers9E4Ac630Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tiers',
		...options
	});
};

/**
 * Create Ticket Tier
 *
 * Create a new ticket tier for an event.
 */
export const eventadminCreateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateTicketTier13802984Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateTicketTier13802984Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ticket Tier
 *
 * Delete a ticket tier.
 *
 * Note this might raise a 400 if ticket with this tier where already bought.
 */
export const eventadminDeleteTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteTicketTier361D59C4Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteTicketTier361D59C4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options
	});
};

/**
 * Update Ticket Tier
 *
 * Update a ticket tier.
 */
export const eventadminUpdateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateTicketTier428D3050Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateTicketTier428D3050Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Tickets
 *
 * List all pending tickets for offline and at-the-door payment methods.
 */
export const eventadminListPendingTickets = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingTickets7F4D25CcData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingTickets7F4D25CcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-tickets',
		...options
	});
};

/**
 * Confirm Ticket Payment
 *
 * Confirm payment for a pending offline ticket and activate it.
 */
export const eventadminConfirmTicketPayment = <ThrowOnError extends boolean = false>(
	options: Options<EventadminConfirmTicketPayment6277A1B9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminConfirmTicketPayment6277A1B9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/confirm-payment',
		...options
	});
};

/**
 * Check In Ticket
 *
 * Check in an attendee by scanning their ticket.
 */
export const eventadminCheckInTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCheckInTicket9D130D3fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCheckInTicket9D130D3fResponses,
		EventadminCheckInTicket9D130D3fErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/check-in',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Invitations
 *
 * List all invitations for registered users.
 */
export const eventadminListInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListInvitations1Fa3C180Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListInvitations1Fa3C180Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options
	});
};

/**
 * Create Invitations
 *
 * Create direct invitations for users by email addresses.
 */
export const eventadminCreateInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateInvitationsEea9B9F4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateInvitationsEea9B9F4Responses,
		EventadminCreateInvitationsEea9B9F4Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Invitations
 *
 * List all pending invitations for unregistered users.
 */
export const eventadminListPendingInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingInvitationsBebc80F5Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingInvitationsBebc80F5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-invitations',
		...options
	});
};

/**
 * Delete Invitation Endpoint
 *
 * Delete an invitation (registered or pending).
 */
export const eventadminDeleteInvitationEndpoint = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteInvitationEndpoint331D013fData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteInvitationEndpoint331D013fResponses,
		EventadminDeleteInvitationEndpoint331D013fErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations/{invitation_type}/{invitation_id}',
		...options
	});
};

/**
 * My Permissions
 *
 * Get a user's permission map, per organization.
 */
export const permissionMyPermissions = <ThrowOnError extends boolean = false>(
	options?: Options<PermissionMyPermissions3B3155EeData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		PermissionMyPermissions3B3155EeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/permissions/my-permissions',
		...options
	});
};

/**
 * List Event Series
 *
 * Browse event series (recurring event collections) visible to the current user.
 *
 * Event series group related recurring events (e.g., "Monthly Tech Meetup"). Results are
 * filtered by visibility and permissions. Supports filtering by organization and text search.
 */
export const eventseriesListEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<EventseriesListEventSeriesBc7B93EdData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventseriesListEventSeriesBc7B93EdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/',
		...options
	});
};

/**
 * Get Event Series By Slugs
 *
 * Retrieve event series details using human-readable organization and series slugs.
 *
 * Use this for clean URLs like /event-series/tech-meetup/monthly-sessions. Returns 404
 * if the series doesn't exist or you don't have permission to view it.
 */
export const eventseriesGetEventSeriesBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesBySlugsE82E9Cc9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesBySlugsE82E9Cc9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{org_slug}/{series_slug}',
		...options
	});
};

/**
 * Get Event Series
 *
 * Retrieve full event series details by ID.
 *
 * Returns series information including description, organization, and settings. Use this
 * to display the series profile page and list related events.
 */
export const eventseriesGetEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesBf8E75B9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesBf8E75B9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this event series.
 *
 * Returns documents, links, or media files that apply to all events in the series.
 * Resources may be public or restricted based on visibility settings. Supports filtering
 * by type and text search.
 */
export const eventseriesListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesListResourcesD9499491Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesListResourcesD9499491Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}/resources',
		...options
	});
};

/**
 * Delete Event Series
 *
 * Permanently delete an event series (admin only).
 *
 * Removes the series. Events in the series are not deleted but become standalone.
 * Requires 'delete_event_series' permission (typically organization owners only).
 */
export const eventseriesadminDeleteEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteEventSeries6603914fData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteEventSeries6603914fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options
	});
};

/**
 * Update Event Series
 *
 * Update event series details (admin only).
 *
 * Modify series name, description, or settings. Requires 'edit_event_series' permission
 * (organization staff/owners). Changes apply to the series but not individual events.
 */
export const eventseriesadminUpdateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUpdateEventSeries0D7Ab2EcData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventseriesadminUpdateEventSeries0D7Ab2EcResponses,
		EventseriesadminUpdateEventSeries0D7Ab2EcErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Upload Logo
 *
 * Upload a logo image for the event series (admin only).
 *
 * Replaces the existing logo. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadLogo2233160fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadLogo2233160fResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art/banner image for the event series (admin only).
 *
 * Replaces the existing cover art. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadCoverArtD5F1187eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadCoverArtD5F1187eResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event series (admin only).
 *
 * Removes the logo image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteLogoB282998aData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteLogoB282998aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event series (admin only).
 *
 * Removes the cover art image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteCoverArt7D43Fff0Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteCoverArt7D43Fff0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove all tags from the event series (admin only).
 *
 * Clears all categorization tags. Requires 'edit_event_series' permission.
 */
export const eventseriesadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminClearTags71D1Dff2Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminClearTags71D1Dff2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add tags to categorize the event series (admin only).
 *
 * Tags help users discover series through filtering and search. Returns the updated tag list.
 * Requires 'edit_event_series' permission.
 */
export const eventseriesadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminAddTags7D68C532Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminAddTags7D68C532Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove specific tags from the event series (admin only).
 *
 * Removes only the specified tags, keeping others. Returns the updated tag list. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminRemoveTags8B33C0FcData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminRemoveTags8B33C0FcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Potluck Items
 *
 * View all potluck items for this event.
 *
 * Returns items users can bring, with flags indicating if each item is assigned and if you
 * own it. Available when event.potluck_open=true. Use this to display what's needed and
 * what you've claimed.
 */
export const potluckListPotluckItems = <ThrowOnError extends boolean = false>(
	options: Options<PotluckListPotluckItems8E9D4Db8Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		PotluckListPotluckItems8E9D4Db8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options
	});
};

/**
 * Create Potluck Item
 *
 * Add a new item to the event's potluck list.
 *
 * Specify item name, quantity, and optional notes. Attendees can claim items via
 * POST /{event_id}/potluck/{item_id}/claim. Requires permission to create potluck items.
 */
export const potluckCreatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckCreatePotluckItem48Ddbc22Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckCreatePotluckItem48Ddbc22Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Potluck Item
 *
 * Remove a potluck item from the event.
 *
 * Deletes the item even if it's been claimed. Requires permission to manage potluck items.
 */
export const potluckDeletePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckDeletePotluckItem1C09F326Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		PotluckDeletePotluckItem1C09F326Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options
	});
};

/**
 * Update Potluck Item
 *
 * Update a potluck item's details.
 *
 * Modify item name, quantity, or notes. Requires permission to manage potluck items
 * (typically event organizers).
 */
export const potluckUpdatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUpdatePotluckItemCd877231Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		PotluckUpdatePotluckItemCd877231Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Claim Potluck Item
 *
 * Claim a potluck item to bring to the event.
 *
 * Assigns the item to you. Returns 400 if already claimed by someone else. Use this when
 * you want to commit to bringing a specific item.
 */
export const potluckClaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckClaimPotluckItemE720Dd48Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckClaimPotluckItemE720Dd48Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/claim',
		...options
	});
};

/**
 * Unclaim Potluck Item
 *
 * Release a potluck item you previously claimed.
 *
 * Makes the item available for others to claim. Returns 404 if the item isn't claimed
 * by you.
 */
export const potluckUnclaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUnclaimPotluckItem9774Dd77Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckUnclaimPotluckItem9774Dd77Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/unclaim',
		...options
	});
};

/**
 * List Org Questionnaires
 *
 * Browse questionnaires you have permission to view or manage.
 *
 * Returns questionnaires from organizations where you have staff/owner access. Use this to
 * find questionnaires to attach to events or review submissions.
 */
export const questionnaireListOrgQuestionnaires = <ThrowOnError extends boolean = false>(
	options?: Options<QuestionnaireListOrgQuestionnaires6A001De6Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		QuestionnaireListOrgQuestionnaires6A001De6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/',
		...options
	});
};

/**
 * Create Org Questionnaire
 *
 * Create a new admission questionnaire for an organization (admin only).
 *
 * Sets up an empty questionnaire structure. After creation, add sections and questions via
 * POST /questionnaires/{id}/sections and /multiple-choice-questions endpoints. Requires
 * 'create_questionnaire' permission (organization staff/owners).
 */
export const questionnaireCreateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateOrgQuestionnaire7C3Be4CdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateOrgQuestionnaire7C3Be4CdResponses,
		QuestionnaireCreateOrgQuestionnaire7C3Be4CdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{organization_id}/create-questionnaire',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Org Questionnaire
 *
 * Delete an organization questionnaire (admin only).
 *
 * Permanently removes the questionnaire. Requires 'delete_questionnaire' permission.
 */
export const questionnaireDeleteOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteOrgQuestionnaire6D2C7D68Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteOrgQuestionnaire6D2C7D68Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Get Org Questionnaire
 *
 * Retrieve a questionnaire's details and structure (admin only).
 *
 * Returns the questionnaire with all sections, questions, and settings. Use this to view or
 * edit an existing questionnaire. Requires permission to manage the organization's questionnaires.
 */
export const questionnaireGetOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetOrgQuestionnaire0708436dData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetOrgQuestionnaire0708436dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Update Org Questionnaire
 *
 * Update organization questionnaire and underlying questionnaire settings (admin only).
 *
 * Allows updating both OrganizationQuestionnaire wrapper fields (max_submission_age,
 * questionnaire_type) and the underlying Questionnaire fields (name, min_score, llm_guidelines,
 * shuffle_questions, shuffle_sections, evaluation_mode, can_retake_after, max_attempts).
 * Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateOrgQuestionnaire75B50052Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateOrgQuestionnaire75B50052Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Section
 *
 * Add a section to organize questions in the questionnaire (admin only).
 *
 * Sections group related questions. Specify section name and display order. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateSection4159FfafData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateSection4159FfafResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Section
 *
 * Delete a questionnaire section (admin only).
 *
 * Removes the section and all questions within it. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteSectionA914A418Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteSectionA914A418Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options
	});
};

/**
 * Update Section
 *
 * Update a questionnaire section's details (admin only).
 *
 * Modify section name or display order. Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateSectionD2415D4dData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateSectionD2415D4dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Question
 *
 * Add a multiple-choice question to the questionnaire (admin only).
 *
 * Create a question with predefined answer options. After creation, add options via
 * POST /questionnaires/{id}/multiple-choice-questions/{question_id}/options. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcQuestionA098497dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcQuestionA098497dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Question
 *
 * Delete a multiple choice question (admin only).
 *
 * Removes the question and all its options. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcQuestion34Cdc6C4Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcQuestion34Cdc6C4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options
	});
};

/**
 * Update Mc Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcQuestion388A993aData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcQuestion388A993aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireCreateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcOption35314CcdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcOption35314CcdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}/options',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Option
 *
 * Delete a multiple choice option (admin only).
 *
 * Removes the option from a question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcOption5Ef827FaData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcOption5Ef827FaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options
	});
};

/**
 * Update Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcOptionC7Fa011dData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcOptionC7Fa011dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Ft Question
 *
 * Add a free-text question to the questionnaire (admin only).
 *
 * Create an open-ended question for text responses. Can be auto-evaluated by LLM based on
 * scoring criteria. Requires 'edit_questionnaire' permission.
 */
export const questionnaireCreateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateFtQuestionD12BeadaData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateFtQuestionD12BeadaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ft Question
 *
 * Delete a free text question (admin only).
 *
 * Removes the question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteFtQuestion56104A9cData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteFtQuestion56104A9cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options
	});
};

/**
 * Update Ft Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateFtQuestionBf717B44Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateFtQuestionBf717B44Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Submissions
 *
 * View user submissions for this questionnaire (admin only).
 *
 * Returns submitted questionnaires ready for review. Use this to see who has applied for
 * event access and their responses. Requires 'evaluate_questionnaire' permission.
 */
export const questionnaireListSubmissions = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireListSubmissions0F2B8C27Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireListSubmissions0F2B8C27Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions',
		...options
	});
};

/**
 * Get Submission Detail
 *
 * View detailed answers for a specific submission (admin only).
 *
 * Returns all questions and the user's answers, plus automatic evaluation results if available.
 * Use this to review a submission before manual approval/rejection. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireGetSubmissionDetail = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetSubmissionDetail74415A65Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetSubmissionDetail74415A65Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}',
		...options
	});
};

/**
 * Evaluate Submission
 *
 * Manually approve or reject a questionnaire submission (admin only).
 *
 * Overrides automatic evaluation or provides decision for manual-review questionnaires.
 * Approved users can then RSVP or purchase tickets for the event. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireEvaluateSubmission = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireEvaluateSubmission3C1A289dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireEvaluateSubmission3C1A289dResponses,
		QuestionnaireEvaluateSubmission3C1A289dErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}/evaluate',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Replace Events
 *
 * Replace all assigned events for this questionnaire (admin only).
 *
 * Batch operation to set exactly which events require this questionnaire. Validates that
 * events belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEvents = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEvents82Deac69Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEvents82Deac69Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event
 *
 * Unassign a single event from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEvent692F411cData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEvent692F411cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Assign Event
 *
 * Assign a single event to this questionnaire (admin only).
 *
 * Adds one event that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEventA212Aec5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEventA212Aec5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Replace Event Series
 *
 * Replace all assigned event series for this questionnaire (admin only).
 *
 * Batch operation to set exactly which event series require this questionnaire. Validates that
 * series belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEventSeriesD19Ac6EaData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEventSeriesD19Ac6EaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event Series
 *
 * Unassign a single event series from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event series. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEventSeries82227759Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEventSeries82227759Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Assign Event Series
 *
 * Assign a single event series to this questionnaire (admin only).
 *
 * Adds one event series that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEventSeries6Ec0Fd68Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEventSeries6Ec0Fd68Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Get General Preferences
 *
 * Get your global preferences that apply across all organizations and events.
 *
 * Returns default notification and privacy settings. These serve as defaults that can be
 * overridden at organization, series, or event level.
 */
export const userpreferencesGetGeneralPreferences = <ThrowOnError extends boolean = false>(
	options?: Options<UserpreferencesGetGeneralPreferences57610495Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		UserpreferencesGetGeneralPreferences57610495Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options
	});
};

/**
 * Update Global Preferences
 *
 * Update your global preference defaults.
 *
 * Modify notification and privacy settings. Set overwrite_children=true to cascade changes
 * to all organization/series/event-level preferences, overriding custom settings.
 */
export const userpreferencesUpdateGlobalPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateGlobalPreferences74A7D1CcData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateGlobalPreferences74A7D1CcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Organization Preferences
 *
 * Get your preferences for a specific organization.
 *
 * Returns organization-level overrides for notifications and privacy. Falls back to global
 * preferences if not customized.
 */
export const userpreferencesGetOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetOrganizationPreferences0Facaf0dData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetOrganizationPreferences0Facaf0dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options
	});
};

/**
 * Update Organization Preferences
 *
 * Update preferences for a specific organization.
 *
 * Overrides global defaults for this organization. Set overwrite_children=true to cascade
 * changes to all series/event-level preferences within this organization.
 */
export const userpreferencesUpdateOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateOrganizationPreferences54915373Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateOrganizationPreferences54915373Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Series Preferences
 *
 * Get your preferences for a specific event series.
 *
 * Returns series-level overrides for notifications. Falls back to organization or global
 * preferences if not customized.
 */
export const userpreferencesGetEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetEventSeriesPreferencesBf83Daa1Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventSeriesPreferencesBf83Daa1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options
	});
};

/**
 * Update Event Series Preferences
 *
 * Update preferences for a specific event series.
 *
 * Overrides organization/global defaults for this series. Set overwrite_children=true to
 * cascade changes to all individual event preferences within this series.
 */
export const userpreferencesUpdateEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateEventSeriesPreferencesF085616dData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventSeriesPreferencesF085616dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Preferences
 *
 * Get your preferences for a specific event.
 *
 * Returns event-level overrides for notifications. Falls back to series, organization, or
 * global preferences if not customized.
 */
export const userpreferencesGetEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesGetEventPreferences69Cc8101Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventPreferences69Cc8101Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options
	});
};

/**
 * Update Event Preferences
 *
 * Update preferences for a specific event.
 *
 * Overrides series/organization/global defaults for this event. The most specific preference
 * level always takes precedence.
 */
export const userpreferencesUpdateEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesUpdateEventPreferencesBbe1C8E6Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventPreferencesBbe1C8E6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Handle Webhook
 *
 * Process Stripe webhook events for payment processing.
 *
 * Handles payment confirmations, failures, and refunds. Verifies webhook signature for
 * security. This endpoint is called by Stripe, not by clients directly.
 */
export const stripewebhookHandleWebhook = <ThrowOnError extends boolean = false>(
	options?: Options<StripewebhookHandleWebhookF6258A88Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		StripewebhookHandleWebhookF6258A88Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/stripe/webhook',
		...options
	});
};

/**
 * List Tags
 *
 * Browse and search all available tags in the system.
 *
 * Tags are used to categorize organizations, events, and series. Supports autocomplete via
 * the 'search' query parameter (e.g., /api/tags/?search=tech). Use this to populate tag
 * selection dropdowns or filters.
 */
export const tagListTags = <ThrowOnError extends boolean = false>(
	options?: Options<TagListTags97E6F449Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<TagListTags97E6F449Responses, unknown, ThrowOnError>({
		url: '/api/tags/',
		...options
	});
};

/**
 * List Cities
 *
 * Search and browse cities from the global database.
 *
 * Supports filtering by country and searching by city name. Use the 'search' parameter
 * for autocomplete functionality. Useful for setting user location preferences or
 * filtering events by location.
 */
export const cityListCities = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCities7Be091A3Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCities7Be091A3Responses, unknown, ThrowOnError>({
		url: '/api/cities/',
		...options
	});
};

/**
 * List Countries
 *
 * Get a list of all countries with cities in the database.
 *
 * Returns country names for filtering cities. Use this to populate country
 * selection dropdowns in location pickers.
 */
export const cityListCountries = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCountries84356Df6Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCountries84356Df6Responses, unknown, ThrowOnError>(
		{
			url: '/api/cities/countries',
			...options
		}
	);
};

/**
 * Get City
 *
 * Retrieve detailed information for a specific city by ID.
 *
 * Returns city details including name, coordinates, and country. Use this to
 * get full city information after selecting from a search result.
 */
export const cityGetCity = <ThrowOnError extends boolean = false>(
	options: Options<CityGetCityE44Db90fData, ThrowOnError>
) => {
	return (options.client ?? client).get<CityGetCityE44Db90fResponses, unknown, ThrowOnError>({
		url: '/api/cities/{city_id}',
		...options
	});
};
