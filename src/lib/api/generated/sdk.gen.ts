// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	formDataBodySerializer,
	type Options as Options2,
	type TDataShape,
	urlSearchParamsBodySerializer
} from './client';
import { client } from './client.gen';
import type {
	AccountDeleteAccountConfirm397E05B5Data,
	AccountDeleteAccountConfirm397E05B5Responses,
	AccountDeleteAccountRequest65Bca76aData,
	AccountDeleteAccountRequest65Bca76aResponses,
	AccountExportData6F94F0F1Data,
	AccountExportData6F94F0F1Responses,
	AccountMeD1Eafcd9Data,
	AccountMeD1Eafcd9Responses,
	AccountRegister845E0D90Data,
	AccountRegister845E0D90Responses,
	AccountResendVerificationEmail3Aa64F51Data,
	AccountResendVerificationEmail3Aa64F51Errors,
	AccountResendVerificationEmail3Aa64F51Responses,
	AccountResetPassword55F319AbData,
	AccountResetPassword55F319AbResponses,
	AccountResetPasswordRequest7D74CedcData,
	AccountResetPasswordRequest7D74CedcResponses,
	AccountUpdateProfileF3281F6eData,
	AccountUpdateProfileF3281F6eResponses,
	AccountVerifyEmailE80F1A29Data,
	AccountVerifyEmailE80F1A29Responses,
	ApiApiHealthcheckData,
	ApiApiHealthcheckResponses,
	ApiApiVersionData,
	ApiApiVersionResponses,
	AuthDemoObtainTokenDce8454eData,
	AuthDemoObtainTokenDce8454eResponses,
	AuthGoogleLogin730Ec2DeData,
	AuthGoogleLogin730Ec2DeResponses,
	AuthObtainToken68Baed14Data,
	AuthObtainToken68Baed14Responses,
	AuthObtainTokenWithOtp44330609Data,
	AuthObtainTokenWithOtp44330609Responses,
	CityGetCityA51F2E73Data,
	CityGetCityA51F2E73Responses,
	CityListCities3A3E5384Data,
	CityListCities3A3E5384Responses,
	CityListCountries770A2317Data,
	CityListCountries770A2317Responses,
	DashboardDashboardEventsCa519718Data,
	DashboardDashboardEventsCa519718Responses,
	DashboardDashboardEventSeries246C3131Data,
	DashboardDashboardEventSeries246C3131Responses,
	DashboardDashboardInvitationsFea13B33Data,
	DashboardDashboardInvitationsFea13B33Responses,
	DashboardDashboardOrganizationsE41D76E6Data,
	DashboardDashboardOrganizationsE41D76E6Responses,
	EventadminAddTags75404B17Data,
	EventadminAddTags75404B17Responses,
	EventadminCheckInTicketB681C4B6Data,
	EventadminCheckInTicketB681C4B6Errors,
	EventadminCheckInTicketB681C4B6Responses,
	EventadminClearTags80Add0BfData,
	EventadminClearTags80Add0BfResponses,
	EventadminConfirmTicketPayment85E00Db1Data,
	EventadminConfirmTicketPayment85E00Db1Responses,
	EventadminCreateEventToken450635F4Data,
	EventadminCreateEventToken450635F4Responses,
	EventadminCreateInvitationsF9A7B7CcData,
	EventadminCreateInvitationsF9A7B7CcErrors,
	EventadminCreateInvitationsF9A7B7CcResponses,
	EventadminCreateTicketTier1C3113AdData,
	EventadminCreateTicketTier1C3113AdResponses,
	EventadminDecideInvitationRequest7A209De4Data,
	EventadminDecideInvitationRequest7A209De4Responses,
	EventadminDeleteCoverArt00840Ec6Data,
	EventadminDeleteCoverArt00840Ec6Responses,
	EventadminDeleteEventTokenE0789130Data,
	EventadminDeleteEventTokenE0789130Responses,
	EventadminDeleteInvitationEndpointF3559140Data,
	EventadminDeleteInvitationEndpointF3559140Errors,
	EventadminDeleteInvitationEndpointF3559140Responses,
	EventadminDeleteLogo8A6A91C8Data,
	EventadminDeleteLogo8A6A91C8Responses,
	EventadminDeleteTicketTier95Acde12Data,
	EventadminDeleteTicketTier95Acde12Responses,
	EventadminListEventInvitationRequests349F9Bb9Data,
	EventadminListEventInvitationRequests349F9Bb9Responses,
	EventadminListEventTokens9B993A1aData,
	EventadminListEventTokens9B993A1aResponses,
	EventadminListInvitations030C68BdData,
	EventadminListInvitations030C68BdResponses,
	EventadminListPendingInvitations1Dbb0B60Data,
	EventadminListPendingInvitations1Dbb0B60Responses,
	EventadminListPendingTickets7B5Df6E8Data,
	EventadminListPendingTickets7B5Df6E8Responses,
	EventadminListTicketTiers524981FfData,
	EventadminListTicketTiers524981FfResponses,
	EventadminRemoveTagsDc5C14B4Data,
	EventadminRemoveTagsDc5C14B4Responses,
	EventadminUpdateEventB5Fb3Ed6Data,
	EventadminUpdateEventB5Fb3Ed6Errors,
	EventadminUpdateEventB5Fb3Ed6Responses,
	EventadminUpdateEventStatusE9419B8eData,
	EventadminUpdateEventStatusE9419B8eResponses,
	EventadminUpdateEventTokenEb3C64CdData,
	EventadminUpdateEventTokenEb3C64CdResponses,
	EventadminUpdateTicketTier724F358eData,
	EventadminUpdateTicketTier724F358eResponses,
	EventadminUploadCoverArtC34B834aData,
	EventadminUploadCoverArtC34B834aResponses,
	EventadminUploadLogoE36Ecf72Data,
	EventadminUploadLogoE36Ecf72Responses,
	EventClaimInvitation2576A23bData,
	EventClaimInvitation2576A23bErrors,
	EventClaimInvitation2576A23bResponses,
	EventDeleteInvitationRequestE5F225CfData,
	EventDeleteInvitationRequestE5F225CfResponses,
	EventGetEvent7E1Bdf04Data,
	EventGetEvent7E1Bdf04Responses,
	EventGetEventAttendees39Ce89DfData,
	EventGetEventAttendees39Ce89DfResponses,
	EventGetEventBySlugs3266B2F9Data,
	EventGetEventBySlugs3266B2F9Responses,
	EventGetMyEventStatus33D95E53Data,
	EventGetMyEventStatus33D95E53Responses,
	EventGetQuestionnaireBdf39D90Data,
	EventGetQuestionnaireBdf39D90Responses,
	EventListEvents7D364563Data,
	EventListEvents7D364563Responses,
	EventListResources07F33Fe4Data,
	EventListResources07F33Fe4Responses,
	EventListTiersAa874B18Data,
	EventListTiersAa874B18Responses,
	EventListUserInvitationRequestsE7527B63Data,
	EventListUserInvitationRequestsE7527B63Responses,
	EventRequestInvitationEf948839Data,
	EventRequestInvitationEf948839Errors,
	EventRequestInvitationEf948839Responses,
	EventRsvpEvent33C4B2FfData,
	EventRsvpEvent33C4B2FfErrors,
	EventRsvpEvent33C4B2FfResponses,
	EventseriesadminAddTags6064D96bData,
	EventseriesadminAddTags6064D96bResponses,
	EventseriesadminClearTags6272Ee37Data,
	EventseriesadminClearTags6272Ee37Responses,
	EventseriesadminDeleteCoverArt9C76B3C3Data,
	EventseriesadminDeleteCoverArt9C76B3C3Responses,
	EventseriesadminDeleteEventSeries2Fdc0Ea0Data,
	EventseriesadminDeleteEventSeries2Fdc0Ea0Responses,
	EventseriesadminDeleteLogo3161E3F5Data,
	EventseriesadminDeleteLogo3161E3F5Responses,
	EventseriesadminRemoveTags7597412dData,
	EventseriesadminRemoveTags7597412dResponses,
	EventseriesadminUpdateEventSeriesA74Aca2dData,
	EventseriesadminUpdateEventSeriesA74Aca2dErrors,
	EventseriesadminUpdateEventSeriesA74Aca2dResponses,
	EventseriesadminUploadCoverArtB2576202Data,
	EventseriesadminUploadCoverArtB2576202Responses,
	EventseriesadminUploadLogo64C8298dData,
	EventseriesadminUploadLogo64C8298dResponses,
	EventseriesGetEventSeriesBySlugsD1Ce1A69Data,
	EventseriesGetEventSeriesBySlugsD1Ce1A69Responses,
	EventseriesGetEventSeriesDfb10E96Data,
	EventseriesGetEventSeriesDfb10E96Responses,
	EventseriesListEventSeries78Eebfc9Data,
	EventseriesListEventSeries78Eebfc9Responses,
	EventseriesListResources1A30B9E4Data,
	EventseriesListResources1A30B9E4Responses,
	EventSubmitQuestionnaireE14F8E48Data,
	EventSubmitQuestionnaireE14F8E48Errors,
	EventSubmitQuestionnaireE14F8E48Responses,
	EventTicketCheckoutEe9503BaData,
	EventTicketCheckoutEe9503BaErrors,
	EventTicketCheckoutEe9503BaResponses,
	EventTicketPwycCheckout4B541Fc8Data,
	EventTicketPwycCheckout4B541Fc8Errors,
	EventTicketPwycCheckout4B541Fc8Responses,
	OrganizationadminAddStaff9F520F21Data,
	OrganizationadminAddStaff9F520F21Responses,
	OrganizationadminAddTagsB3B58Be3Data,
	OrganizationadminAddTagsB3B58Be3Responses,
	OrganizationadminApproveMembershipRequest82C9F1B4Data,
	OrganizationadminApproveMembershipRequest82C9F1B4Responses,
	OrganizationadminClearTags8B4Df495Data,
	OrganizationadminClearTags8B4Df495Responses,
	OrganizationadminCreateEvent67032A9eData,
	OrganizationadminCreateEvent67032A9eErrors,
	OrganizationadminCreateEvent67032A9eResponses,
	OrganizationadminCreateEventSeries59F83D47Data,
	OrganizationadminCreateEventSeries59F83D47Errors,
	OrganizationadminCreateEventSeries59F83D47Responses,
	OrganizationadminCreateOrganizationTokenE8E7D39eData,
	OrganizationadminCreateOrganizationTokenE8E7D39eResponses,
	OrganizationadminCreateResource5F47De80Data,
	OrganizationadminCreateResource5F47De80Responses,
	OrganizationadminDeleteCoverArtD407C047Data,
	OrganizationadminDeleteCoverArtD407C047Responses,
	OrganizationadminDeleteLogoCa07742fData,
	OrganizationadminDeleteLogoCa07742fResponses,
	OrganizationadminDeleteOrganizationTokenA95Bc63eData,
	OrganizationadminDeleteOrganizationTokenA95Bc63eResponses,
	OrganizationadminDeleteResource1Df12848Data,
	OrganizationadminDeleteResource1Df12848Responses,
	OrganizationadminGetResourceBed22962Data,
	OrganizationadminGetResourceBed22962Responses,
	OrganizationadminListMembersB424A03bData,
	OrganizationadminListMembersB424A03bResponses,
	OrganizationadminListMembershipRequests92158C2cData,
	OrganizationadminListMembershipRequests92158C2cResponses,
	OrganizationadminListOrganizationTokensC68Fd7A3Data,
	OrganizationadminListOrganizationTokensC68Fd7A3Responses,
	OrganizationadminListResources3F737F33Data,
	OrganizationadminListResources3F737F33Responses,
	OrganizationadminListStaffF5A82E2eData,
	OrganizationadminListStaffF5A82E2eResponses,
	OrganizationadminRejectMembershipRequestA4774667Data,
	OrganizationadminRejectMembershipRequestA4774667Responses,
	OrganizationadminRemoveMember1766A66bData,
	OrganizationadminRemoveMember1766A66bResponses,
	OrganizationadminRemoveStaff19794EceData,
	OrganizationadminRemoveStaff19794EceResponses,
	OrganizationadminRemoveTagsB2Ec5AdcData,
	OrganizationadminRemoveTagsB2Ec5AdcResponses,
	OrganizationadminStripeAccountVerify365Bede5Data,
	OrganizationadminStripeAccountVerify365Bede5Responses,
	OrganizationadminStripeConnectC74C86F9Data,
	OrganizationadminStripeConnectC74C86F9Responses,
	OrganizationadminUpdateOrganizationA2569Dc8Data,
	OrganizationadminUpdateOrganizationA2569Dc8Responses,
	OrganizationadminUpdateOrganizationToken3D195445Data,
	OrganizationadminUpdateOrganizationToken3D195445Responses,
	OrganizationadminUpdateResource088F8FaaData,
	OrganizationadminUpdateResource088F8FaaResponses,
	OrganizationadminUpdateStaffPermissions3Df7Feb8Data,
	OrganizationadminUpdateStaffPermissions3Df7Feb8Responses,
	OrganizationadminUploadCoverArt2E69Ae6cData,
	OrganizationadminUploadCoverArt2E69Ae6cResponses,
	OrganizationadminUploadLogo971E80A6Data,
	OrganizationadminUploadLogo971E80A6Responses,
	OrganizationClaimInvitationD6685418Data,
	OrganizationClaimInvitationD6685418Errors,
	OrganizationClaimInvitationD6685418Responses,
	OrganizationCreateMembershipRequestAfaafcbcData,
	OrganizationCreateMembershipRequestAfaafcbcResponses,
	OrganizationGetOrganization4Ccbf3F4Data,
	OrganizationGetOrganization4Ccbf3F4Responses,
	OrganizationListOrganizations5Fb5CaaaData,
	OrganizationListOrganizations5Fb5CaaaResponses,
	OrganizationListResources1B658593Data,
	OrganizationListResources1B658593Responses,
	OtpDisableOtp894648B3Data,
	OtpDisableOtp894648B3Responses,
	OtpEnableOtpAdb56057Data,
	OtpEnableOtpAdb56057Responses,
	OtpSetupOtpE0E1E826Data,
	OtpSetupOtpE0E1E826Responses,
	PermissionMyPermissions1Cfd3821Data,
	PermissionMyPermissions1Cfd3821Responses,
	PotluckClaimPotluckItem7Df87977Data,
	PotluckClaimPotluckItem7Df87977Responses,
	PotluckCreatePotluckItem46E04F2dData,
	PotluckCreatePotluckItem46E04F2dResponses,
	PotluckDeletePotluckItem0Cf8A9EfData,
	PotluckDeletePotluckItem0Cf8A9EfResponses,
	PotluckListPotluckItemsEff511E0Data,
	PotluckListPotluckItemsEff511E0Responses,
	PotluckUnclaimPotluckItem32Ecba36Data,
	PotluckUnclaimPotluckItem32Ecba36Responses,
	PotluckUpdatePotluckItem4718836bData,
	PotluckUpdatePotluckItem4718836bResponses,
	QuestionnaireAssignEvent955276CeData,
	QuestionnaireAssignEvent955276CeResponses,
	QuestionnaireAssignEventSeries2C0BfecfData,
	QuestionnaireAssignEventSeries2C0BfecfResponses,
	QuestionnaireCreateFtQuestion557E1695Data,
	QuestionnaireCreateFtQuestion557E1695Responses,
	QuestionnaireCreateMcOptionBa160032Data,
	QuestionnaireCreateMcOptionBa160032Responses,
	QuestionnaireCreateMcQuestion43Dec0B8Data,
	QuestionnaireCreateMcQuestion43Dec0B8Responses,
	QuestionnaireCreateOrgQuestionnaire981E764eData,
	QuestionnaireCreateOrgQuestionnaire981E764eErrors,
	QuestionnaireCreateOrgQuestionnaire981E764eResponses,
	QuestionnaireCreateSectionD39FcfabData,
	QuestionnaireCreateSectionD39FcfabResponses,
	QuestionnaireDeleteFtQuestion15A314FfData,
	QuestionnaireDeleteFtQuestion15A314FfResponses,
	QuestionnaireDeleteMcOptionF43385A2Data,
	QuestionnaireDeleteMcOptionF43385A2Responses,
	QuestionnaireDeleteMcQuestionF3475762Data,
	QuestionnaireDeleteMcQuestionF3475762Responses,
	QuestionnaireDeleteOrgQuestionnaireCe1D7942Data,
	QuestionnaireDeleteOrgQuestionnaireCe1D7942Responses,
	QuestionnaireDeleteSection19318E2aData,
	QuestionnaireDeleteSection19318E2aResponses,
	QuestionnaireEvaluateSubmission8584084fData,
	QuestionnaireEvaluateSubmission8584084fErrors,
	QuestionnaireEvaluateSubmission8584084fResponses,
	QuestionnaireGetOrgQuestionnaire025D95A5Data,
	QuestionnaireGetOrgQuestionnaire025D95A5Responses,
	QuestionnaireGetSubmissionDetail4Db3D1D3Data,
	QuestionnaireGetSubmissionDetail4Db3D1D3Responses,
	QuestionnaireListOrgQuestionnaires393F9Ff2Data,
	QuestionnaireListOrgQuestionnaires393F9Ff2Responses,
	QuestionnaireListSubmissionsAd6F89CaData,
	QuestionnaireListSubmissionsAd6F89CaResponses,
	QuestionnaireReplaceEventsE7E4334aData,
	QuestionnaireReplaceEventsE7E4334aResponses,
	QuestionnaireReplaceEventSeries114A6Ba7Data,
	QuestionnaireReplaceEventSeries114A6Ba7Responses,
	QuestionnaireUnassignEvent8587600eData,
	QuestionnaireUnassignEvent8587600eResponses,
	QuestionnaireUnassignEventSeriesDe6929C8Data,
	QuestionnaireUnassignEventSeriesDe6929C8Responses,
	QuestionnaireUpdateFtQuestion0B0E996cData,
	QuestionnaireUpdateFtQuestion0B0E996cResponses,
	QuestionnaireUpdateMcOption83B4A57cData,
	QuestionnaireUpdateMcOption83B4A57cResponses,
	QuestionnaireUpdateMcQuestionA06807C5Data,
	QuestionnaireUpdateMcQuestionA06807C5Responses,
	QuestionnaireUpdateOrgQuestionnaireF8084CfaData,
	QuestionnaireUpdateOrgQuestionnaireF8084CfaResponses,
	QuestionnaireUpdateQuestionnaireStatusE489B20cData,
	QuestionnaireUpdateQuestionnaireStatusE489B20cResponses,
	QuestionnaireUpdateSectionE0Fa70DcData,
	QuestionnaireUpdateSectionE0Fa70DcResponses,
	StripewebhookHandleWebhookE4E959E0Data,
	StripewebhookHandleWebhookE4E959E0Responses,
	TagListTagsFbbc476cData,
	TagListTagsFbbc476cResponses,
	TokenRefreshData,
	TokenRefreshResponses,
	UserpreferencesGetEventPreferences3527E568Data,
	UserpreferencesGetEventPreferences3527E568Responses,
	UserpreferencesGetEventSeriesPreferences99F2Cf77Data,
	UserpreferencesGetEventSeriesPreferences99F2Cf77Responses,
	UserpreferencesGetGeneralPreferences49C3560dData,
	UserpreferencesGetGeneralPreferences49C3560dResponses,
	UserpreferencesGetOrganizationPreferencesCde6C46bData,
	UserpreferencesGetOrganizationPreferencesCde6C46bResponses,
	UserpreferencesUpdateEventPreferencesA6A2303cData,
	UserpreferencesUpdateEventPreferencesA6A2303cResponses,
	UserpreferencesUpdateEventSeriesPreferencesDf6C5E8bData,
	UserpreferencesUpdateEventSeriesPreferencesDf6C5E8bResponses,
	UserpreferencesUpdateGlobalPreferencesC4D1F74bData,
	UserpreferencesUpdateGlobalPreferencesC4D1F74bResponses,
	UserpreferencesUpdateOrganizationPreferences96Dd2A88Data,
	UserpreferencesUpdateOrganizationPreferences96Dd2A88Responses
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Version
 *
 * Get the API version.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiVersion = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiVersionData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiVersionResponses, unknown, ThrowOnError>({
		url: '/api/version',
		...options
	});
};

/**
 * Healthcheck
 *
 * Check the health of the API.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiHealthcheck = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiHealthcheckData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiHealthcheckResponses, unknown, ThrowOnError>({
		url: '/api/healthcheck',
		...options
	});
};

/**
 * Obtain Token
 *
 * Authenticate with email and password to obtain JWT access/refresh tokens.
 *
 * For users without 2FA: Returns standard JWT token pair for immediate access.
 * For users with TOTP enabled: Returns a temporary token that must be exchanged for
 * a full token pair via POST /auth/token/pair/otp along with the TOTP code.
 * Users registered via Google SSO must use POST /auth/google/login instead.
 */
export const authObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainToken68Baed14Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthObtainToken68Baed14Responses, unknown, ThrowOnError>({
		url: '/api/auth/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Refresh Token
 */
export const tokenRefresh = <ThrowOnError extends boolean = false>(
	options: Options<TokenRefreshData, ThrowOnError>
) => {
	return (options.client ?? client).post<TokenRefreshResponses, unknown, ThrowOnError>({
		url: '/api/auth/refresh',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Demo Obtain Token
 *
 * Create and authenticate a demo user account (demo mode only).
 *
 * Automatically creates a user account with the provided credentials if it doesn't exist,
 * then returns JWT tokens. Only available when DEMO_MODE is enabled in settings.
 * Email must end with @example.com.
 */
export const authDemoObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthDemoObtainTokenDce8454eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthDemoObtainTokenDce8454eResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/demo/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Obtain Token With Otp
 *
 * Complete 2FA authentication by exchanging temporary token and TOTP code for JWT tokens.
 *
 * Call this after POST /auth/token/pair returns a temporary token for a 2FA-enabled user.
 * Validates the TOTP code from the user's authenticator app and returns a standard JWT token
 * pair on success. Returns 401 if the TOTP code is invalid.
 */
export const authObtainTokenWithOtp = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainTokenWithOtp44330609Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthObtainTokenWithOtp44330609Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/token/pair/otp',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Google Login
 *
 * Authenticate or register via Google SSO using a Google ID token.
 *
 * Verifies the Google ID token, creates a new user if needed, and returns JWT tokens.
 * For existing Google SSO users, this is the only valid login method - they cannot
 * use password-based authentication.
 */
export const authGoogleLogin = <ThrowOnError extends boolean = false>(
	options: Options<AuthGoogleLogin730Ec2DeData, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthGoogleLogin730Ec2DeResponses, unknown, ThrowOnError>({
		url: '/api/auth/google/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Setup Otp
 *
 * Get the TOTP provisioning URI to configure an authenticator app.
 *
 * Returns a URI (often as QR code) to scan with authenticator apps like Google Authenticator
 * or Authy. Returns 400 if 2FA is already enabled. After scanning, verify the setup with
 * POST /otp/verify to activate 2FA.
 */
export const otpSetupOtp = <ThrowOnError extends boolean = false>(
	options?: Options<OtpSetupOtpE0E1E826Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<OtpSetupOtpE0E1E826Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/setup',
		...options
	});
};

/**
 * Enable Otp
 *
 * Activate 2FA by verifying the TOTP code from the authenticator app.
 *
 * Call this after GET /otp/setup with a code from your authenticator app to confirm
 * it's configured correctly. On success, activates 2FA for the account. Future logins
 * will require the TOTP code via POST /auth/token/pair/otp. Returns 403 if code is invalid.
 */
export const otpEnableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpEnableOtpAdb56057Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpEnableOtpAdb56057Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Disable Otp
 *
 * Deactivate 2FA after verifying the current TOTP code.
 *
 * Requires the current TOTP code to prevent unauthorized disabling. After disabling,
 * login will only require email and password via POST /auth/token/pair. Returns 403
 * if the TOTP code is invalid.
 */
export const otpDisableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpDisableOtp894648B3Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpDisableOtp894648B3Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/disable',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Export Data
 *
 * Request a GDPR-compliant export of all personal data.
 *
 * Initiates an asynchronous export of all user data including profile, events, tickets,
 * and submissions. The export will be emailed to the user when ready. Rate-limited to
 * prevent abuse.
 */
export const accountExportData = <ThrowOnError extends boolean = false>(
	options?: Options<AccountExportData6F94F0F1Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountExportData6F94F0F1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/export-data',
		...options
	});
};

/**
 * Me
 *
 * Retrieve the authenticated user's profile information.
 *
 * Returns complete user profile including email, name, location preferences, and 2FA status.
 * Use this to display user info in the UI or verify authentication status.
 */
export const accountMe = <ThrowOnError extends boolean = false>(
	options?: Options<AccountMeD1Eafcd9Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<AccountMeD1Eafcd9Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options
	});
};

/**
 * Update Profile
 *
 * Update the authenticated user's profile information.
 *
 * Allows updating name, location preferences, and other profile fields. Only provided
 * fields are updated. Returns the updated user profile.
 */
export const accountUpdateProfile = <ThrowOnError extends boolean = false>(
	options: Options<AccountUpdateProfileF3281F6eData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		AccountUpdateProfileF3281F6eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Register
 *
 * Create a new user account with email and password.
 *
 * Creates a new account and sends a verification email. The account is created but not
 * fully active until email is verified via POST /account/verify. If an unverified account
 * with the same email exists, resends the verification email. Returns 400 if a verified
 * account already exists.
 */
export const accountRegister = <ThrowOnError extends boolean = false>(
	options: Options<AccountRegister845E0D90Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AccountRegister845E0D90Responses, unknown, ThrowOnError>({
		url: '/api/account/register',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Verify Email
 *
 * Verify email address using the token from the verification email.
 *
 * Call this with the token received via email after registration. On success, activates
 * the account and returns the verified user profile along with JWT tokens for immediate login.
 * The verification token is single-use and expires after a set period.
 */
export const accountVerifyEmail = <ThrowOnError extends boolean = false>(
	options: Options<AccountVerifyEmailE80F1A29Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountVerifyEmailE80F1A29Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Resend Verification Email
 *
 * Resend the email verification link to the authenticated user.
 *
 * Use this if the original verification email was lost or expired. Returns 400 if the
 * email is already verified. Requires authentication with the unverified account's JWT.
 */
export const accountResendVerificationEmail = <ThrowOnError extends boolean = false>(
	options?: Options<AccountResendVerificationEmail3Aa64F51Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountResendVerificationEmail3Aa64F51Responses,
		AccountResendVerificationEmail3Aa64F51Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/verify-resend',
		...options
	});
};

/**
 * Delete Account Request
 *
 * Initiate GDPR-compliant account deletion by sending confirmation email.
 *
 * Sends an email with a deletion confirmation link. The account is not deleted until
 * the user confirms via POST /account/delete-confirm with the token from the email.
 * This two-step process prevents accidental deletions.
 */
export const accountDeleteAccountRequest = <ThrowOnError extends boolean = false>(
	options?: Options<AccountDeleteAccountRequest65Bca76aData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountDeleteAccountRequest65Bca76aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/delete-request',
		...options
	});
};

/**
 * Delete Account Confirm
 *
 * Permanently delete the account using the confirmation token from email.
 *
 * Call this with the token received via email after POST /account/delete-request.
 * This action is irreversible and deletes all user data. The deletion token is
 * single-use and expires after a set period.
 */
export const accountDeleteAccountConfirm = <ThrowOnError extends boolean = false>(
	options: Options<AccountDeleteAccountConfirm397E05B5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountDeleteAccountConfirm397E05B5Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/delete-confirm',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password Request
 *
 * Request a password reset by email.
 *
 * Sends a password reset link to the provided email if an account exists. Always returns
 * a success message to prevent user enumeration attacks. Google SSO users cannot use this
 * endpoint. After receiving the email, use POST /account/password/reset with the token.
 */
export const accountResetPasswordRequest = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordRequest7D74CedcData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordRequest7D74CedcResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset-request',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password
 *
 * Reset password using the token from the password reset email.
 *
 * Call this with the token received via email after POST /account/password/reset-request.
 * The new password must meet security requirements. The reset token is single-use and
 * expires after a set period. After reset, the user must login again with the new password.
 */
export const accountResetPassword = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPassword55F319AbData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPassword55F319AbResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Dashboard Organizations
 *
 * View organizations for your dashboard filtered by your relationship to them.
 *
 * Filter by: organizations you own, are staff of, are a member of, or have pending requests to.
 * Shows only organizations you have permission to view. Use this to display "My Organizations"
 * sections in the UI.
 */
export const dashboardDashboardOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardOrganizationsE41D76E6Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardOrganizationsE41D76E6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/organizations',
		...options
	});
};

/**
 * Dashboard Events
 *
 * View upcoming events for your dashboard filtered by your relationship to them.
 *
 * Filter by: events you're organizing, attending (RSVP'd or have tickets), invited to, or have
 * requested invitations to. Only shows future events you have permission to view. Use this to
 * display "My Events" sections in the UI.
 */
export const dashboardDashboardEvents = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventsCa519718Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventsCa519718Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/events',
		...options
	});
};

/**
 * Dashboard Event Series
 *
 * View event series for your dashboard filtered by your relationship to them.
 *
 * Filter by: series you're organizing or series you're attending events in. Shows only
 * series you have permission to view. Use this to display "My Series" sections in the UI.
 */
export const dashboardDashboardEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventSeries246C3131Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventSeries246C3131Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/event_series',
		...options
	});
};

/**
 * Dashboard Invitations
 *
 * View your pending event invitations.
 *
 * Returns invitations you've received but not yet acted on, sorted by event date (soonest first).
 * Use this to display a "Pending Invitations" section prompting users to RSVP or purchase tickets.
 */
export const dashboardDashboardInvitations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardInvitationsFea13B33Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardInvitationsFea13B33Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/invitations',
		...options
	});
};

/**
 * List Organizations
 *
 * Browse and search organizations visible to the current user.
 *
 * Results are filtered by visibility settings and user memberships. By default orders by
 * 'distance' (nearest first based on user location). Can also sort alphabetically by 'name'
 * or reverse with '-name'. Supports text search and filtering.
 */
export const organizationListOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<OrganizationListOrganizations5Fb5CaaaData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		OrganizationListOrganizations5Fb5CaaaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/',
		...options
	});
};

/**
 * Get Organization
 *
 * Retrieve organization details using its unique slug.
 *
 * Returns full organization information including description, location, member count, and
 * settings. Use this to display the organization profile page.
 */
export const organizationGetOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationGetOrganization4Ccbf3F4Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationGetOrganization4Ccbf3F4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this organization and marked for display on organization page.
 *
 * Returns documents, links, or media files provided by organization admins. Resources may
 * be public or restricted to members only. Supports filtering by type and text search.
 */
export const organizationListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationListResources1B658593Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationListResources1B658593Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/resources',
		...options
	});
};

/**
 * Create Membership Request
 *
 * Submit a request to become a member of this organization.
 *
 * Creates a membership request that organization admins can approve or reject. Being a
 * member may be required to access certain members-only events. Returns the created
 * request for tracking status.
 */
export const organizationCreateMembershipRequest = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationCreateMembershipRequestAfaafcbcData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationCreateMembershipRequestAfaafcbcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/membership-requests',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an organization membership invitation using a token from invitation link.
 *
 * Creates an OrganizationMember record, granting you member status. Members may have
 * access to members-only events and resources. Returns the organization on success,
 * or 400 if the token is invalid/expired.
 */
export const organizationClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationClaimInvitationD6685418Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationClaimInvitationD6685418Responses,
		OrganizationClaimInvitationD6685418Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/claim-invitation/{token}',
		...options
	});
};

/**
 * Update Organization
 *
 * Update organization by slug.
 */
export const organizationadminUpdateOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateOrganizationA2569Dc8Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationA2569Dc8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Stripe Connect
 *
 * Get a link to onboard the organization to Stripe.
 */
export const organizationadminStripeConnect = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeConnectC74C86F9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeConnectC74C86F9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/connect',
		...options
	});
};

/**
 * Stripe Account Verify
 *
 * Get the organization's Stripe account status.
 */
export const organizationadminStripeAccountVerify = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeAccountVerify365Bede5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeAccountVerify365Bede5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/account/verify',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to organization.
 */
export const organizationadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadLogo971E80A6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadLogo971E80A6Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to organization.
 */
export const organizationadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadCoverArt2E69Ae6cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadCoverArt2E69Ae6cResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from organization.
 */
export const organizationadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteLogoCa07742fData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteLogoCa07742fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from organization.
 */
export const organizationadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteCoverArtD407C047Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteCoverArtD407C047Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-cover-art',
		...options
	});
};

/**
 * Create Event Series
 *
 * Create a new event series.
 */
export const organizationadminCreateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEventSeries59F83D47Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEventSeries59F83D47Responses,
		OrganizationadminCreateEventSeries59F83D47Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Event
 *
 * Create a new event.
 */
export const organizationadminCreateEvent = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEvent67032A9eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEvent67032A9eResponses,
		OrganizationadminCreateEvent67032A9eErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Organization Tokens
 *
 * List all tokens for an organization that the user has admin rights for.
 */
export const organizationadminListOrganizationTokens = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListOrganizationTokensC68Fd7A3Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListOrganizationTokensC68Fd7A3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens',
		...options
	});
};

/**
 * Create Organization Token
 *
 * Create a new token for an organization.
 */
export const organizationadminCreateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminCreateOrganizationTokenE8E7D39eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateOrganizationTokenE8E7D39eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Organization Token
 *
 * Delete an organization token.
 */
export const organizationadminDeleteOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminDeleteOrganizationTokenA95Bc63eData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteOrganizationTokenA95Bc63eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options
	});
};

/**
 * Update Organization Token
 *
 * Update an organization token.
 */
export const organizationadminUpdateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateOrganizationToken3D195445Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationToken3D195445Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Membership Requests
 *
 * List all membership requests for an organization.
 */
export const organizationadminListMembershipRequests = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListMembershipRequests92158C2cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembershipRequests92158C2cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests',
		...options
	});
};

/**
 * Approve Membership Request
 *
 * Approve a membership request.
 */
export const organizationadminApproveMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminApproveMembershipRequest82C9F1B4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminApproveMembershipRequest82C9F1B4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/approve',
		...options
	});
};

/**
 * Reject Membership Request
 *
 * Reject a membership request.
 */
export const organizationadminRejectMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminRejectMembershipRequestA4774667Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRejectMembershipRequestA4774667Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/reject',
		...options
	});
};

/**
 * List Resources
 *
 * List all resources for a specific organization.
 */
export const organizationadminListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListResources3F737F33Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListResources3F737F33Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options
	});
};

/**
 * Create Resource
 *
 * Create a new resource for the organization.
 *
 * Accepts multipart/form-data with individual form fields for each schema property.
 * For FILE type resources, include the file parameter.
 */
export const organizationadminCreateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateResource5F47De80Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateResource5F47De80Responses,
		unknown,
		ThrowOnError
	>({
		...urlSearchParamsBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options,
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded',
			...options.headers
		}
	});
};

/**
 * Delete Resource
 *
 * Delete a resource from the organization.
 */
export const organizationadminDeleteResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteResource1Df12848Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteResource1Df12848Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Get Resource
 *
 * Retrieve a specific resource for the organization.
 */
export const organizationadminGetResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetResourceBed22962Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetResourceBed22962Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Update Resource
 *
 * Update a resource for the organization.
 */
export const organizationadminUpdateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateResource088F8FaaData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateResource088F8FaaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Members
 *
 * List all members of an organization.
 */
export const organizationadminListMembers = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListMembersB424A03bData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembersB424A03bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members',
		...options
	});
};

/**
 * Remove Member
 *
 * Remove a member from an organization.
 */
export const organizationadminRemoveMember = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveMember1766A66bData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveMember1766A66bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members/{user_id}',
		...options
	});
};

/**
 * List Staff
 *
 * List all staff of an organization.
 */
export const organizationadminListStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListStaffF5A82E2eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListStaffF5A82E2eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff',
		...options
	});
};

/**
 * Remove Staff
 *
 * Remove a staff member from an organization.
 */
export const organizationadminRemoveStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveStaff19794EceData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveStaff19794EceResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options
	});
};

/**
 * Add Staff
 *
 * Add a staff member to an organization.
 */
export const organizationadminAddStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddStaff9F520F21Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddStaff9F520F21Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Staff Permissions
 *
 * Update a staff member's permissions.
 */
export const organizationadminUpdateStaffPermissions = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateStaffPermissions3Df7Feb8Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateStaffPermissions3Df7Feb8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}/permissions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Clear akk tags from the organization.
 */
export const organizationadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminClearTags8B4Df495Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminClearTags8B4Df495Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const organizationadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddTagsB3B58Be3Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddTagsB3B58Be3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const organizationadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveTagsB2Ec5AdcData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRemoveTagsB2Ec5AdcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Events
 *
 * Browse and search events visible to the current user.
 *
 * Results are filtered by visibility rules (public/private), event status, and user permissions.
 * By default shows only upcoming events; set include_past=true to see past events.
 * Ordering: 'distance' (default) shows nearest events based on user location, 'start' shows
 * soonest first, '-start' shows latest first. Supports filtering by organization, series,
 * tags, and text search.
 */
export const eventListEvents = <ThrowOnError extends boolean = false>(
	options?: Options<EventListEvents7D364563Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<EventListEvents7D364563Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an event invitation using a token from an invitation link or email.
 *
 * Creates an EventInvitation record for the user, granting access to the event.
 * Invitations can bypass certain eligibility requirements like membership, capacity limits,
 * and RSVP deadlines. Returns the event on success, or 400 if the token is invalid/expired.
 */
export const eventClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventClaimInvitation2576A23bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventClaimInvitation2576A23bResponses,
		EventClaimInvitation2576A23bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Event Attendees
 *
 * Get the list of confirmed attendees for this event.
 *
 * Returns users who have RSVPed 'yes' or have active tickets. Visibility is controlled by
 * event settings - attendee lists may be hidden from regular attendees. Organization staff
 * and event creators always have access.
 */
export const eventGetEventAttendees = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventAttendees39Ce89DfData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventAttendees39Ce89DfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/attendee-list',
		...options
	});
};

/**
 * Get My Event Status
 *
 * Check the authenticated user's current status and eligibility for an event.
 *
 * Returns either the user's RSVP/ticket status if they've already joined, or an eligibility
 * check result explaining what steps are needed to attend. The eligibility check validates:
 * event status, RSVP deadline, invitations, organization membership, required questionnaires,
 * capacity limits, and ticket availability. Use this to determine which action to show users
 * (RSVP button, buy ticket, fill questionnaire, etc.).
 */
export const eventGetMyEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventGetMyEventStatus33D95E53Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetMyEventStatus33D95E53Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/my-status',
		...options
	});
};

/**
 * Request Invitation
 *
 * Submit a request to be invited to a private or invite-only event.
 *
 * Creates an invitation request that event organizers can approve or reject. Include an
 * optional message explaining why you want to attend. Returns 400 if you've already
 * submitted a request for this event. Check GET /{event_id}/my-status to see if you
 * need an invitation.
 */
export const eventRequestInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventRequestInvitationEf948839Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRequestInvitationEf948839Responses,
		EventRequestInvitationEf948839Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/request-invitation',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Resources
 *
 * Get supplementary resources attached to this event.
 *
 * Returns resources like documents, links, or media files provided by event organizers.
 * Resources may be public or restricted to attendees only. Supports filtering by type
 * (file, link, etc.) and text search.
 */
export const eventListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventListResources07F33Fe4Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListResources07F33Fe4Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/events/{event_id}/resources',
			...options
		}
	);
};

/**
 * Delete Invitation Request
 *
 * Cancel a pending invitation request.
 *
 * Withdraws your invitation request for an event. Only works for your own requests
 * that haven't been decided yet. Returns 404 if the request doesn't exist or doesn't
 * belong to you.
 */
export const eventDeleteInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventDeleteInvitationRequestE5F225CfData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventDeleteInvitationRequestE5F225CfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/invitation-request/{request_id}',
		...options
	});
};

/**
 * List User Invitation Requests
 *
 * View your invitation requests across all events.
 *
 * Returns your invitation requests with their current status (pending/approved/rejected).
 * Filter by event_id to see requests for a specific event, or by status to see approved/
 * rejected requests. Use this to track which events you've requested access to.
 */
export const eventListUserInvitationRequests = <ThrowOnError extends boolean = false>(
	options?: Options<EventListUserInvitationRequestsE7527B63Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventListUserInvitationRequestsE7527B63Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/me/pending_invitation_requests',
		...options
	});
};

/**
 * Get Event By Slugs
 *
 * Retrieve event details using human-readable organization and event slugs.
 *
 * Use this for clean URLs like /events/tech-meetup/monthly-session. Returns 404 if
 * the event doesn't exist or you don't have permission to view it.
 */
export const eventGetEventBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventBySlugs3266B2F9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventBySlugs3266B2F9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{org_slug}/{event_slug}',
		...options
	});
};

/**
 * Get Event
 *
 * Retrieve full event details by ID.
 *
 * Returns comprehensive event information including description, location, times, organization,
 * ticket tiers, and visibility settings. Use this to display the event detail page.
 */
export const eventGetEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEvent7E1Bdf04Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventGetEvent7E1Bdf04Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}',
		...options
	});
};

/**
 * Rsvp Event
 *
 * RSVP to a non-ticketed event (answer: 'yes', 'no', or 'maybe').
 *
 * Only works for events where requires_ticket=false. Runs full eligibility check including
 * event status, RSVP deadline, invitations, membership requirements, required questionnaires,
 * and capacity limits. Returns RSVP record on success. On failure, returns eligibility details
 * explaining what's blocking you and what next_step to take (e.g., complete questionnaire,
 * request invitation).
 */
export const eventRsvpEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventRsvpEvent33C4B2FfData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRsvpEvent33C4B2FfResponses,
		EventRsvpEvent33C4B2FfErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/rsvp/{answer}',
		...options
	});
};

/**
 * List Tiers
 *
 * Get all ticket tiers available for purchase at this event.
 *
 * Returns ticket types with pricing, availability, and sales windows. Filters tiers based
 * on user eligibility - you'll only see tiers you're allowed to purchase. Check visibility
 * settings and sales_start_at/sales_end_at to determine which are currently on sale.
 */
export const eventListTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventListTiersAa874B18Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListTiersAa874B18Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/tiers',
		...options
	});
};

/**
 * Ticket Checkout
 *
 * Purchase a fixed-price event ticket.
 *
 * Runs eligibility checks before allowing purchase. For online payment: returns Stripe
 * checkout URL to redirect user for payment. For free/offline/at-the-door tickets: creates
 * ticket immediately and returns it. Cannot be used for pay-what-you-can (PWYC) tiers -
 * use POST /{event_id}/tickets/{tier_id}/checkout/pwyc instead. On eligibility failure,
 * returns 400 with eligibility details explaining what's blocking you and what next_step
 * to take (e.g., complete questionnaire, request invitation, wait for tickets to go on sale).
 */
export const eventTicketCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketCheckoutEe9503BaData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketCheckoutEe9503BaResponses,
		EventTicketCheckoutEe9503BaErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout',
		...options
	});
};

/**
 * Ticket Pwyc Checkout
 *
 * Purchase a pay-what-you-can (PWYC) ticket with a user-specified amount.
 *
 * Only works for ticket tiers with price_type=PWYC. Validates the amount is within the
 * tier's min/max bounds. Returns Stripe checkout URL for online payment, or creates ticket
 * immediately for free/offline payment methods. Returns 400 for non-PWYC tiers, if amount
 * is out of bounds, or on eligibility failure (with eligibility details explaining what's
 * blocking you and what next_step to take).
 */
export const eventTicketPwycCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketPwycCheckout4B541Fc8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketPwycCheckout4B541Fc8Responses,
		EventTicketPwycCheckout4B541Fc8Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout/pwyc',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Questionnaire
 *
 * Retrieve a questionnaire required for event admission.
 *
 * Returns the questionnaire structure with all sections and questions. Questions may be
 * shuffled based on questionnaire settings. Use this to display the form that users must
 * complete before accessing the event.
 */
export const eventGetQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventGetQuestionnaireBdf39D90Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetQuestionnaireBdf39D90Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}',
		...options
	});
};

/**
 * Submit Questionnaire
 *
 * Submit answers to an event admission questionnaire.
 *
 * Validates all required questions are answered. If submission status is 'ready', triggers
 * automatic evaluation (may use LLM for free-text answers). Depending on the questionnaire's
 * evaluation_mode (automatic/manual/hybrid), results may be immediate or pending staff review.
 * Passing the questionnaire may be required before you can RSVP or purchase tickets.
 */
export const eventSubmitQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventSubmitQuestionnaireE14F8E48Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventSubmitQuestionnaireE14F8E48Responses,
		EventSubmitQuestionnaireE14F8E48Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}/submit',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Event Token
 *
 * Delete an event token.
 */
export const eventadminDeleteEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteEventTokenE0789130Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteEventTokenE0789130Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options
	});
};

/**
 * Update Event Token
 *
 * Update an event token.
 */
export const eventadminUpdateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventTokenEb3C64CdData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventTokenEb3C64CdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Event Tokens
 *
 * List all event tokens.
 */
export const eventadminListEventTokens = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventTokens9B993A1aData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventTokens9B993A1aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options
	});
};

/**
 * Create Event Token
 *
 * Create a new event token.
 */
export const eventadminCreateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateEventToken450635F4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateEventToken450635F4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Decide Invitation Request
 *
 * Request an invitation to an event.
 */
export const eventadminDecideInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDecideInvitationRequest7A209De4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminDecideInvitationRequest7A209De4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-request/{request_id}/{decision}',
		...options
	});
};

/**
 * List Event Invitation Requests
 *
 * List all pending invitation requests for the current user.
 */
export const eventadminListEventInvitationRequests = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventInvitationRequests349F9Bb9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventInvitationRequests349F9Bb9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation_requests',
		...options
	});
};

/**
 * Update Event
 *
 * Update event by ID.
 */
export const eventadminUpdateEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventB5Fb3Ed6Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventB5Fb3Ed6Responses,
		EventadminUpdateEventB5Fb3Ed6Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Event Status
 *
 * Update event status to the specified value.
 */
export const eventadminUpdateEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventStatusE9419B8eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUpdateEventStatusE9419B8eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/actions/update-status/{status}',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to event.
 */
export const eventadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadLogoE36Ecf72Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadLogoE36Ecf72Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to event.
 */
export const eventadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadCoverArtC34B834aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadCoverArtC34B834aResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event.
 */
export const eventadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteLogo8A6A91C8Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteLogo8A6A91C8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event.
 */
export const eventadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteCoverArt00840Ec6Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteCoverArt00840Ec6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminClearTags80Add0BfData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminClearTags80Add0BfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const eventadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminAddTags75404B17Data, ThrowOnError>
) => {
	return (options.client ?? client).post<EventadminAddTags75404B17Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/event-admin/{event_id}/tags',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options.headers
			}
		}
	);
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminRemoveTagsDc5C14B4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminRemoveTagsDc5C14B4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Ticket Tiers
 *
 * List all ticket tiers for an event.
 */
export const eventadminListTicketTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketTiers524981FfData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketTiers524981FfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tiers',
		...options
	});
};

/**
 * Create Ticket Tier
 *
 * Create a new ticket tier for an event.
 */
export const eventadminCreateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateTicketTier1C3113AdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateTicketTier1C3113AdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ticket Tier
 *
 * Delete a ticket tier.
 *
 * Note this might raise a 400 if ticket with this tier where already bought.
 */
export const eventadminDeleteTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteTicketTier95Acde12Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteTicketTier95Acde12Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options
	});
};

/**
 * Update Ticket Tier
 *
 * Update a ticket tier.
 */
export const eventadminUpdateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateTicketTier724F358eData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateTicketTier724F358eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Tickets
 *
 * List all pending tickets for offline and at-the-door payment methods.
 */
export const eventadminListPendingTickets = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingTickets7B5Df6E8Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingTickets7B5Df6E8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-tickets',
		...options
	});
};

/**
 * Confirm Ticket Payment
 *
 * Confirm payment for a pending offline ticket and activate it.
 */
export const eventadminConfirmTicketPayment = <ThrowOnError extends boolean = false>(
	options: Options<EventadminConfirmTicketPayment85E00Db1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminConfirmTicketPayment85E00Db1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/confirm-payment',
		...options
	});
};

/**
 * Check In Ticket
 *
 * Check in an attendee by scanning their ticket.
 */
export const eventadminCheckInTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCheckInTicketB681C4B6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCheckInTicketB681C4B6Responses,
		EventadminCheckInTicketB681C4B6Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/check-in',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Invitations
 *
 * List all invitations for registered users.
 */
export const eventadminListInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListInvitations030C68BdData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListInvitations030C68BdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options
	});
};

/**
 * Create Invitations
 *
 * Create direct invitations for users by email addresses.
 */
export const eventadminCreateInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateInvitationsF9A7B7CcData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateInvitationsF9A7B7CcResponses,
		EventadminCreateInvitationsF9A7B7CcErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Invitations
 *
 * List all pending invitations for unregistered users.
 */
export const eventadminListPendingInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingInvitations1Dbb0B60Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingInvitations1Dbb0B60Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-invitations',
		...options
	});
};

/**
 * Delete Invitation Endpoint
 *
 * Delete an invitation (registered or pending).
 */
export const eventadminDeleteInvitationEndpoint = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteInvitationEndpointF3559140Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteInvitationEndpointF3559140Responses,
		EventadminDeleteInvitationEndpointF3559140Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations/{invitation_type}/{invitation_id}',
		...options
	});
};

/**
 * My Permissions
 *
 * Get a user's permission map, per organization.
 */
export const permissionMyPermissions = <ThrowOnError extends boolean = false>(
	options?: Options<PermissionMyPermissions1Cfd3821Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		PermissionMyPermissions1Cfd3821Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/permissions/my-permissions',
		...options
	});
};

/**
 * List Event Series
 *
 * Browse event series (recurring event collections) visible to the current user.
 *
 * Event series group related recurring events (e.g., "Monthly Tech Meetup"). Results are
 * filtered by visibility and permissions. Supports filtering by organization and text search.
 */
export const eventseriesListEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<EventseriesListEventSeries78Eebfc9Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventseriesListEventSeries78Eebfc9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/',
		...options
	});
};

/**
 * Get Event Series By Slugs
 *
 * Retrieve event series details using human-readable organization and series slugs.
 *
 * Use this for clean URLs like /event-series/tech-meetup/monthly-sessions. Returns 404
 * if the series doesn't exist or you don't have permission to view it.
 */
export const eventseriesGetEventSeriesBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesBySlugsD1Ce1A69Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesBySlugsD1Ce1A69Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{org_slug}/{series_slug}',
		...options
	});
};

/**
 * Get Event Series
 *
 * Retrieve full event series details by ID.
 *
 * Returns series information including description, organization, and settings. Use this
 * to display the series profile page and list related events.
 */
export const eventseriesGetEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesDfb10E96Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesDfb10E96Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this event series.
 *
 * Returns documents, links, or media files that apply to all events in the series.
 * Resources may be public or restricted based on visibility settings. Supports filtering
 * by type and text search.
 */
export const eventseriesListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesListResources1A30B9E4Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesListResources1A30B9E4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}/resources',
		...options
	});
};

/**
 * Delete Event Series
 *
 * Permanently delete an event series (admin only).
 *
 * Removes the series. Events in the series are not deleted but become standalone.
 * Requires 'delete_event_series' permission (typically organization owners only).
 */
export const eventseriesadminDeleteEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteEventSeries2Fdc0Ea0Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteEventSeries2Fdc0Ea0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options
	});
};

/**
 * Update Event Series
 *
 * Update event series details (admin only).
 *
 * Modify series name, description, or settings. Requires 'edit_event_series' permission
 * (organization staff/owners). Changes apply to the series but not individual events.
 */
export const eventseriesadminUpdateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUpdateEventSeriesA74Aca2dData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventseriesadminUpdateEventSeriesA74Aca2dResponses,
		EventseriesadminUpdateEventSeriesA74Aca2dErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Upload Logo
 *
 * Upload a logo image for the event series (admin only).
 *
 * Replaces the existing logo. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadLogo64C8298dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadLogo64C8298dResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art/banner image for the event series (admin only).
 *
 * Replaces the existing cover art. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadCoverArtB2576202Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadCoverArtB2576202Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event series (admin only).
 *
 * Removes the logo image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteLogo3161E3F5Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteLogo3161E3F5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event series (admin only).
 *
 * Removes the cover art image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteCoverArt9C76B3C3Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteCoverArt9C76B3C3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove all tags from the event series (admin only).
 *
 * Clears all categorization tags. Requires 'edit_event_series' permission.
 */
export const eventseriesadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminClearTags6272Ee37Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminClearTags6272Ee37Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add tags to categorize the event series (admin only).
 *
 * Tags help users discover series through filtering and search. Returns the updated tag list.
 * Requires 'edit_event_series' permission.
 */
export const eventseriesadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminAddTags6064D96bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminAddTags6064D96bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove specific tags from the event series (admin only).
 *
 * Removes only the specified tags, keeping others. Returns the updated tag list. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminRemoveTags7597412dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminRemoveTags7597412dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Potluck Items
 *
 * View all potluck items for this event.
 *
 * Returns items users can bring, with flags indicating if each item is assigned and if you
 * own it. Available when event.potluck_open=true. Use this to display what's needed and
 * what you've claimed.
 */
export const potluckListPotluckItems = <ThrowOnError extends boolean = false>(
	options: Options<PotluckListPotluckItemsEff511E0Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		PotluckListPotluckItemsEff511E0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options
	});
};

/**
 * Create Potluck Item
 *
 * Add a new item to the event's potluck list.
 *
 * Specify item name, quantity, and optional notes. Attendees can claim items via
 * POST /{event_id}/potluck/{item_id}/claim. Requires permission to create potluck items.
 */
export const potluckCreatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckCreatePotluckItem46E04F2dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckCreatePotluckItem46E04F2dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Potluck Item
 *
 * Remove a potluck item from the event.
 *
 * Deletes the item even if it's been claimed. Requires permission to manage potluck items.
 */
export const potluckDeletePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckDeletePotluckItem0Cf8A9EfData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		PotluckDeletePotluckItem0Cf8A9EfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options
	});
};

/**
 * Update Potluck Item
 *
 * Update a potluck item's details.
 *
 * Modify item name, quantity, or notes. Requires permission to manage potluck items
 * (typically event organizers).
 */
export const potluckUpdatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUpdatePotluckItem4718836bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		PotluckUpdatePotluckItem4718836bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Claim Potluck Item
 *
 * Claim a potluck item to bring to the event.
 *
 * Assigns the item to you. Returns 400 if already claimed by someone else. Use this when
 * you want to commit to bringing a specific item.
 */
export const potluckClaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckClaimPotluckItem7Df87977Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckClaimPotluckItem7Df87977Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/claim',
		...options
	});
};

/**
 * Unclaim Potluck Item
 *
 * Release a potluck item you previously claimed.
 *
 * Makes the item available for others to claim. Returns 404 if the item isn't claimed
 * by you.
 */
export const potluckUnclaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUnclaimPotluckItem32Ecba36Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckUnclaimPotluckItem32Ecba36Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/unclaim',
		...options
	});
};

/**
 * List Org Questionnaires
 *
 * Browse questionnaires you have permission to view or manage.
 *
 * Returns questionnaires from organizations where you have staff/owner access. Use this to
 * find questionnaires to attach to events or review submissions. Supports filtering by
 * event_id or event_series_id to find questionnaires assigned to specific events or series.
 *
 * Each questionnaire includes a count of pending evaluations (submissions with no evaluation
 * or evaluations with "pending review" status).
 */
export const questionnaireListOrgQuestionnaires = <ThrowOnError extends boolean = false>(
	options?: Options<QuestionnaireListOrgQuestionnaires393F9Ff2Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		QuestionnaireListOrgQuestionnaires393F9Ff2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/',
		...options
	});
};

/**
 * Create Org Questionnaire
 *
 * Create a new questionnaire for an organization (admin only).
 *
 * Creates a questionnaire with specified type (admission, membership, feedback, or generic)
 * and optional max_submission_age. After creation, add sections and questions via
 * POST /questionnaires/{id}/sections and /multiple-choice-questions endpoints. Requires
 * 'create_questionnaire' permission (organization staff/owners).
 */
export const questionnaireCreateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateOrgQuestionnaire981E764eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateOrgQuestionnaire981E764eResponses,
		QuestionnaireCreateOrgQuestionnaire981E764eErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{organization_id}/create-questionnaire',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Org Questionnaire
 *
 * Delete an organization questionnaire (admin only).
 *
 * Permanently removes the questionnaire. Requires 'delete_questionnaire' permission.
 */
export const questionnaireDeleteOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteOrgQuestionnaireCe1D7942Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteOrgQuestionnaireCe1D7942Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Get Org Questionnaire
 *
 * Retrieve a questionnaire's details and structure (admin only).
 *
 * Returns the questionnaire with all sections, questions, and settings. Use this to view or
 * edit an existing questionnaire. Requires permission to manage the organization's questionnaires.
 */
export const questionnaireGetOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetOrgQuestionnaire025D95A5Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetOrgQuestionnaire025D95A5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Update Org Questionnaire
 *
 * Update organization questionnaire and underlying questionnaire settings (admin only).
 *
 * Allows updating both OrganizationQuestionnaire wrapper fields (max_submission_age,
 * questionnaire_type) and the underlying Questionnaire fields (name, min_score, llm_guidelines,
 * shuffle_questions, shuffle_sections, evaluation_mode, can_retake_after, max_attempts).
 * Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateOrgQuestionnaireF8084CfaData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateOrgQuestionnaireF8084CfaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Section
 *
 * Add a section to organize questions in the questionnaire (admin only).
 *
 * Sections group related questions. Specify section name and display order. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateSectionD39FcfabData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateSectionD39FcfabResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Section
 *
 * Delete a questionnaire section (admin only).
 *
 * Removes the section and all questions within it. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteSection19318E2aData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteSection19318E2aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options
	});
};

/**
 * Update Section
 *
 * Update a questionnaire section's details (admin only).
 *
 * Modify section name or display order. Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateSectionE0Fa70DcData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateSectionE0Fa70DcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Question
 *
 * Add a multiple-choice question to the questionnaire (admin only).
 *
 * Create a question with predefined answer options. After creation, add options via
 * POST /questionnaires/{id}/multiple-choice-questions/{question_id}/options. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcQuestion43Dec0B8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcQuestion43Dec0B8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Question
 *
 * Delete a multiple choice question (admin only).
 *
 * Removes the question and all its options. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcQuestionF3475762Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcQuestionF3475762Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options
	});
};

/**
 * Update Mc Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcQuestionA06807C5Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcQuestionA06807C5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireCreateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcOptionBa160032Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcOptionBa160032Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}/options',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Option
 *
 * Delete a multiple choice option (admin only).
 *
 * Removes the option from a question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcOptionF43385A2Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcOptionF43385A2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options
	});
};

/**
 * Update Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcOption83B4A57cData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcOption83B4A57cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Ft Question
 *
 * Add a free-text question to the questionnaire (admin only).
 *
 * Create an open-ended question for text responses. Can be auto-evaluated by LLM based on
 * scoring criteria. Requires 'edit_questionnaire' permission.
 */
export const questionnaireCreateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateFtQuestion557E1695Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateFtQuestion557E1695Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ft Question
 *
 * Delete a free text question (admin only).
 *
 * Removes the question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteFtQuestion15A314FfData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteFtQuestion15A314FfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options
	});
};

/**
 * Update Ft Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateFtQuestion0B0E996cData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateFtQuestion0B0E996cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Submissions
 *
 * View user submissions for this questionnaire (admin only).
 *
 * Returns submitted questionnaires ready for review. Use this to see who has applied for
 * event access and their responses. Requires 'evaluate_questionnaire' permission.
 *
 * Filtering:
 * - evaluation_status: Filter by evaluation status (approved/rejected/pending review/no_evaluation)
 *
 * Ordering:
 * - submitted_at: Oldest submissions first
 * - -submitted_at: Newest submissions first (default)
 */
export const questionnaireListSubmissions = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireListSubmissionsAd6F89CaData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireListSubmissionsAd6F89CaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions',
		...options
	});
};

/**
 * Get Submission Detail
 *
 * View detailed answers for a specific submission (admin only).
 *
 * Returns all questions and the user's answers, plus automatic evaluation results if available.
 * Use this to review a submission before manual approval/rejection. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireGetSubmissionDetail = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetSubmissionDetail4Db3D1D3Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetSubmissionDetail4Db3D1D3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}',
		...options
	});
};

/**
 * Evaluate Submission
 *
 * Manually approve or reject a questionnaire submission (admin only).
 *
 * Overrides automatic evaluation or provides decision for manual-review questionnaires.
 * Approved users can then RSVP or purchase tickets for the event. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireEvaluateSubmission = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireEvaluateSubmission8584084fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireEvaluateSubmission8584084fResponses,
		QuestionnaireEvaluateSubmission8584084fErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}/evaluate',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Questionnaire Status
 *
 * Update the status of a questionnaire (admin only).
 *
 * Changes the questionnaire status between DRAFT, READY, and PUBLISHED.
 * - DRAFT: Questionnaire is being created/edited
 * - READY: Questionnaire is complete but not yet published
 * - PUBLISHED: Questionnaire is live and can be taken by users
 *
 * Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateQuestionnaireStatus = <
	ThrowOnError extends boolean = false
>(
	options: Options<QuestionnaireUpdateQuestionnaireStatusE489B20cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireUpdateQuestionnaireStatusE489B20cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/status/{status}',
		...options
	});
};

/**
 * Replace Events
 *
 * Replace all assigned events for this questionnaire (admin only).
 *
 * Batch operation to set exactly which events require this questionnaire. Validates that
 * events belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEvents = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEventsE7E4334aData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEventsE7E4334aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event
 *
 * Unassign a single event from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEvent8587600eData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEvent8587600eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Assign Event
 *
 * Assign a single event to this questionnaire (admin only).
 *
 * Adds one event that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEvent955276CeData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEvent955276CeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Replace Event Series
 *
 * Replace all assigned event series for this questionnaire (admin only).
 *
 * Batch operation to set exactly which event series require this questionnaire. Validates that
 * series belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEventSeries114A6Ba7Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEventSeries114A6Ba7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event Series
 *
 * Unassign a single event series from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event series. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEventSeriesDe6929C8Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEventSeriesDe6929C8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Assign Event Series
 *
 * Assign a single event series to this questionnaire (admin only).
 *
 * Adds one event series that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEventSeries2C0BfecfData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEventSeries2C0BfecfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Get General Preferences
 *
 * Get your global preferences that apply across all organizations and events.
 *
 * Returns default notification and privacy settings. These serve as defaults that can be
 * overridden at organization, series, or event level.
 */
export const userpreferencesGetGeneralPreferences = <ThrowOnError extends boolean = false>(
	options?: Options<UserpreferencesGetGeneralPreferences49C3560dData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		UserpreferencesGetGeneralPreferences49C3560dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options
	});
};

/**
 * Update Global Preferences
 *
 * Update your global preference defaults.
 *
 * Modify notification and privacy settings. Set overwrite_children=true to cascade changes
 * to all organization/series/event-level preferences, overriding custom settings.
 */
export const userpreferencesUpdateGlobalPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateGlobalPreferencesC4D1F74bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateGlobalPreferencesC4D1F74bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Organization Preferences
 *
 * Get your preferences for a specific organization.
 *
 * Returns organization-level overrides for notifications and privacy. Falls back to global
 * preferences if not customized.
 */
export const userpreferencesGetOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetOrganizationPreferencesCde6C46bData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetOrganizationPreferencesCde6C46bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options
	});
};

/**
 * Update Organization Preferences
 *
 * Update preferences for a specific organization.
 *
 * Overrides global defaults for this organization. Set overwrite_children=true to cascade
 * changes to all series/event-level preferences within this organization.
 */
export const userpreferencesUpdateOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateOrganizationPreferences96Dd2A88Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateOrganizationPreferences96Dd2A88Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Series Preferences
 *
 * Get your preferences for a specific event series.
 *
 * Returns series-level overrides for notifications. Falls back to organization or global
 * preferences if not customized.
 */
export const userpreferencesGetEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetEventSeriesPreferences99F2Cf77Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventSeriesPreferences99F2Cf77Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options
	});
};

/**
 * Update Event Series Preferences
 *
 * Update preferences for a specific event series.
 *
 * Overrides organization/global defaults for this series. Set overwrite_children=true to
 * cascade changes to all individual event preferences within this series.
 */
export const userpreferencesUpdateEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateEventSeriesPreferencesDf6C5E8bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventSeriesPreferencesDf6C5E8bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Preferences
 *
 * Get your preferences for a specific event.
 *
 * Returns event-level overrides for notifications. Falls back to series, organization, or
 * global preferences if not customized.
 */
export const userpreferencesGetEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesGetEventPreferences3527E568Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventPreferences3527E568Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options
	});
};

/**
 * Update Event Preferences
 *
 * Update preferences for a specific event.
 *
 * Overrides series/organization/global defaults for this event. The most specific preference
 * level always takes precedence.
 */
export const userpreferencesUpdateEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesUpdateEventPreferencesA6A2303cData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventPreferencesA6A2303cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Handle Webhook
 *
 * Process Stripe webhook events for payment processing.
 *
 * Handles payment confirmations, failures, and refunds. Verifies webhook signature for
 * security. This endpoint is called by Stripe, not by clients directly.
 */
export const stripewebhookHandleWebhook = <ThrowOnError extends boolean = false>(
	options?: Options<StripewebhookHandleWebhookE4E959E0Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		StripewebhookHandleWebhookE4E959E0Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/stripe/webhook',
		...options
	});
};

/**
 * List Tags
 *
 * Browse and search all available tags in the system.
 *
 * Tags are used to categorize organizations, events, and series. Supports autocomplete via
 * the 'search' query parameter (e.g., /api/tags/?search=tech). Use this to populate tag
 * selection dropdowns or filters.
 */
export const tagListTags = <ThrowOnError extends boolean = false>(
	options?: Options<TagListTagsFbbc476cData, ThrowOnError>
) => {
	return (options?.client ?? client).get<TagListTagsFbbc476cResponses, unknown, ThrowOnError>({
		url: '/api/tags/',
		...options
	});
};

/**
 * List Cities
 *
 * Search and browse cities from the global database.
 *
 * Supports filtering by country and searching by city name. Use the 'search' parameter
 * for autocomplete functionality. Useful for setting user location preferences or
 * filtering events by location.
 */
export const cityListCities = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCities3A3E5384Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCities3A3E5384Responses, unknown, ThrowOnError>({
		url: '/api/cities/',
		...options
	});
};

/**
 * List Countries
 *
 * Get a list of all countries with cities in the database.
 *
 * Returns country names for filtering cities. Use this to populate country
 * selection dropdowns in location pickers.
 */
export const cityListCountries = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCountries770A2317Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCountries770A2317Responses, unknown, ThrowOnError>(
		{
			url: '/api/cities/countries',
			...options
		}
	);
};

/**
 * Get City
 *
 * Retrieve detailed information for a specific city by ID.
 *
 * Returns city details including name, coordinates, and country. Use this to
 * get full city information after selecting from a search result.
 */
export const cityGetCity = <ThrowOnError extends boolean = false>(
	options: Options<CityGetCityA51F2E73Data, ThrowOnError>
) => {
	return (options.client ?? client).get<CityGetCityA51F2E73Responses, unknown, ThrowOnError>({
		url: '/api/cities/{city_id}',
		...options
	});
};
