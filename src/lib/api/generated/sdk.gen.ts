// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	formDataBodySerializer,
	type Options as Options2,
	type TDataShape
} from './client';
import { client } from './client.gen';
import type {
	AccountDeleteAccountConfirm3Ec44C55Data,
	AccountDeleteAccountConfirm3Ec44C55Responses,
	AccountDeleteAccountRequestCd42D2B8Data,
	AccountDeleteAccountRequestCd42D2B8Responses,
	AccountExportData61D5Dc17Data,
	AccountExportData61D5Dc17Responses,
	AccountMe0E4E4784Data,
	AccountMe0E4E4784Responses,
	AccountRegisterCed95Cc4Data,
	AccountRegisterCed95Cc4Responses,
	AccountResendVerificationEmailC633D16dData,
	AccountResendVerificationEmailC633D16dErrors,
	AccountResendVerificationEmailC633D16dResponses,
	AccountResetPassword25F8Cca4Data,
	AccountResetPassword25F8Cca4Responses,
	AccountResetPasswordRequestA2549D65Data,
	AccountResetPasswordRequestA2549D65Responses,
	AccountUpdateProfile646B0Fb3Data,
	AccountUpdateProfile646B0Fb3Responses,
	AccountVerifyEmail7D56Cf04Data,
	AccountVerifyEmail7D56Cf04Responses,
	ApiApiHealthcheckData,
	ApiApiHealthcheckResponses,
	ApiApiVersionData,
	ApiApiVersionResponses,
	AuthDemoObtainTokenCe9F63A9Data,
	AuthDemoObtainTokenCe9F63A9Responses,
	AuthGoogleLogin751C7778Data,
	AuthGoogleLogin751C7778Responses,
	AuthObtainToken88D8C7F5Data,
	AuthObtainToken88D8C7F5Responses,
	AuthObtainTokenWithOtpCa173D18Data,
	AuthObtainTokenWithOtpCa173D18Responses,
	CityGetCity8470490aData,
	CityGetCity8470490aResponses,
	CityListCitiesC59C4645Data,
	CityListCitiesC59C4645Responses,
	CityListCountries45E5136bData,
	CityListCountries45E5136bResponses,
	DashboardDashboardEvents08Dd8Bf1Data,
	DashboardDashboardEvents08Dd8Bf1Responses,
	DashboardDashboardEventSeries9A47A57aData,
	DashboardDashboardEventSeries9A47A57aResponses,
	DashboardDashboardInvitations1Aa8078bData,
	DashboardDashboardInvitations1Aa8078bResponses,
	DashboardDashboardOrganizationsC27D0B58Data,
	DashboardDashboardOrganizationsC27D0B58Responses,
	EventadminAddTags14F8D230Data,
	EventadminAddTags14F8D230Responses,
	EventadminCheckInTicket97147Da5Data,
	EventadminCheckInTicket97147Da5Errors,
	EventadminCheckInTicket97147Da5Responses,
	EventadminClearTagsE665F8FaData,
	EventadminClearTagsE665F8FaResponses,
	EventadminConfirmTicketPaymentD8146C03Data,
	EventadminConfirmTicketPaymentD8146C03Responses,
	EventadminCreateEventToken5696E4C8Data,
	EventadminCreateEventToken5696E4C8Responses,
	EventadminCreateInvitationsD9719Aa1Data,
	EventadminCreateInvitationsD9719Aa1Errors,
	EventadminCreateInvitationsD9719Aa1Responses,
	EventadminCreateTicketTierC23Bad31Data,
	EventadminCreateTicketTierC23Bad31Responses,
	EventadminDecideInvitationRequest803Be164Data,
	EventadminDecideInvitationRequest803Be164Responses,
	EventadminDeleteEventTokenC0Ef75CfData,
	EventadminDeleteEventTokenC0Ef75CfResponses,
	EventadminDeleteInvitationEndpoint4658B557Data,
	EventadminDeleteInvitationEndpoint4658B557Errors,
	EventadminDeleteInvitationEndpoint4658B557Responses,
	EventadminDeleteTicketTier32E6Bf32Data,
	EventadminDeleteTicketTier32E6Bf32Responses,
	EventadminListEventInvitationRequests549A03A0Data,
	EventadminListEventInvitationRequests549A03A0Responses,
	EventadminListEventTokens6Db5E343Data,
	EventadminListEventTokens6Db5E343Responses,
	EventadminListInvitations69Dd8336Data,
	EventadminListInvitations69Dd8336Responses,
	EventadminListPendingInvitations5Dc95510Data,
	EventadminListPendingInvitations5Dc95510Responses,
	EventadminListPendingTicketsCcf6C45cData,
	EventadminListPendingTicketsCcf6C45cResponses,
	EventadminListTicketTiers55A36F32Data,
	EventadminListTicketTiers55A36F32Responses,
	EventadminRemoveTagsA8D26BacData,
	EventadminRemoveTagsA8D26BacResponses,
	EventadminUpdateEvent4557Bd2eData,
	EventadminUpdateEvent4557Bd2eErrors,
	EventadminUpdateEvent4557Bd2eResponses,
	EventadminUpdateEventStatus95B3Ec33Data,
	EventadminUpdateEventStatus95B3Ec33Responses,
	EventadminUpdateEventTokenE0A8D180Data,
	EventadminUpdateEventTokenE0A8D180Responses,
	EventadminUpdateTicketTier6D8F7D4cData,
	EventadminUpdateTicketTier6D8F7D4cResponses,
	EventadminUploadCoverArt38E307C1Data,
	EventadminUploadCoverArt38E307C1Responses,
	EventadminUploadLogo19D6E71eData,
	EventadminUploadLogo19D6E71eResponses,
	EventClaimInvitation3213126eData,
	EventClaimInvitation3213126eErrors,
	EventClaimInvitation3213126eResponses,
	EventDeleteInvitationRequest50F3Ed50Data,
	EventDeleteInvitationRequest50F3Ed50Responses,
	EventGetEvent52F9Ed99Data,
	EventGetEvent52F9Ed99Responses,
	EventGetEventAttendees4Fc0538dData,
	EventGetEventAttendees4Fc0538dResponses,
	EventGetEventBySlugs1A75C6EaData,
	EventGetEventBySlugs1A75C6EaResponses,
	EventGetMyEventStatusEb40C7DfData,
	EventGetMyEventStatusEb40C7DfResponses,
	EventGetQuestionnaire84B551E2Data,
	EventGetQuestionnaire84B551E2Responses,
	EventListEventsDacbb89bData,
	EventListEventsDacbb89bResponses,
	EventListResources0Ec9D2B7Data,
	EventListResources0Ec9D2B7Responses,
	EventListTiersA2B33Ef6Data,
	EventListTiersA2B33Ef6Responses,
	EventListUserInvitationRequests5708B48bData,
	EventListUserInvitationRequests5708B48bResponses,
	EventRequestInvitation53F83351Data,
	EventRequestInvitation53F83351Errors,
	EventRequestInvitation53F83351Responses,
	EventRsvpEvent3F73Be8fData,
	EventRsvpEvent3F73Be8fErrors,
	EventRsvpEvent3F73Be8fResponses,
	EventseriesadminAddTags0685Cab8Data,
	EventseriesadminAddTags0685Cab8Responses,
	EventseriesadminClearTags09238344Data,
	EventseriesadminClearTags09238344Responses,
	EventseriesadminDeleteEventSeries0182A0CcData,
	EventseriesadminDeleteEventSeries0182A0CcResponses,
	EventseriesadminRemoveTags89B55303Data,
	EventseriesadminRemoveTags89B55303Responses,
	EventseriesadminUpdateEventSeries63D5Fcf0Data,
	EventseriesadminUpdateEventSeries63D5Fcf0Errors,
	EventseriesadminUpdateEventSeries63D5Fcf0Responses,
	EventseriesadminUploadCoverArtBd0Dcd35Data,
	EventseriesadminUploadCoverArtBd0Dcd35Responses,
	EventseriesadminUploadLogoDec47Fd6Data,
	EventseriesadminUploadLogoDec47Fd6Responses,
	EventseriesGetEventSeries1C0Cf7F2Data,
	EventseriesGetEventSeries1C0Cf7F2Responses,
	EventseriesGetEventSeriesBySlugs98414Ab4Data,
	EventseriesGetEventSeriesBySlugs98414Ab4Responses,
	EventseriesListEventSeries4E2583F5Data,
	EventseriesListEventSeries4E2583F5Responses,
	EventseriesListResources3C900790Data,
	EventseriesListResources3C900790Responses,
	EventSubmitQuestionnaireE1D1E169Data,
	EventSubmitQuestionnaireE1D1E169Errors,
	EventSubmitQuestionnaireE1D1E169Responses,
	EventTicketCheckout56D2058bData,
	EventTicketCheckout56D2058bErrors,
	EventTicketCheckout56D2058bResponses,
	EventTicketPwycCheckout0D472E2aData,
	EventTicketPwycCheckout0D472E2aErrors,
	EventTicketPwycCheckout0D472E2aResponses,
	OrganizationadminAddStaff36D9B48aData,
	OrganizationadminAddStaff36D9B48aResponses,
	OrganizationadminAddTags825597D0Data,
	OrganizationadminAddTags825597D0Responses,
	OrganizationadminApproveMembershipRequest306C8D92Data,
	OrganizationadminApproveMembershipRequest306C8D92Responses,
	OrganizationadminClearTagsE5Efa5CcData,
	OrganizationadminClearTagsE5Efa5CcResponses,
	OrganizationadminCreateEvent0C815A46Data,
	OrganizationadminCreateEvent0C815A46Errors,
	OrganizationadminCreateEvent0C815A46Responses,
	OrganizationadminCreateEventSeries471F7A66Data,
	OrganizationadminCreateEventSeries471F7A66Errors,
	OrganizationadminCreateEventSeries471F7A66Responses,
	OrganizationadminCreateOrganizationToken3463F232Data,
	OrganizationadminCreateOrganizationToken3463F232Responses,
	OrganizationadminCreateResourceE9148114Data,
	OrganizationadminCreateResourceE9148114Responses,
	OrganizationadminDeleteOrganizationToken9C4Dffc2Data,
	OrganizationadminDeleteOrganizationToken9C4Dffc2Responses,
	OrganizationadminDeleteResource34F0Fbb3Data,
	OrganizationadminDeleteResource34F0Fbb3Responses,
	OrganizationadminGetResource2E271879Data,
	OrganizationadminGetResource2E271879Responses,
	OrganizationadminListMembers68E47136Data,
	OrganizationadminListMembers68E47136Responses,
	OrganizationadminListMembershipRequests340Fb1FbData,
	OrganizationadminListMembershipRequests340Fb1FbResponses,
	OrganizationadminListOrganizationTokensBa5Ac21cData,
	OrganizationadminListOrganizationTokensBa5Ac21cResponses,
	OrganizationadminListResources3C6199E4Data,
	OrganizationadminListResources3C6199E4Responses,
	OrganizationadminListStaff52826168Data,
	OrganizationadminListStaff52826168Responses,
	OrganizationadminRejectMembershipRequestBd9D3705Data,
	OrganizationadminRejectMembershipRequestBd9D3705Responses,
	OrganizationadminRemoveMember33576875Data,
	OrganizationadminRemoveMember33576875Responses,
	OrganizationadminRemoveStaffB502E5BfData,
	OrganizationadminRemoveStaffB502E5BfResponses,
	OrganizationadminRemoveTags6D398848Data,
	OrganizationadminRemoveTags6D398848Responses,
	OrganizationadminStripeAccountVerifyBe5Cfaa4Data,
	OrganizationadminStripeAccountVerifyBe5Cfaa4Responses,
	OrganizationadminStripeConnectA9390AacData,
	OrganizationadminStripeConnectA9390AacResponses,
	OrganizationadminUpdateOrganizationD8Ebbd83Data,
	OrganizationadminUpdateOrganizationD8Ebbd83Responses,
	OrganizationadminUpdateOrganizationToken358F2C65Data,
	OrganizationadminUpdateOrganizationToken358F2C65Responses,
	OrganizationadminUpdateResource7573B58eData,
	OrganizationadminUpdateResource7573B58eResponses,
	OrganizationadminUpdateStaffPermissionsAb20B4B3Data,
	OrganizationadminUpdateStaffPermissionsAb20B4B3Responses,
	OrganizationadminUploadCoverArtA349A7C2Data,
	OrganizationadminUploadCoverArtA349A7C2Responses,
	OrganizationadminUploadLogoE330AaeeData,
	OrganizationadminUploadLogoE330AaeeResponses,
	OrganizationClaimInvitation97C5F629Data,
	OrganizationClaimInvitation97C5F629Errors,
	OrganizationClaimInvitation97C5F629Responses,
	OrganizationCreateMembershipRequestF6664B2bData,
	OrganizationCreateMembershipRequestF6664B2bResponses,
	OrganizationGetOrganizationB1Bdf28fData,
	OrganizationGetOrganizationB1Bdf28fResponses,
	OrganizationListOrganizations39Bc570aData,
	OrganizationListOrganizations39Bc570aResponses,
	OrganizationListResources4F36D92aData,
	OrganizationListResources4F36D92aResponses,
	OtpDisableOtp90Ac408eData,
	OtpDisableOtp90Ac408eResponses,
	OtpEnableOtp421A36AbData,
	OtpEnableOtp421A36AbResponses,
	OtpSetupOtp50C46262Data,
	OtpSetupOtp50C46262Responses,
	PermissionMyPermissionsC9C10303Data,
	PermissionMyPermissionsC9C10303Responses,
	PotluckClaimPotluckItem2E4F8382Data,
	PotluckClaimPotluckItem2E4F8382Responses,
	PotluckCreatePotluckItem0665A3B5Data,
	PotluckCreatePotluckItem0665A3B5Responses,
	PotluckDeletePotluckItem3Daac9C7Data,
	PotluckDeletePotluckItem3Daac9C7Responses,
	PotluckListPotluckItems7201D243Data,
	PotluckListPotluckItems7201D243Responses,
	PotluckUnclaimPotluckItemBc946101Data,
	PotluckUnclaimPotluckItemBc946101Responses,
	PotluckUpdatePotluckItem211E2C3bData,
	PotluckUpdatePotluckItem211E2C3bResponses,
	QuestionnaireCreateFtQuestion461373AfData,
	QuestionnaireCreateFtQuestion461373AfResponses,
	QuestionnaireCreateMcOption6Ab8221bData,
	QuestionnaireCreateMcOption6Ab8221bResponses,
	QuestionnaireCreateMcQuestion8938422fData,
	QuestionnaireCreateMcQuestion8938422fResponses,
	QuestionnaireCreateOrgQuestionnaire3C3876E5Data,
	QuestionnaireCreateOrgQuestionnaire3C3876E5Errors,
	QuestionnaireCreateOrgQuestionnaire3C3876E5Responses,
	QuestionnaireCreateSection623B234eData,
	QuestionnaireCreateSection623B234eResponses,
	QuestionnaireEvaluateSubmission7F0B5434Data,
	QuestionnaireEvaluateSubmission7F0B5434Errors,
	QuestionnaireEvaluateSubmission7F0B5434Responses,
	QuestionnaireGetOrgQuestionnaire21A6Eaf4Data,
	QuestionnaireGetOrgQuestionnaire21A6Eaf4Responses,
	QuestionnaireGetSubmissionDetailCc91E0B1Data,
	QuestionnaireGetSubmissionDetailCc91E0B1Responses,
	QuestionnaireListOrgQuestionnairesDac6E035Data,
	QuestionnaireListOrgQuestionnairesDac6E035Responses,
	QuestionnaireListSubmissionsC50Aed6aData,
	QuestionnaireListSubmissionsC50Aed6aResponses,
	QuestionnaireUpdateFtQuestionFccc82E2Data,
	QuestionnaireUpdateFtQuestionFccc82E2Responses,
	QuestionnaireUpdateMcOption4435C097Data,
	QuestionnaireUpdateMcOption4435C097Responses,
	QuestionnaireUpdateMcQuestion8Bac54CcData,
	QuestionnaireUpdateMcQuestion8Bac54CcResponses,
	QuestionnaireUpdateSection421893D0Data,
	QuestionnaireUpdateSection421893D0Responses,
	StripewebhookHandleWebhook0Bc4Dda4Data,
	StripewebhookHandleWebhook0Bc4Dda4Responses,
	TagListTags7Eee73BfData,
	TagListTags7Eee73BfResponses,
	TokenRefreshData,
	TokenRefreshResponses,
	UserpreferencesGetEventPreferences55870442Data,
	UserpreferencesGetEventPreferences55870442Responses,
	UserpreferencesGetEventSeriesPreferencesDea4E503Data,
	UserpreferencesGetEventSeriesPreferencesDea4E503Responses,
	UserpreferencesGetGeneralPreferences20Aad2B1Data,
	UserpreferencesGetGeneralPreferences20Aad2B1Responses,
	UserpreferencesGetOrganizationPreferencesDe8459EfData,
	UserpreferencesGetOrganizationPreferencesDe8459EfResponses,
	UserpreferencesUpdateEventPreferences90404660Data,
	UserpreferencesUpdateEventPreferences90404660Responses,
	UserpreferencesUpdateEventSeriesPreferences9Ff9F6D6Data,
	UserpreferencesUpdateEventSeriesPreferences9Ff9F6D6Responses,
	UserpreferencesUpdateGlobalPreferencesAd4C4758Data,
	UserpreferencesUpdateGlobalPreferencesAd4C4758Responses,
	UserpreferencesUpdateOrganizationPreferences529E5340Data,
	UserpreferencesUpdateOrganizationPreferences529E5340Responses
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Version
 *
 * Get the API version.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiVersion = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiVersionData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiVersionResponses, unknown, ThrowOnError>({
		url: '/api/version',
		...options
	});
};

/**
 * Healthcheck
 *
 * Check the health of the API.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiHealthcheck = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiHealthcheckData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiHealthcheckResponses, unknown, ThrowOnError>({
		url: '/api/healthcheck',
		...options
	});
};

/**
 * Obtain Token
 *
 * Authenticate with email and password to obtain JWT access/refresh tokens.
 *
 * For users without 2FA: Returns standard JWT token pair for immediate access.
 * For users with TOTP enabled: Returns a temporary token that must be exchanged for
 * a full token pair via POST /auth/token/pair/otp along with the TOTP code.
 * Users registered via Google SSO must use POST /auth/google/login instead.
 */
export const authObtainToken88D8C7F5 = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainToken88D8C7F5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthObtainToken88D8C7F5Responses, unknown, ThrowOnError>({
		url: '/api/auth/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Refresh Token
 */
export const tokenRefresh = <ThrowOnError extends boolean = false>(
	options: Options<TokenRefreshData, ThrowOnError>
) => {
	return (options.client ?? client).post<TokenRefreshResponses, unknown, ThrowOnError>({
		url: '/api/auth/refresh',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Demo Obtain Token
 *
 * Create and authenticate a demo user account (demo mode only).
 *
 * Automatically creates a user account with the provided credentials if it doesn't exist,
 * then returns JWT tokens. Only available when DEMO_MODE is enabled in settings.
 * Email must end with @example.com.
 */
export const authDemoObtainTokenCe9F63A9 = <ThrowOnError extends boolean = false>(
	options: Options<AuthDemoObtainTokenCe9F63A9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthDemoObtainTokenCe9F63A9Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/demo/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Obtain Token With Otp
 *
 * Complete 2FA authentication by exchanging temporary token and TOTP code for JWT tokens.
 *
 * Call this after POST /auth/token/pair returns a temporary token for a 2FA-enabled user.
 * Validates the TOTP code from the user's authenticator app and returns a standard JWT token
 * pair on success. Returns 401 if the TOTP code is invalid.
 */
export const authObtainTokenWithOtpCa173D18 = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainTokenWithOtpCa173D18Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthObtainTokenWithOtpCa173D18Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/token/pair/otp',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Google Login
 *
 * Authenticate or register via Google SSO using a Google ID token.
 *
 * Verifies the Google ID token, creates a new user if needed, and returns JWT tokens.
 * For existing Google SSO users, this is the only valid login method - they cannot
 * use password-based authentication.
 */
export const authGoogleLogin751C7778 = <ThrowOnError extends boolean = false>(
	options: Options<AuthGoogleLogin751C7778Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthGoogleLogin751C7778Responses, unknown, ThrowOnError>({
		url: '/api/auth/google/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Setup Otp
 *
 * Get the TOTP provisioning URI to configure an authenticator app.
 *
 * Returns a URI (often as QR code) to scan with authenticator apps like Google Authenticator
 * or Authy. Returns 400 if 2FA is already enabled. After scanning, verify the setup with
 * POST /otp/verify to activate 2FA.
 */
export const otpSetupOtp50C46262 = <ThrowOnError extends boolean = false>(
	options?: Options<OtpSetupOtp50C46262Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<OtpSetupOtp50C46262Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/setup',
		...options
	});
};

/**
 * Enable Otp
 *
 * Activate 2FA by verifying the TOTP code from the authenticator app.
 *
 * Call this after GET /otp/setup with a code from your authenticator app to confirm
 * it's configured correctly. On success, activates 2FA for the account. Future logins
 * will require the TOTP code via POST /auth/token/pair/otp. Returns 403 if code is invalid.
 */
export const otpEnableOtp421A36Ab = <ThrowOnError extends boolean = false>(
	options: Options<OtpEnableOtp421A36AbData, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpEnableOtp421A36AbResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Disable Otp
 *
 * Deactivate 2FA after verifying the current TOTP code.
 *
 * Requires the current TOTP code to prevent unauthorized disabling. After disabling,
 * login will only require email and password via POST /auth/token/pair. Returns 403
 * if the TOTP code is invalid.
 */
export const otpDisableOtp90Ac408E = <ThrowOnError extends boolean = false>(
	options: Options<OtpDisableOtp90Ac408eData, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpDisableOtp90Ac408eResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/disable',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Export Data
 *
 * Request a GDPR-compliant export of all personal data.
 *
 * Initiates an asynchronous export of all user data including profile, events, tickets,
 * and submissions. The export will be emailed to the user when ready. Rate-limited to
 * prevent abuse.
 */
export const accountExportData61D5Dc17 = <ThrowOnError extends boolean = false>(
	options?: Options<AccountExportData61D5Dc17Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountExportData61D5Dc17Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/export-data',
		...options
	});
};

/**
 * Me
 *
 * Retrieve the authenticated user's profile information.
 *
 * Returns complete user profile including email, name, location preferences, and 2FA status.
 * Use this to display user info in the UI or verify authentication status.
 */
export const accountMe0E4E4784 = <ThrowOnError extends boolean = false>(
	options?: Options<AccountMe0E4E4784Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<AccountMe0E4E4784Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options
	});
};

/**
 * Update Profile
 *
 * Update the authenticated user's profile information.
 *
 * Allows updating name, location preferences, and other profile fields. Only provided
 * fields are updated. Returns the updated user profile.
 */
export const accountUpdateProfile646B0Fb3 = <ThrowOnError extends boolean = false>(
	options: Options<AccountUpdateProfile646B0Fb3Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		AccountUpdateProfile646B0Fb3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Register
 *
 * Create a new user account with email and password.
 *
 * Creates a new account and sends a verification email. The account is created but not
 * fully active until email is verified via POST /account/verify. If an unverified account
 * with the same email exists, resends the verification email. Returns 400 if a verified
 * account already exists.
 */
export const accountRegisterCed95Cc4 = <ThrowOnError extends boolean = false>(
	options: Options<AccountRegisterCed95Cc4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AccountRegisterCed95Cc4Responses, unknown, ThrowOnError>({
		url: '/api/account/register',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Verify Email
 *
 * Verify email address using the token from the verification email.
 *
 * Call this with the token received via email after registration. On success, activates
 * the account and returns the verified user profile along with JWT tokens for immediate login.
 * The verification token is single-use and expires after a set period.
 */
export const accountVerifyEmail7D56Cf04 = <ThrowOnError extends boolean = false>(
	options: Options<AccountVerifyEmail7D56Cf04Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountVerifyEmail7D56Cf04Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Resend Verification Email
 *
 * Resend the email verification link to the authenticated user.
 *
 * Use this if the original verification email was lost or expired. Returns 400 if the
 * email is already verified. Requires authentication with the unverified account's JWT.
 */
export const accountResendVerificationEmailC633D16D = <ThrowOnError extends boolean = false>(
	options?: Options<AccountResendVerificationEmailC633D16dData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountResendVerificationEmailC633D16dResponses,
		AccountResendVerificationEmailC633D16dErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/verify-resend',
		...options
	});
};

/**
 * Delete Account Request
 *
 * Initiate GDPR-compliant account deletion by sending confirmation email.
 *
 * Sends an email with a deletion confirmation link. The account is not deleted until
 * the user confirms via POST /account/delete-confirm with the token from the email.
 * This two-step process prevents accidental deletions.
 */
export const accountDeleteAccountRequestCd42D2B8 = <ThrowOnError extends boolean = false>(
	options?: Options<AccountDeleteAccountRequestCd42D2B8Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountDeleteAccountRequestCd42D2B8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/delete-request',
		...options
	});
};

/**
 * Delete Account Confirm
 *
 * Permanently delete the account using the confirmation token from email.
 *
 * Call this with the token received via email after POST /account/delete-request.
 * This action is irreversible and deletes all user data. The deletion token is
 * single-use and expires after a set period.
 */
export const accountDeleteAccountConfirm3Ec44C55 = <ThrowOnError extends boolean = false>(
	options: Options<AccountDeleteAccountConfirm3Ec44C55Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountDeleteAccountConfirm3Ec44C55Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/delete-confirm',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password Request
 *
 * Request a password reset by email.
 *
 * Sends a password reset link to the provided email if an account exists. Always returns
 * a success message to prevent user enumeration attacks. Google SSO users cannot use this
 * endpoint. After receiving the email, use POST /account/password/reset with the token.
 */
export const accountResetPasswordRequestA2549D65 = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordRequestA2549D65Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordRequestA2549D65Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset-request',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password
 *
 * Reset password using the token from the password reset email.
 *
 * Call this with the token received via email after POST /account/password/reset-request.
 * The new password must meet security requirements. The reset token is single-use and
 * expires after a set period. After reset, the user must login again with the new password.
 */
export const accountResetPassword25F8Cca4 = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPassword25F8Cca4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPassword25F8Cca4Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Dashboard Organizations
 *
 * View organizations for your dashboard filtered by your relationship to them.
 *
 * Filter by: organizations you own, are staff of, are a member of, or have pending requests to.
 * Shows only organizations you have permission to view. Use this to display "My Organizations"
 * sections in the UI.
 */
export const dashboardDashboardOrganizationsC27D0B58 = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardOrganizationsC27D0B58Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardOrganizationsC27D0B58Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/organizations',
		...options
	});
};

/**
 * Dashboard Events
 *
 * View upcoming events for your dashboard filtered by your relationship to them.
 *
 * Filter by: events you're organizing, attending (RSVP'd or have tickets), invited to, or have
 * requested invitations to. Only shows future events you have permission to view. Use this to
 * display "My Events" sections in the UI.
 */
export const dashboardDashboardEvents08Dd8Bf1 = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEvents08Dd8Bf1Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEvents08Dd8Bf1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/events',
		...options
	});
};

/**
 * Dashboard Event Series
 *
 * View event series for your dashboard filtered by your relationship to them.
 *
 * Filter by: series you're organizing or series you're attending events in. Shows only
 * series you have permission to view. Use this to display "My Series" sections in the UI.
 */
export const dashboardDashboardEventSeries9A47A57A = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventSeries9A47A57aData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventSeries9A47A57aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/event_series',
		...options
	});
};

/**
 * Dashboard Invitations
 *
 * View your pending event invitations.
 *
 * Returns invitations you've received but not yet acted on, sorted by event date (soonest first).
 * Use this to display a "Pending Invitations" section prompting users to RSVP or purchase tickets.
 */
export const dashboardDashboardInvitations1Aa8078B = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardInvitations1Aa8078bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardInvitations1Aa8078bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/invitations',
		...options
	});
};

/**
 * List Organizations
 *
 * Browse and search organizations visible to the current user.
 *
 * Results are filtered by visibility settings and user memberships. By default orders by
 * 'distance' (nearest first based on user location). Can also sort alphabetically by 'name'
 * or reverse with '-name'. Supports text search and filtering.
 */
export const organizationListOrganizations39Bc570A = <ThrowOnError extends boolean = false>(
	options?: Options<OrganizationListOrganizations39Bc570aData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		OrganizationListOrganizations39Bc570aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/',
		...options
	});
};

/**
 * Get Organization
 *
 * Retrieve organization details using its unique slug.
 *
 * Returns full organization information including description, location, member count, and
 * settings. Use this to display the organization profile page.
 */
export const organizationGetOrganizationB1Bdf28F = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationGetOrganizationB1Bdf28fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationGetOrganizationB1Bdf28fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this organization and marked for display on organization page.
 *
 * Returns documents, links, or media files provided by organization admins. Resources may
 * be public or restricted to members only. Supports filtering by type and text search.
 */
export const organizationListResources4F36D92A = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationListResources4F36D92aData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationListResources4F36D92aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/resources',
		...options
	});
};

/**
 * Create Membership Request
 *
 * Submit a request to become a member of this organization.
 *
 * Creates a membership request that organization admins can approve or reject. Being a
 * member may be required to access certain members-only events. Returns the created
 * request for tracking status.
 */
export const organizationCreateMembershipRequestF6664B2B = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationCreateMembershipRequestF6664B2bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationCreateMembershipRequestF6664B2bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/membership-requests',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an organization membership invitation using a token from invitation link.
 *
 * Creates an OrganizationMember record, granting you member status. Members may have
 * access to members-only events and resources. Returns the organization on success,
 * or 400 if the token is invalid/expired.
 */
export const organizationClaimInvitation97C5F629 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationClaimInvitation97C5F629Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationClaimInvitation97C5F629Responses,
		OrganizationClaimInvitation97C5F629Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/claim-invitation/{token}',
		...options
	});
};

/**
 * Update Organization
 *
 * Update organization by slug.
 */
export const organizationadminUpdateOrganizationD8Ebbd83 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateOrganizationD8Ebbd83Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationD8Ebbd83Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Stripe Connect
 *
 * Get a link to onboard the organization to Stripe.
 */
export const organizationadminStripeConnectA9390Aac = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeConnectA9390AacData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeConnectA9390AacResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/connect',
		...options
	});
};

/**
 * Stripe Account Verify
 *
 * Get the organization's Stripe account status.
 */
export const organizationadminStripeAccountVerifyBe5Cfaa4 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeAccountVerifyBe5Cfaa4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeAccountVerifyBe5Cfaa4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/account/verify',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to organization.
 */
export const organizationadminUploadLogoE330Aaee = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadLogoE330AaeeData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadLogoE330AaeeResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to organization.
 */
export const organizationadminUploadCoverArtA349A7C2 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadCoverArtA349A7C2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadCoverArtA349A7C2Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Create Event Series
 *
 * Create a new event series.
 */
export const organizationadminCreateEventSeries471F7A66 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEventSeries471F7A66Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEventSeries471F7A66Responses,
		OrganizationadminCreateEventSeries471F7A66Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Event
 *
 * Create a new event.
 */
export const organizationadminCreateEvent0C815A46 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEvent0C815A46Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEvent0C815A46Responses,
		OrganizationadminCreateEvent0C815A46Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Organization Tokens
 *
 * List all tokens for an organization that the user has admin rights for.
 */
export const organizationadminListOrganizationTokensBa5Ac21C = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListOrganizationTokensBa5Ac21cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListOrganizationTokensBa5Ac21cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens',
		...options
	});
};

/**
 * Create Organization Token
 *
 * Create a new token for an organization.
 */
export const organizationadminCreateOrganizationToken3463F232 = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminCreateOrganizationToken3463F232Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateOrganizationToken3463F232Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Organization Token
 *
 * Delete an organization token.
 */
export const organizationadminDeleteOrganizationToken9C4Dffc2 = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminDeleteOrganizationToken9C4Dffc2Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteOrganizationToken9C4Dffc2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options
	});
};

/**
 * Update Organization Token
 *
 * Update an organization token.
 */
export const organizationadminUpdateOrganizationToken358F2C65 = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateOrganizationToken358F2C65Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationToken358F2C65Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Membership Requests
 *
 * List all membership requests for an organization.
 */
export const organizationadminListMembershipRequests340Fb1Fb = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListMembershipRequests340Fb1FbData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembershipRequests340Fb1FbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests',
		...options
	});
};

/**
 * Approve Membership Request
 *
 * Approve a membership request.
 */
export const organizationadminApproveMembershipRequest306C8D92 = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminApproveMembershipRequest306C8D92Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminApproveMembershipRequest306C8D92Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/approve',
		...options
	});
};

/**
 * Reject Membership Request
 *
 * Reject a membership request.
 */
export const organizationadminRejectMembershipRequestBd9D3705 = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminRejectMembershipRequestBd9D3705Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRejectMembershipRequestBd9D3705Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/reject',
		...options
	});
};

/**
 * List Resources
 *
 * List all resources for a specific organization.
 */
export const organizationadminListResources3C6199E4 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListResources3C6199E4Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListResources3C6199E4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options
	});
};

/**
 * Create Resource
 *
 * Create a new resource for the organization.
 */
export const organizationadminCreateResourceE9148114 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateResourceE9148114Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateResourceE9148114Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Resource
 *
 * Delete a resource from the organization.
 */
export const organizationadminDeleteResource34F0Fbb3 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteResource34F0Fbb3Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteResource34F0Fbb3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Get Resource
 *
 * Retrieve a specific resource for the organization.
 */
export const organizationadminGetResource2E271879 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetResource2E271879Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetResource2E271879Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Update Resource
 *
 * Update a resource for the organization.
 */
export const organizationadminUpdateResource7573B58E = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateResource7573B58eData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateResource7573B58eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Members
 *
 * List all members of an organization.
 */
export const organizationadminListMembers68E47136 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListMembers68E47136Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembers68E47136Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members',
		...options
	});
};

/**
 * Remove Member
 *
 * Remove a member from an organization.
 */
export const organizationadminRemoveMember33576875 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveMember33576875Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveMember33576875Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members/{user_id}',
		...options
	});
};

/**
 * List Staff
 *
 * List all staff of an organization.
 */
export const organizationadminListStaff52826168 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListStaff52826168Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListStaff52826168Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff',
		...options
	});
};

/**
 * Remove Staff
 *
 * Remove a staff member from an organization.
 */
export const organizationadminRemoveStaffB502E5Bf = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveStaffB502E5BfData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveStaffB502E5BfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options
	});
};

/**
 * Add Staff
 *
 * Add a staff member to an organization.
 */
export const organizationadminAddStaff36D9B48A = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddStaff36D9B48aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddStaff36D9B48aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Staff Permissions
 *
 * Update a staff member's permissions.
 */
export const organizationadminUpdateStaffPermissionsAb20B4B3 = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateStaffPermissionsAb20B4B3Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateStaffPermissionsAb20B4B3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}/permissions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Clear akk tags from the organization.
 */
export const organizationadminClearTagsE5Efa5Cc = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminClearTagsE5Efa5CcData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminClearTagsE5Efa5CcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const organizationadminAddTags825597D0 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddTags825597D0Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddTags825597D0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const organizationadminRemoveTags6D398848 = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveTags6D398848Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRemoveTags6D398848Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Events
 *
 * Browse and search events visible to the current user.
 *
 * Results are filtered by visibility rules (public/private), event status, and user permissions.
 * By default shows only upcoming events; set include_past=true to see past events.
 * Ordering: 'distance' (default) shows nearest events based on user location, 'start' shows
 * soonest first, '-start' shows latest first. Supports filtering by organization, series,
 * tags, and text search.
 */
export const eventListEventsDacbb89B = <ThrowOnError extends boolean = false>(
	options?: Options<EventListEventsDacbb89bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<EventListEventsDacbb89bResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an event invitation using a token from an invitation link or email.
 *
 * Creates an EventInvitation record for the user, granting access to the event.
 * Invitations can bypass certain eligibility requirements like membership, capacity limits,
 * and RSVP deadlines. Returns the event on success, or 400 if the token is invalid/expired.
 */
export const eventClaimInvitation3213126E = <ThrowOnError extends boolean = false>(
	options: Options<EventClaimInvitation3213126eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventClaimInvitation3213126eResponses,
		EventClaimInvitation3213126eErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Event Attendees
 *
 * Get the list of confirmed attendees for this event.
 *
 * Returns users who have RSVPed 'yes' or have active tickets. Visibility is controlled by
 * event settings - attendee lists may be hidden from regular attendees. Organization staff
 * and event creators always have access.
 */
export const eventGetEventAttendees4Fc0538D = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventAttendees4Fc0538dData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventAttendees4Fc0538dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/attendee-list',
		...options
	});
};

/**
 * Get My Event Status
 *
 * Check the authenticated user's current status and eligibility for an event.
 *
 * Returns either the user's RSVP/ticket status if they've already joined, or an eligibility
 * check result explaining what steps are needed to attend. The eligibility check validates:
 * event status, RSVP deadline, invitations, organization membership, required questionnaires,
 * capacity limits, and ticket availability. Use this to determine which action to show users
 * (RSVP button, buy ticket, fill questionnaire, etc.).
 */
export const eventGetMyEventStatusEb40C7Df = <ThrowOnError extends boolean = false>(
	options: Options<EventGetMyEventStatusEb40C7DfData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetMyEventStatusEb40C7DfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/my-status',
		...options
	});
};

/**
 * Request Invitation
 *
 * Submit a request to be invited to a private or invite-only event.
 *
 * Creates an invitation request that event organizers can approve or reject. Include an
 * optional message explaining why you want to attend. Returns 400 if you've already
 * submitted a request for this event. Check GET /{event_id}/my-status to see if you
 * need an invitation.
 */
export const eventRequestInvitation53F83351 = <ThrowOnError extends boolean = false>(
	options: Options<EventRequestInvitation53F83351Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRequestInvitation53F83351Responses,
		EventRequestInvitation53F83351Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/request-invitation',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Resources
 *
 * Get supplementary resources attached to this event.
 *
 * Returns resources like documents, links, or media files provided by event organizers.
 * Resources may be public or restricted to attendees only. Supports filtering by type
 * (file, link, etc.) and text search.
 */
export const eventListResources0Ec9D2B7 = <ThrowOnError extends boolean = false>(
	options: Options<EventListResources0Ec9D2B7Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListResources0Ec9D2B7Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/events/{event_id}/resources',
			...options
		}
	);
};

/**
 * Delete Invitation Request
 *
 * Cancel a pending invitation request.
 *
 * Withdraws your invitation request for an event. Only works for your own requests
 * that haven't been decided yet. Returns 404 if the request doesn't exist or doesn't
 * belong to you.
 */
export const eventDeleteInvitationRequest50F3Ed50 = <ThrowOnError extends boolean = false>(
	options: Options<EventDeleteInvitationRequest50F3Ed50Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventDeleteInvitationRequest50F3Ed50Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/invitation-request/{request_id}',
		...options
	});
};

/**
 * List User Invitation Requests
 *
 * View your invitation requests across all events.
 *
 * Returns your invitation requests with their current status (pending/approved/rejected).
 * Filter by event_id to see requests for a specific event, or by status to see approved/
 * rejected requests. Use this to track which events you've requested access to.
 */
export const eventListUserInvitationRequests5708B48B = <ThrowOnError extends boolean = false>(
	options?: Options<EventListUserInvitationRequests5708B48bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventListUserInvitationRequests5708B48bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/me/pending_invitation_requests',
		...options
	});
};

/**
 * Get Event By Slugs
 *
 * Retrieve event details using human-readable organization and event slugs.
 *
 * Use this for clean URLs like /events/tech-meetup/monthly-session. Returns 404 if
 * the event doesn't exist or you don't have permission to view it.
 */
export const eventGetEventBySlugs1A75C6Ea = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventBySlugs1A75C6EaData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventBySlugs1A75C6EaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{org_slug}/{event_slug}',
		...options
	});
};

/**
 * Get Event
 *
 * Retrieve full event details by ID.
 *
 * Returns comprehensive event information including description, location, times, organization,
 * ticket tiers, and visibility settings. Use this to display the event detail page.
 */
export const eventGetEvent52F9Ed99 = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEvent52F9Ed99Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventGetEvent52F9Ed99Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}',
		...options
	});
};

/**
 * Rsvp Event
 *
 * RSVP to a non-ticketed event (answer: 'yes', 'no', or 'maybe').
 *
 * Only works for events where requires_ticket=false. Runs full eligibility check including
 * event status, RSVP deadline, invitations, membership requirements, required questionnaires,
 * and capacity limits. Returns RSVP record on success. On failure, returns eligibility details
 * explaining what's blocking you and what next_step to take (e.g., complete questionnaire,
 * request invitation).
 */
export const eventRsvpEvent3F73Be8F = <ThrowOnError extends boolean = false>(
	options: Options<EventRsvpEvent3F73Be8fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRsvpEvent3F73Be8fResponses,
		EventRsvpEvent3F73Be8fErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/rsvp/{answer}',
		...options
	});
};

/**
 * List Tiers
 *
 * Get all ticket tiers available for purchase at this event.
 *
 * Returns ticket types with pricing, availability, and sales windows. Filters tiers based
 * on user eligibility - you'll only see tiers you're allowed to purchase. Check visibility
 * settings and sales_start_at/sales_end_at to determine which are currently on sale.
 */
export const eventListTiersA2B33Ef6 = <ThrowOnError extends boolean = false>(
	options: Options<EventListTiersA2B33Ef6Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListTiersA2B33Ef6Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/tiers',
		...options
	});
};

/**
 * Ticket Checkout
 *
 * Purchase a fixed-price event ticket.
 *
 * Runs eligibility checks before allowing purchase. For online payment: returns Stripe
 * checkout URL to redirect user for payment. For free/offline/at-the-door tickets: creates
 * ticket immediately and returns it. Cannot be used for pay-what-you-can (PWYC) tiers -
 * use POST /{event_id}/tickets/{tier_id}/checkout/pwyc instead. On eligibility failure,
 * returns 400 with eligibility details explaining what's blocking you and what next_step
 * to take (e.g., complete questionnaire, request invitation, wait for tickets to go on sale).
 */
export const eventTicketCheckout56D2058B = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketCheckout56D2058bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketCheckout56D2058bResponses,
		EventTicketCheckout56D2058bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout',
		...options
	});
};

/**
 * Ticket Pwyc Checkout
 *
 * Purchase a pay-what-you-can (PWYC) ticket with a user-specified amount.
 *
 * Only works for ticket tiers with price_type=PWYC. Validates the amount is within the
 * tier's min/max bounds. Returns Stripe checkout URL for online payment, or creates ticket
 * immediately for free/offline payment methods. Returns 400 for non-PWYC tiers, if amount
 * is out of bounds, or on eligibility failure (with eligibility details explaining what's
 * blocking you and what next_step to take).
 */
export const eventTicketPwycCheckout0D472E2A = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketPwycCheckout0D472E2aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketPwycCheckout0D472E2aResponses,
		EventTicketPwycCheckout0D472E2aErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout/pwyc',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Questionnaire
 *
 * Retrieve a questionnaire required for event admission.
 *
 * Returns the questionnaire structure with all sections and questions. Questions may be
 * shuffled based on questionnaire settings. Use this to display the form that users must
 * complete before accessing the event.
 */
export const eventGetQuestionnaire84B551E2 = <ThrowOnError extends boolean = false>(
	options: Options<EventGetQuestionnaire84B551E2Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetQuestionnaire84B551E2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}',
		...options
	});
};

/**
 * Submit Questionnaire
 *
 * Submit answers to an event admission questionnaire.
 *
 * Validates all required questions are answered. If submission status is 'ready', triggers
 * automatic evaluation (may use LLM for free-text answers). Depending on the questionnaire's
 * evaluation_mode (automatic/manual/hybrid), results may be immediate or pending staff review.
 * Passing the questionnaire may be required before you can RSVP or purchase tickets.
 */
export const eventSubmitQuestionnaireE1D1E169 = <ThrowOnError extends boolean = false>(
	options: Options<EventSubmitQuestionnaireE1D1E169Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventSubmitQuestionnaireE1D1E169Responses,
		EventSubmitQuestionnaireE1D1E169Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}/submit',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Event Token
 *
 * Delete an event token.
 */
export const eventadminDeleteEventTokenC0Ef75Cf = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteEventTokenC0Ef75CfData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteEventTokenC0Ef75CfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options
	});
};

/**
 * Update Event Token
 *
 * Update an event token.
 */
export const eventadminUpdateEventTokenE0A8D180 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventTokenE0A8D180Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventTokenE0A8D180Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Event Tokens
 *
 * List all event tokens.
 */
export const eventadminListEventTokens6Db5E343 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventTokens6Db5E343Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventTokens6Db5E343Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options
	});
};

/**
 * Create Event Token
 *
 * Create a new event token.
 */
export const eventadminCreateEventToken5696E4C8 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateEventToken5696E4C8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateEventToken5696E4C8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Decide Invitation Request
 *
 * Request an invitation to an event.
 */
export const eventadminDecideInvitationRequest803Be164 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDecideInvitationRequest803Be164Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminDecideInvitationRequest803Be164Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-request/{request_id}/{decision}',
		...options
	});
};

/**
 * List Event Invitation Requests
 *
 * List all pending invitation requests for the current user.
 */
export const eventadminListEventInvitationRequests549A03A0 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventInvitationRequests549A03A0Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventInvitationRequests549A03A0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation_requests',
		...options
	});
};

/**
 * Update Event
 *
 * Update event by ID.
 */
export const eventadminUpdateEvent4557Bd2E = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEvent4557Bd2eData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEvent4557Bd2eResponses,
		EventadminUpdateEvent4557Bd2eErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Event Status
 *
 * Update event status to the specified value.
 */
export const eventadminUpdateEventStatus95B3Ec33 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventStatus95B3Ec33Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUpdateEventStatus95B3Ec33Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/actions/update-status/{status}',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to event.
 */
export const eventadminUploadLogo19D6E71E = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadLogo19D6E71eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadLogo19D6E71eResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to event.
 */
export const eventadminUploadCoverArt38E307C1 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadCoverArt38E307C1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadCoverArt38E307C1Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminClearTagsE665F8Fa = <ThrowOnError extends boolean = false>(
	options: Options<EventadminClearTagsE665F8FaData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminClearTagsE665F8FaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const eventadminAddTags14F8D230 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminAddTags14F8D230Data, ThrowOnError>
) => {
	return (options.client ?? client).post<EventadminAddTags14F8D230Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/event-admin/{event_id}/tags',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options.headers
			}
		}
	);
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminRemoveTagsA8D26Bac = <ThrowOnError extends boolean = false>(
	options: Options<EventadminRemoveTagsA8D26BacData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminRemoveTagsA8D26BacResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Ticket Tiers
 *
 * List all ticket tiers for an event.
 */
export const eventadminListTicketTiers55A36F32 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketTiers55A36F32Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketTiers55A36F32Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tiers',
		...options
	});
};

/**
 * Create Ticket Tier
 *
 * Create a new ticket tier for an event.
 */
export const eventadminCreateTicketTierC23Bad31 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateTicketTierC23Bad31Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateTicketTierC23Bad31Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ticket Tier
 *
 * Delete a ticket tier.
 *
 * Note this might raise a 400 if ticket with this tier where already bought.
 */
export const eventadminDeleteTicketTier32E6Bf32 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteTicketTier32E6Bf32Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteTicketTier32E6Bf32Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options
	});
};

/**
 * Update Ticket Tier
 *
 * Update a ticket tier.
 */
export const eventadminUpdateTicketTier6D8F7D4C = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateTicketTier6D8F7D4cData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateTicketTier6D8F7D4cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Tickets
 *
 * List all pending tickets for offline and at-the-door payment methods.
 */
export const eventadminListPendingTicketsCcf6C45C = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingTicketsCcf6C45cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingTicketsCcf6C45cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-tickets',
		...options
	});
};

/**
 * Confirm Ticket Payment
 *
 * Confirm payment for a pending offline ticket and activate it.
 */
export const eventadminConfirmTicketPaymentD8146C03 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminConfirmTicketPaymentD8146C03Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminConfirmTicketPaymentD8146C03Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/confirm-payment',
		...options
	});
};

/**
 * Check In Ticket
 *
 * Check in an attendee by scanning their ticket.
 */
export const eventadminCheckInTicket97147Da5 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCheckInTicket97147Da5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCheckInTicket97147Da5Responses,
		EventadminCheckInTicket97147Da5Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/check-in',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Invitations
 *
 * List all invitations for registered users.
 */
export const eventadminListInvitations69Dd8336 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListInvitations69Dd8336Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListInvitations69Dd8336Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options
	});
};

/**
 * Create Invitations
 *
 * Create direct invitations for users by email addresses.
 */
export const eventadminCreateInvitationsD9719Aa1 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateInvitationsD9719Aa1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateInvitationsD9719Aa1Responses,
		EventadminCreateInvitationsD9719Aa1Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Invitations
 *
 * List all pending invitations for unregistered users.
 */
export const eventadminListPendingInvitations5Dc95510 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingInvitations5Dc95510Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingInvitations5Dc95510Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-invitations',
		...options
	});
};

/**
 * Delete Invitation Endpoint
 *
 * Delete an invitation (registered or pending).
 */
export const eventadminDeleteInvitationEndpoint4658B557 = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteInvitationEndpoint4658B557Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteInvitationEndpoint4658B557Responses,
		EventadminDeleteInvitationEndpoint4658B557Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations/{invitation_type}/{invitation_id}',
		...options
	});
};

/**
 * My Permissions
 *
 * Get a user's permission map, per organization.
 */
export const permissionMyPermissionsC9C10303 = <ThrowOnError extends boolean = false>(
	options?: Options<PermissionMyPermissionsC9C10303Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		PermissionMyPermissionsC9C10303Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/permissions/my-permissions',
		...options
	});
};

/**
 * List Event Series
 *
 * Browse event series (recurring event collections) visible to the current user.
 *
 * Event series group related recurring events (e.g., "Monthly Tech Meetup"). Results are
 * filtered by visibility and permissions. Supports filtering by organization and text search.
 */
export const eventseriesListEventSeries4E2583F5 = <ThrowOnError extends boolean = false>(
	options?: Options<EventseriesListEventSeries4E2583F5Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventseriesListEventSeries4E2583F5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/',
		...options
	});
};

/**
 * Get Event Series By Slugs
 *
 * Retrieve event series details using human-readable organization and series slugs.
 *
 * Use this for clean URLs like /event-series/tech-meetup/monthly-sessions. Returns 404
 * if the series doesn't exist or you don't have permission to view it.
 */
export const eventseriesGetEventSeriesBySlugs98414Ab4 = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesBySlugs98414Ab4Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesBySlugs98414Ab4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{org_slug}/{series_slug}',
		...options
	});
};

/**
 * Get Event Series
 *
 * Retrieve full event series details by ID.
 *
 * Returns series information including description, organization, and settings. Use this
 * to display the series profile page and list related events.
 */
export const eventseriesGetEventSeries1C0Cf7F2 = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeries1C0Cf7F2Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeries1C0Cf7F2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this event series.
 *
 * Returns documents, links, or media files that apply to all events in the series.
 * Resources may be public or restricted based on visibility settings. Supports filtering
 * by type and text search.
 */
export const eventseriesListResources3C900790 = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesListResources3C900790Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesListResources3C900790Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}/resources',
		...options
	});
};

/**
 * Delete Event Series
 *
 * Permanently delete an event series (admin only).
 *
 * Removes the series. Events in the series are not deleted but become standalone.
 * Requires 'delete_event_series' permission (typically organization owners only).
 */
export const eventseriesadminDeleteEventSeries0182A0Cc = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteEventSeries0182A0CcData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteEventSeries0182A0CcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options
	});
};

/**
 * Update Event Series
 *
 * Update event series details (admin only).
 *
 * Modify series name, description, or settings. Requires 'edit_event_series' permission
 * (organization staff/owners). Changes apply to the series but not individual events.
 */
export const eventseriesadminUpdateEventSeries63D5Fcf0 = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUpdateEventSeries63D5Fcf0Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventseriesadminUpdateEventSeries63D5Fcf0Responses,
		EventseriesadminUpdateEventSeries63D5Fcf0Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Upload Logo
 *
 * Upload a logo image for the event series (admin only).
 *
 * Replaces the existing logo. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadLogoDec47Fd6 = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadLogoDec47Fd6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadLogoDec47Fd6Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art/banner image for the event series (admin only).
 *
 * Replaces the existing cover art. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadCoverArtBd0Dcd35 = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadCoverArtBd0Dcd35Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadCoverArtBd0Dcd35Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Remove all tags from the event series (admin only).
 *
 * Clears all categorization tags. Requires 'edit_event_series' permission.
 */
export const eventseriesadminClearTags09238344 = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminClearTags09238344Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminClearTags09238344Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add tags to categorize the event series (admin only).
 *
 * Tags help users discover series through filtering and search. Returns the updated tag list.
 * Requires 'edit_event_series' permission.
 */
export const eventseriesadminAddTags0685Cab8 = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminAddTags0685Cab8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminAddTags0685Cab8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove specific tags from the event series (admin only).
 *
 * Removes only the specified tags, keeping others. Returns the updated tag list. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminRemoveTags89B55303 = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminRemoveTags89B55303Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminRemoveTags89B55303Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Potluck Items
 *
 * View all potluck items for this event.
 *
 * Returns items users can bring, with flags indicating if each item is assigned and if you
 * own it. Available when event.potluck_open=true. Use this to display what's needed and
 * what you've claimed.
 */
export const potluckListPotluckItems7201D243 = <ThrowOnError extends boolean = false>(
	options: Options<PotluckListPotluckItems7201D243Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		PotluckListPotluckItems7201D243Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options
	});
};

/**
 * Create Potluck Item
 *
 * Add a new item to the event's potluck list.
 *
 * Specify item name, quantity, and optional notes. Attendees can claim items via
 * POST /{event_id}/potluck/{item_id}/claim. Requires permission to create potluck items.
 */
export const potluckCreatePotluckItem0665A3B5 = <ThrowOnError extends boolean = false>(
	options: Options<PotluckCreatePotluckItem0665A3B5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckCreatePotluckItem0665A3B5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Potluck Item
 *
 * Remove a potluck item from the event.
 *
 * Deletes the item even if it's been claimed. Requires permission to manage potluck items.
 */
export const potluckDeletePotluckItem3Daac9C7 = <ThrowOnError extends boolean = false>(
	options: Options<PotluckDeletePotluckItem3Daac9C7Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		PotluckDeletePotluckItem3Daac9C7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options
	});
};

/**
 * Update Potluck Item
 *
 * Update a potluck item's details.
 *
 * Modify item name, quantity, or notes. Requires permission to manage potluck items
 * (typically event organizers).
 */
export const potluckUpdatePotluckItem211E2C3B = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUpdatePotluckItem211E2C3bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		PotluckUpdatePotluckItem211E2C3bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Claim Potluck Item
 *
 * Claim a potluck item to bring to the event.
 *
 * Assigns the item to you. Returns 400 if already claimed by someone else. Use this when
 * you want to commit to bringing a specific item.
 */
export const potluckClaimPotluckItem2E4F8382 = <ThrowOnError extends boolean = false>(
	options: Options<PotluckClaimPotluckItem2E4F8382Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckClaimPotluckItem2E4F8382Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/claim',
		...options
	});
};

/**
 * Unclaim Potluck Item
 *
 * Release a potluck item you previously claimed.
 *
 * Makes the item available for others to claim. Returns 404 if the item isn't claimed
 * by you.
 */
export const potluckUnclaimPotluckItemBc946101 = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUnclaimPotluckItemBc946101Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckUnclaimPotluckItemBc946101Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/unclaim',
		...options
	});
};

/**
 * List Org Questionnaires
 *
 * Browse questionnaires you have permission to view or manage.
 *
 * Returns questionnaires from organizations where you have staff/owner access. Use this to
 * find questionnaires to attach to events or review submissions.
 */
export const questionnaireListOrgQuestionnairesDac6E035 = <ThrowOnError extends boolean = false>(
	options?: Options<QuestionnaireListOrgQuestionnairesDac6E035Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		QuestionnaireListOrgQuestionnairesDac6E035Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/',
		...options
	});
};

/**
 * Create Org Questionnaire
 *
 * Create a new admission questionnaire for an organization (admin only).
 *
 * Sets up an empty questionnaire structure. After creation, add sections and questions via
 * POST /questionnaires/{id}/sections and /multiple-choice-questions endpoints. Requires
 * 'create_questionnaire' permission (organization staff/owners).
 */
export const questionnaireCreateOrgQuestionnaire3C3876E5 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateOrgQuestionnaire3C3876E5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateOrgQuestionnaire3C3876E5Responses,
		QuestionnaireCreateOrgQuestionnaire3C3876E5Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{organization_id}/create-questionnaire',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Org Questionnaire
 *
 * Retrieve a questionnaire's details and structure (admin only).
 *
 * Returns the questionnaire with all sections, questions, and settings. Use this to view or
 * edit an existing questionnaire. Requires permission to manage the organization's questionnaires.
 */
export const questionnaireGetOrgQuestionnaire21A6Eaf4 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetOrgQuestionnaire21A6Eaf4Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetOrgQuestionnaire21A6Eaf4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Create Section
 *
 * Add a section to organize questions in the questionnaire (admin only).
 *
 * Sections group related questions. Specify section name and display order. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateSection623B234E = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateSection623B234eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateSection623B234eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Section
 *
 * Update a questionnaire section's details (admin only).
 *
 * Modify section name or display order. Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateSection421893D0 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateSection421893D0Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateSection421893D0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Question
 *
 * Add a multiple-choice question to the questionnaire (admin only).
 *
 * Create a question with predefined answer options. After creation, add options via
 * POST /questionnaires/{id}/multiple-choice-questions/{question_id}/options. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateMcQuestion8938422F = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcQuestion8938422fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcQuestion8938422fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Mc Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcQuestion8Bac54Cc = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcQuestion8Bac54CcData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcQuestion8Bac54CcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireCreateMcOption6Ab8221B = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcOption6Ab8221bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcOption6Ab8221bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}/options',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcOption4435C097 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcOption4435C097Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcOption4435C097Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Ft Question
 *
 * Add a free-text question to the questionnaire (admin only).
 *
 * Create an open-ended question for text responses. Can be auto-evaluated by LLM based on
 * scoring criteria. Requires 'edit_questionnaire' permission.
 */
export const questionnaireCreateFtQuestion461373Af = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateFtQuestion461373AfData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateFtQuestion461373AfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Ft Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateFtQuestionFccc82E2 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateFtQuestionFccc82E2Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateFtQuestionFccc82E2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Submissions
 *
 * View user submissions for this questionnaire (admin only).
 *
 * Returns submitted questionnaires ready for review. Use this to see who has applied for
 * event access and their responses. Requires 'evaluate_questionnaire' permission.
 */
export const questionnaireListSubmissionsC50Aed6A = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireListSubmissionsC50Aed6aData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireListSubmissionsC50Aed6aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions',
		...options
	});
};

/**
 * Get Submission Detail
 *
 * View detailed answers for a specific submission (admin only).
 *
 * Returns all questions and the user's answers, plus automatic evaluation results if available.
 * Use this to review a submission before manual approval/rejection. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireGetSubmissionDetailCc91E0B1 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetSubmissionDetailCc91E0B1Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetSubmissionDetailCc91E0B1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}',
		...options
	});
};

/**
 * Evaluate Submission
 *
 * Manually approve or reject a questionnaire submission (admin only).
 *
 * Overrides automatic evaluation or provides decision for manual-review questionnaires.
 * Approved users can then RSVP or purchase tickets for the event. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireEvaluateSubmission7F0B5434 = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireEvaluateSubmission7F0B5434Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireEvaluateSubmission7F0B5434Responses,
		QuestionnaireEvaluateSubmission7F0B5434Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}/evaluate',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get General Preferences
 *
 * Get your global preferences that apply across all organizations and events.
 *
 * Returns default notification and privacy settings. These serve as defaults that can be
 * overridden at organization, series, or event level.
 */
export const userpreferencesGetGeneralPreferences20Aad2B1 = <ThrowOnError extends boolean = false>(
	options?: Options<UserpreferencesGetGeneralPreferences20Aad2B1Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		UserpreferencesGetGeneralPreferences20Aad2B1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options
	});
};

/**
 * Update Global Preferences
 *
 * Update your global preference defaults.
 *
 * Modify notification and privacy settings. Set overwrite_children=true to cascade changes
 * to all organization/series/event-level preferences, overriding custom settings.
 */
export const userpreferencesUpdateGlobalPreferencesAd4C4758 = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateGlobalPreferencesAd4C4758Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateGlobalPreferencesAd4C4758Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Organization Preferences
 *
 * Get your preferences for a specific organization.
 *
 * Returns organization-level overrides for notifications and privacy. Falls back to global
 * preferences if not customized.
 */
export const userpreferencesGetOrganizationPreferencesDe8459Ef = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetOrganizationPreferencesDe8459EfData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetOrganizationPreferencesDe8459EfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options
	});
};

/**
 * Update Organization Preferences
 *
 * Update preferences for a specific organization.
 *
 * Overrides global defaults for this organization. Set overwrite_children=true to cascade
 * changes to all series/event-level preferences within this organization.
 */
export const userpreferencesUpdateOrganizationPreferences529E5340 = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateOrganizationPreferences529E5340Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateOrganizationPreferences529E5340Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Series Preferences
 *
 * Get your preferences for a specific event series.
 *
 * Returns series-level overrides for notifications. Falls back to organization or global
 * preferences if not customized.
 */
export const userpreferencesGetEventSeriesPreferencesDea4E503 = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetEventSeriesPreferencesDea4E503Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventSeriesPreferencesDea4E503Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options
	});
};

/**
 * Update Event Series Preferences
 *
 * Update preferences for a specific event series.
 *
 * Overrides organization/global defaults for this series. Set overwrite_children=true to
 * cascade changes to all individual event preferences within this series.
 */
export const userpreferencesUpdateEventSeriesPreferences9Ff9F6D6 = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateEventSeriesPreferences9Ff9F6D6Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventSeriesPreferences9Ff9F6D6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Preferences
 *
 * Get your preferences for a specific event.
 *
 * Returns event-level overrides for notifications. Falls back to series, organization, or
 * global preferences if not customized.
 */
export const userpreferencesGetEventPreferences55870442 = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesGetEventPreferences55870442Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventPreferences55870442Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options
	});
};

/**
 * Update Event Preferences
 *
 * Update preferences for a specific event.
 *
 * Overrides series/organization/global defaults for this event. The most specific preference
 * level always takes precedence.
 */
export const userpreferencesUpdateEventPreferences90404660 = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesUpdateEventPreferences90404660Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventPreferences90404660Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Handle Webhook
 *
 * Process Stripe webhook events for payment processing.
 *
 * Handles payment confirmations, failures, and refunds. Verifies webhook signature for
 * security. This endpoint is called by Stripe, not by clients directly.
 */
export const stripewebhookHandleWebhook0Bc4Dda4 = <ThrowOnError extends boolean = false>(
	options?: Options<StripewebhookHandleWebhook0Bc4Dda4Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		StripewebhookHandleWebhook0Bc4Dda4Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/stripe/webhook',
		...options
	});
};

/**
 * List Tags
 *
 * Browse and search all available tags in the system.
 *
 * Tags are used to categorize organizations, events, and series. Supports autocomplete via
 * the 'search' query parameter (e.g., /api/tags/?search=tech). Use this to populate tag
 * selection dropdowns or filters.
 */
export const tagListTags7Eee73Bf = <ThrowOnError extends boolean = false>(
	options?: Options<TagListTags7Eee73BfData, ThrowOnError>
) => {
	return (options?.client ?? client).get<TagListTags7Eee73BfResponses, unknown, ThrowOnError>({
		url: '/api/tags/',
		...options
	});
};

/**
 * List Cities
 *
 * Search and browse cities from the global database.
 *
 * Supports filtering by country and searching by city name. Use the 'search' parameter
 * for autocomplete functionality. Useful for setting user location preferences or
 * filtering events by location.
 */
export const cityListCitiesC59C4645 = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCitiesC59C4645Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCitiesC59C4645Responses, unknown, ThrowOnError>({
		url: '/api/cities/',
		...options
	});
};

/**
 * List Countries
 *
 * Get a list of all countries with cities in the database.
 *
 * Returns country names for filtering cities. Use this to populate country
 * selection dropdowns in location pickers.
 */
export const cityListCountries45E5136B = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCountries45E5136bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCountries45E5136bResponses, unknown, ThrowOnError>(
		{
			url: '/api/cities/countries',
			...options
		}
	);
};

/**
 * Get City
 *
 * Retrieve detailed information for a specific city by ID.
 *
 * Returns city details including name, coordinates, and country. Use this to
 * get full city information after selecting from a search result.
 */
export const cityGetCity8470490A = <ThrowOnError extends boolean = false>(
	options: Options<CityGetCity8470490aData, ThrowOnError>
) => {
	return (options.client ?? client).get<CityGetCity8470490aResponses, unknown, ThrowOnError>({
		url: '/api/cities/{city_id}',
		...options
	});
};
