// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	formDataBodySerializer,
	type Options as Options2,
	type TDataShape,
	urlSearchParamsBodySerializer
} from './client';
import { client } from './client.gen';
import type {
	AccountDeleteAccountConfirm2F96B49fData,
	AccountDeleteAccountConfirm2F96B49fResponses,
	AccountDeleteAccountRequestF18F820aData,
	AccountDeleteAccountRequestF18F820aResponses,
	AccountExportDataF20807E9Data,
	AccountExportDataF20807E9Responses,
	AccountMe6134C767Data,
	AccountMe6134C767Responses,
	AccountRegisterA821604cData,
	AccountRegisterA821604cResponses,
	AccountResendVerificationEmail3Bf1C834Data,
	AccountResendVerificationEmail3Bf1C834Errors,
	AccountResendVerificationEmail3Bf1C834Responses,
	AccountResetPassword92A8Af5cData,
	AccountResetPassword92A8Af5cResponses,
	AccountResetPasswordRequestA3D55017Data,
	AccountResetPasswordRequestA3D55017Responses,
	AccountUpdateProfile3E44910cData,
	AccountUpdateProfile3E44910cResponses,
	AccountVerifyEmail1921Da3fData,
	AccountVerifyEmail1921Da3fResponses,
	ApiApiHealthcheckData,
	ApiApiHealthcheckResponses,
	ApiApiVersionData,
	ApiApiVersionResponses,
	AuthDemoObtainTokenE77Bcec6Data,
	AuthDemoObtainTokenE77Bcec6Responses,
	AuthGoogleLogin59D99625Data,
	AuthGoogleLogin59D99625Responses,
	AuthObtainToken5A040F4dData,
	AuthObtainToken5A040F4dResponses,
	AuthObtainTokenWithOtpE556D4DbData,
	AuthObtainTokenWithOtpE556D4DbResponses,
	CityGetCityA64Dd7F5Data,
	CityGetCityA64Dd7F5Responses,
	CityListCitiesB6C167F3Data,
	CityListCitiesB6C167F3Responses,
	CityListCountries74881EaeData,
	CityListCountries74881EaeResponses,
	DashboardDashboardEvents30157Ed7Data,
	DashboardDashboardEvents30157Ed7Responses,
	DashboardDashboardEventSeries62F57802Data,
	DashboardDashboardEventSeries62F57802Responses,
	DashboardDashboardInvitations09C00B1eData,
	DashboardDashboardInvitations09C00B1eResponses,
	DashboardDashboardOrganizations885Faeb0Data,
	DashboardDashboardOrganizations885Faeb0Responses,
	EventadminAddTags199870C2Data,
	EventadminAddTags199870C2Responses,
	EventadminCancelTicket8C940Df0Data,
	EventadminCancelTicket8C940Df0Responses,
	EventadminCheckInTicket6D69F527Data,
	EventadminCheckInTicket6D69F527Errors,
	EventadminCheckInTicket6D69F527Responses,
	EventadminClearTags87134B46Data,
	EventadminClearTags87134B46Responses,
	EventadminConfirmTicketPayment21530940Data,
	EventadminConfirmTicketPayment21530940Responses,
	EventadminCreateEventToken41B8F8B2Data,
	EventadminCreateEventToken41B8F8B2Responses,
	EventadminCreateInvitations5511Bf2bData,
	EventadminCreateInvitations5511Bf2bErrors,
	EventadminCreateInvitations5511Bf2bResponses,
	EventadminCreateRsvp4Ae40393Data,
	EventadminCreateRsvp4Ae40393Responses,
	EventadminCreateTicketTier69Ed5Ad3Data,
	EventadminCreateTicketTier69Ed5Ad3Responses,
	EventadminDecideInvitationRequest31871F0dData,
	EventadminDecideInvitationRequest31871F0dResponses,
	EventadminDeleteCoverArtDfe1C840Data,
	EventadminDeleteCoverArtDfe1C840Responses,
	EventadminDeleteEventToken1C9CcafdData,
	EventadminDeleteEventToken1C9CcafdResponses,
	EventadminDeleteInvitationEndpoint6Dba7A34Data,
	EventadminDeleteInvitationEndpoint6Dba7A34Errors,
	EventadminDeleteInvitationEndpoint6Dba7A34Responses,
	EventadminDeleteLogo9D2F97D4Data,
	EventadminDeleteLogo9D2F97D4Responses,
	EventadminDeleteRsvpC27D29F5Data,
	EventadminDeleteRsvpC27D29F5Responses,
	EventadminDeleteTicketTier86E0Bf75Data,
	EventadminDeleteTicketTier86E0Bf75Responses,
	EventadminGetRsvpEb4510BaData,
	EventadminGetRsvpEb4510BaResponses,
	EventadminListEventInvitationRequests7Ac895C1Data,
	EventadminListEventInvitationRequests7Ac895C1Responses,
	EventadminListEventTokensE0C2Fd23Data,
	EventadminListEventTokensE0C2Fd23Responses,
	EventadminListInvitations33B6F32bData,
	EventadminListInvitations33B6F32bResponses,
	EventadminListPendingInvitationsD110F8AdData,
	EventadminListPendingInvitationsD110F8AdResponses,
	EventadminListRsvpsF87Eb547Data,
	EventadminListRsvpsF87Eb547Responses,
	EventadminListTickets07Bf39C5Data,
	EventadminListTickets07Bf39C5Responses,
	EventadminListTicketTiersC62Ceb1dData,
	EventadminListTicketTiersC62Ceb1dResponses,
	EventadminRemoveTags6069AcbeData,
	EventadminRemoveTags6069AcbeResponses,
	EventadminUpdateEventAa5A991bData,
	EventadminUpdateEventAa5A991bErrors,
	EventadminUpdateEventAa5A991bResponses,
	EventadminUpdateEventStatus59570164Data,
	EventadminUpdateEventStatus59570164Responses,
	EventadminUpdateEventTokenBa62E645Data,
	EventadminUpdateEventTokenBa62E645Responses,
	EventadminUpdateRsvp5159A3AeData,
	EventadminUpdateRsvp5159A3AeResponses,
	EventadminUpdateTicketTier81Bd5B3aData,
	EventadminUpdateTicketTier81Bd5B3aResponses,
	EventadminUploadCoverArtF161995eData,
	EventadminUploadCoverArtF161995eResponses,
	EventadminUploadLogo5A123201Data,
	EventadminUploadLogo5A123201Responses,
	EventClaimInvitation5734B257Data,
	EventClaimInvitation5734B257Errors,
	EventClaimInvitation5734B257Responses,
	EventDeleteInvitationRequest92A52A8bData,
	EventDeleteInvitationRequest92A52A8bResponses,
	EventGetEventAttendees0162A818Data,
	EventGetEventAttendees0162A818Responses,
	EventGetEventBySlugs3B8816D2Data,
	EventGetEventBySlugs3B8816D2Responses,
	EventGetEventD107D50eData,
	EventGetEventD107D50eResponses,
	EventGetMyEventStatus7400Bc00Data,
	EventGetMyEventStatus7400Bc00Responses,
	EventGetQuestionnaire9Fc5Da77Data,
	EventGetQuestionnaire9Fc5Da77Responses,
	EventListEvents9F2493AaData,
	EventListEvents9F2493AaResponses,
	EventListResources8Ebb1579Data,
	EventListResources8Ebb1579Responses,
	EventListTiersC35F2A56Data,
	EventListTiersC35F2A56Responses,
	EventListUserInvitationRequestsFa77063cData,
	EventListUserInvitationRequestsFa77063cResponses,
	EventRequestInvitation93Acd258Data,
	EventRequestInvitation93Acd258Errors,
	EventRequestInvitation93Acd258Responses,
	EventRsvpEvent4F4E006dData,
	EventRsvpEvent4F4E006dErrors,
	EventRsvpEvent4F4E006dResponses,
	EventseriesadminAddTagsFce03Fc4Data,
	EventseriesadminAddTagsFce03Fc4Responses,
	EventseriesadminClearTagsF0C43952Data,
	EventseriesadminClearTagsF0C43952Responses,
	EventseriesadminDeleteCoverArtD5B6B46cData,
	EventseriesadminDeleteCoverArtD5B6B46cResponses,
	EventseriesadminDeleteEventSeriesDb759345Data,
	EventseriesadminDeleteEventSeriesDb759345Responses,
	EventseriesadminDeleteLogo17E44E93Data,
	EventseriesadminDeleteLogo17E44E93Responses,
	EventseriesadminRemoveTags6D81A1B9Data,
	EventseriesadminRemoveTags6D81A1B9Responses,
	EventseriesadminUpdateEventSeries3C425F5cData,
	EventseriesadminUpdateEventSeries3C425F5cErrors,
	EventseriesadminUpdateEventSeries3C425F5cResponses,
	EventseriesadminUploadCoverArtF448F5AaData,
	EventseriesadminUploadCoverArtF448F5AaResponses,
	EventseriesadminUploadLogo51Ee2623Data,
	EventseriesadminUploadLogo51Ee2623Responses,
	EventseriesGetEventSeries0D6Cd05eData,
	EventseriesGetEventSeries0D6Cd05eResponses,
	EventseriesGetEventSeriesBySlugs9A912675Data,
	EventseriesGetEventSeriesBySlugs9A912675Responses,
	EventseriesListEventSeries196C001bData,
	EventseriesListEventSeries196C001bResponses,
	EventseriesListResourcesB97F6De3Data,
	EventseriesListResourcesB97F6De3Responses,
	EventSubmitQuestionnaire15265Bb1Data,
	EventSubmitQuestionnaire15265Bb1Errors,
	EventSubmitQuestionnaire15265Bb1Responses,
	EventTicketCheckoutCad69FcdData,
	EventTicketCheckoutCad69FcdErrors,
	EventTicketCheckoutCad69FcdResponses,
	EventTicketPwycCheckout804B5Ee7Data,
	EventTicketPwycCheckout804B5Ee7Errors,
	EventTicketPwycCheckout804B5Ee7Responses,
	OrganizationadminAddStaff9Dd80C1fData,
	OrganizationadminAddStaff9Dd80C1fResponses,
	OrganizationadminAddTagsC507Ee77Data,
	OrganizationadminAddTagsC507Ee77Responses,
	OrganizationadminApproveMembershipRequest4B9F31BaData,
	OrganizationadminApproveMembershipRequest4B9F31BaResponses,
	OrganizationadminClearTags44018432Data,
	OrganizationadminClearTags44018432Responses,
	OrganizationadminCreateEvent7153905bData,
	OrganizationadminCreateEvent7153905bErrors,
	OrganizationadminCreateEvent7153905bResponses,
	OrganizationadminCreateEventSeriesEb83B072Data,
	OrganizationadminCreateEventSeriesEb83B072Errors,
	OrganizationadminCreateEventSeriesEb83B072Responses,
	OrganizationadminCreateOrganizationToken79B1F2F0Data,
	OrganizationadminCreateOrganizationToken79B1F2F0Responses,
	OrganizationadminCreateResourceEbf6F49cData,
	OrganizationadminCreateResourceEbf6F49cResponses,
	OrganizationadminDeleteCoverArtD4944679Data,
	OrganizationadminDeleteCoverArtD4944679Responses,
	OrganizationadminDeleteLogoFdb51848Data,
	OrganizationadminDeleteLogoFdb51848Responses,
	OrganizationadminDeleteOrganizationTokenDf10C340Data,
	OrganizationadminDeleteOrganizationTokenDf10C340Responses,
	OrganizationadminDeleteResource60Aad217Data,
	OrganizationadminDeleteResource60Aad217Responses,
	OrganizationadminGetOrganization72Bf92F7Data,
	OrganizationadminGetOrganization72Bf92F7Responses,
	OrganizationadminGetResource7884C80cData,
	OrganizationadminGetResource7884C80cResponses,
	OrganizationadminListMembers891B58CdData,
	OrganizationadminListMembers891B58CdResponses,
	OrganizationadminListMembershipRequests16E7Fb29Data,
	OrganizationadminListMembershipRequests16E7Fb29Responses,
	OrganizationadminListOrganizationTokensB814Ad05Data,
	OrganizationadminListOrganizationTokensB814Ad05Responses,
	OrganizationadminListResourcesE460De19Data,
	OrganizationadminListResourcesE460De19Responses,
	OrganizationadminListStaff5951B367Data,
	OrganizationadminListStaff5951B367Responses,
	OrganizationadminRejectMembershipRequestE7A20845Data,
	OrganizationadminRejectMembershipRequestE7A20845Responses,
	OrganizationadminRemoveMemberFd99B29bData,
	OrganizationadminRemoveMemberFd99B29bResponses,
	OrganizationadminRemoveStaffBe4Eab61Data,
	OrganizationadminRemoveStaffBe4Eab61Responses,
	OrganizationadminRemoveTags21E0F2D1Data,
	OrganizationadminRemoveTags21E0F2D1Responses,
	OrganizationadminStripeAccountVerify63E4755cData,
	OrganizationadminStripeAccountVerify63E4755cResponses,
	OrganizationadminStripeConnect71755113Data,
	OrganizationadminStripeConnect71755113Responses,
	OrganizationadminUpdateOrganizationF15E7067Data,
	OrganizationadminUpdateOrganizationF15E7067Responses,
	OrganizationadminUpdateOrganizationToken1A7A390fData,
	OrganizationadminUpdateOrganizationToken1A7A390fResponses,
	OrganizationadminUpdateResource57B1Abb3Data,
	OrganizationadminUpdateResource57B1Abb3Responses,
	OrganizationadminUpdateStaffPermissions276B4639Data,
	OrganizationadminUpdateStaffPermissions276B4639Responses,
	OrganizationadminUploadCoverArtB913F158Data,
	OrganizationadminUploadCoverArtB913F158Responses,
	OrganizationadminUploadLogoA7Fc3D6fData,
	OrganizationadminUploadLogoA7Fc3D6fResponses,
	OrganizationClaimInvitation09285150Data,
	OrganizationClaimInvitation09285150Errors,
	OrganizationClaimInvitation09285150Responses,
	OrganizationCreateMembershipRequestA2Ab77B1Data,
	OrganizationCreateMembershipRequestA2Ab77B1Responses,
	OrganizationGetOrganizationA7A710FeData,
	OrganizationGetOrganizationA7A710FeResponses,
	OrganizationListOrganizationsC1Ddd404Data,
	OrganizationListOrganizationsC1Ddd404Responses,
	OrganizationListResources678D6C51Data,
	OrganizationListResources678D6C51Responses,
	OtpDisableOtpAa207F4bData,
	OtpDisableOtpAa207F4bResponses,
	OtpEnableOtpE8C63754Data,
	OtpEnableOtpE8C63754Responses,
	OtpSetupOtpAf6E7B6bData,
	OtpSetupOtpAf6E7B6bResponses,
	PermissionMyPermissions7401F39eData,
	PermissionMyPermissions7401F39eResponses,
	PotluckClaimPotluckItem70407274Data,
	PotluckClaimPotluckItem70407274Responses,
	PotluckCreatePotluckItemDe4Ae3EeData,
	PotluckCreatePotluckItemDe4Ae3EeResponses,
	PotluckDeletePotluckItemBe11Edd5Data,
	PotluckDeletePotluckItemBe11Edd5Responses,
	PotluckListPotluckItems25833E29Data,
	PotluckListPotluckItems25833E29Responses,
	PotluckUnclaimPotluckItemA74Bffb8Data,
	PotluckUnclaimPotluckItemA74Bffb8Responses,
	PotluckUpdatePotluckItemA2503115Data,
	PotluckUpdatePotluckItemA2503115Responses,
	QuestionnaireAssignEvent8A9B8Ed6Data,
	QuestionnaireAssignEvent8A9B8Ed6Responses,
	QuestionnaireAssignEventSeries641F9A73Data,
	QuestionnaireAssignEventSeries641F9A73Responses,
	QuestionnaireCreateFtQuestionD10Dac66Data,
	QuestionnaireCreateFtQuestionD10Dac66Responses,
	QuestionnaireCreateMcOptionA4Acf0CaData,
	QuestionnaireCreateMcOptionA4Acf0CaResponses,
	QuestionnaireCreateMcQuestion70502672Data,
	QuestionnaireCreateMcQuestion70502672Responses,
	QuestionnaireCreateOrgQuestionnaireC4993E95Data,
	QuestionnaireCreateOrgQuestionnaireC4993E95Errors,
	QuestionnaireCreateOrgQuestionnaireC4993E95Responses,
	QuestionnaireCreateSection5Dd89657Data,
	QuestionnaireCreateSection5Dd89657Responses,
	QuestionnaireDeleteFtQuestion7Caf5B9bData,
	QuestionnaireDeleteFtQuestion7Caf5B9bResponses,
	QuestionnaireDeleteMcOption913782B3Data,
	QuestionnaireDeleteMcOption913782B3Responses,
	QuestionnaireDeleteMcQuestion9Ad513E7Data,
	QuestionnaireDeleteMcQuestion9Ad513E7Responses,
	QuestionnaireDeleteOrgQuestionnaire9B93671bData,
	QuestionnaireDeleteOrgQuestionnaire9B93671bResponses,
	QuestionnaireDeleteSectionB24368DbData,
	QuestionnaireDeleteSectionB24368DbResponses,
	QuestionnaireEvaluateSubmission1Ffdca31Data,
	QuestionnaireEvaluateSubmission1Ffdca31Errors,
	QuestionnaireEvaluateSubmission1Ffdca31Responses,
	QuestionnaireGetOrgQuestionnaire4B157263Data,
	QuestionnaireGetOrgQuestionnaire4B157263Responses,
	QuestionnaireGetSubmissionDetail358478A9Data,
	QuestionnaireGetSubmissionDetail358478A9Responses,
	QuestionnaireListOrgQuestionnaires40088E58Data,
	QuestionnaireListOrgQuestionnaires40088E58Responses,
	QuestionnaireListSubmissionsCd241550Data,
	QuestionnaireListSubmissionsCd241550Responses,
	QuestionnaireReplaceEventsAf266D92Data,
	QuestionnaireReplaceEventsAf266D92Responses,
	QuestionnaireReplaceEventSeries2E0Ef06bData,
	QuestionnaireReplaceEventSeries2E0Ef06bResponses,
	QuestionnaireUnassignEvent62E5A2E5Data,
	QuestionnaireUnassignEvent62E5A2E5Responses,
	QuestionnaireUnassignEventSeriesCa91D13eData,
	QuestionnaireUnassignEventSeriesCa91D13eResponses,
	QuestionnaireUpdateFtQuestion4240F6A0Data,
	QuestionnaireUpdateFtQuestion4240F6A0Responses,
	QuestionnaireUpdateMcOption66348BaeData,
	QuestionnaireUpdateMcOption66348BaeResponses,
	QuestionnaireUpdateMcQuestion93188079Data,
	QuestionnaireUpdateMcQuestion93188079Responses,
	QuestionnaireUpdateOrgQuestionnaire2C772505Data,
	QuestionnaireUpdateOrgQuestionnaire2C772505Responses,
	QuestionnaireUpdateQuestionnaireStatus8274B884Data,
	QuestionnaireUpdateQuestionnaireStatus8274B884Responses,
	QuestionnaireUpdateSection5E5Fe926Data,
	QuestionnaireUpdateSection5E5Fe926Responses,
	StripewebhookHandleWebhookF9100C60Data,
	StripewebhookHandleWebhookF9100C60Responses,
	TagListTags4Bedc744Data,
	TagListTags4Bedc744Responses,
	TokenRefreshData,
	TokenRefreshResponses,
	UserpreferencesGetEventPreferences7557D1E9Data,
	UserpreferencesGetEventPreferences7557D1E9Responses,
	UserpreferencesGetEventSeriesPreferencesD8436AfbData,
	UserpreferencesGetEventSeriesPreferencesD8436AfbResponses,
	UserpreferencesGetGeneralPreferences0B42Ee02Data,
	UserpreferencesGetGeneralPreferences0B42Ee02Responses,
	UserpreferencesGetOrganizationPreferences128D93A1Data,
	UserpreferencesGetOrganizationPreferences128D93A1Responses,
	UserpreferencesUpdateEventPreferencesFc456B90Data,
	UserpreferencesUpdateEventPreferencesFc456B90Responses,
	UserpreferencesUpdateEventSeriesPreferences8389A0EcData,
	UserpreferencesUpdateEventSeriesPreferences8389A0EcResponses,
	UserpreferencesUpdateGlobalPreferencesB7Eaf518Data,
	UserpreferencesUpdateGlobalPreferencesB7Eaf518Responses,
	UserpreferencesUpdateOrganizationPreferences6Bba6A88Data,
	UserpreferencesUpdateOrganizationPreferences6Bba6A88Responses
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Version
 *
 * Get the API version.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiVersion = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiVersionData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiVersionResponses, unknown, ThrowOnError>({
		url: '/api/version',
		...options
	});
};

/**
 * Healthcheck
 *
 * Check the health of the API.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiHealthcheck = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiHealthcheckData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiHealthcheckResponses, unknown, ThrowOnError>({
		url: '/api/healthcheck',
		...options
	});
};

/**
 * Obtain Token
 *
 * Authenticate with email and password to obtain JWT access/refresh tokens.
 *
 * For users without 2FA: Returns standard JWT token pair for immediate access.
 * For users with TOTP enabled: Returns a temporary token that must be exchanged for
 * a full token pair via POST /auth/token/pair/otp along with the TOTP code.
 * Users registered via Google SSO must use POST /auth/google/login instead.
 */
export const authObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainToken5A040F4dData, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthObtainToken5A040F4dResponses, unknown, ThrowOnError>({
		url: '/api/auth/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Refresh Token
 */
export const tokenRefresh = <ThrowOnError extends boolean = false>(
	options: Options<TokenRefreshData, ThrowOnError>
) => {
	return (options.client ?? client).post<TokenRefreshResponses, unknown, ThrowOnError>({
		url: '/api/auth/refresh',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Demo Obtain Token
 *
 * Create and authenticate a demo user account (demo mode only).
 *
 * Automatically creates a user account with the provided credentials if it doesn't exist,
 * then returns JWT tokens. Only available when DEMO_MODE is enabled in settings.
 * Email must end with @example.com.
 */
export const authDemoObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthDemoObtainTokenE77Bcec6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthDemoObtainTokenE77Bcec6Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/demo/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Obtain Token With Otp
 *
 * Complete 2FA authentication by exchanging temporary token and TOTP code for JWT tokens.
 *
 * Call this after POST /auth/token/pair returns a temporary token for a 2FA-enabled user.
 * Validates the TOTP code from the user's authenticator app and returns a standard JWT token
 * pair on success. Returns 401 if the TOTP code is invalid.
 */
export const authObtainTokenWithOtp = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainTokenWithOtpE556D4DbData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthObtainTokenWithOtpE556D4DbResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/token/pair/otp',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Google Login
 *
 * Authenticate or register via Google SSO using a Google ID token.
 *
 * Verifies the Google ID token, creates a new user if needed, and returns JWT tokens.
 * For existing Google SSO users, this is the only valid login method - they cannot
 * use password-based authentication.
 */
export const authGoogleLogin = <ThrowOnError extends boolean = false>(
	options: Options<AuthGoogleLogin59D99625Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthGoogleLogin59D99625Responses, unknown, ThrowOnError>({
		url: '/api/auth/google/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Setup Otp
 *
 * Get the TOTP provisioning URI to configure an authenticator app.
 *
 * Returns a URI (often as QR code) to scan with authenticator apps like Google Authenticator
 * or Authy. Returns 400 if 2FA is already enabled. After scanning, verify the setup with
 * POST /otp/verify to activate 2FA.
 */
export const otpSetupOtp = <ThrowOnError extends boolean = false>(
	options?: Options<OtpSetupOtpAf6E7B6bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<OtpSetupOtpAf6E7B6bResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/setup',
		...options
	});
};

/**
 * Enable Otp
 *
 * Activate 2FA by verifying the TOTP code from the authenticator app.
 *
 * Call this after GET /otp/setup with a code from your authenticator app to confirm
 * it's configured correctly. On success, activates 2FA for the account. Future logins
 * will require the TOTP code via POST /auth/token/pair/otp. Returns 403 if code is invalid.
 */
export const otpEnableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpEnableOtpE8C63754Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpEnableOtpE8C63754Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Disable Otp
 *
 * Deactivate 2FA after verifying the current TOTP code.
 *
 * Requires the current TOTP code to prevent unauthorized disabling. After disabling,
 * login will only require email and password via POST /auth/token/pair. Returns 403
 * if the TOTP code is invalid.
 */
export const otpDisableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpDisableOtpAa207F4bData, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpDisableOtpAa207F4bResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/disable',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Export Data
 *
 * Request a GDPR-compliant export of all personal data.
 *
 * Initiates an asynchronous export of all user data including profile, events, tickets,
 * and submissions. The export will be emailed to the user when ready. Rate-limited to
 * prevent abuse.
 */
export const accountExportData = <ThrowOnError extends boolean = false>(
	options?: Options<AccountExportDataF20807E9Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountExportDataF20807E9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/export-data',
		...options
	});
};

/**
 * Me
 *
 * Retrieve the authenticated user's profile information.
 *
 * Returns complete user profile including email, name, location preferences, and 2FA status.
 * Use this to display user info in the UI or verify authentication status.
 */
export const accountMe = <ThrowOnError extends boolean = false>(
	options?: Options<AccountMe6134C767Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<AccountMe6134C767Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options
	});
};

/**
 * Update Profile
 *
 * Update the authenticated user's profile information.
 *
 * Allows updating name, location preferences, and other profile fields. Only provided
 * fields are updated. Returns the updated user profile.
 */
export const accountUpdateProfile = <ThrowOnError extends boolean = false>(
	options: Options<AccountUpdateProfile3E44910cData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		AccountUpdateProfile3E44910cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Register
 *
 * Create a new user account with email and password.
 *
 * Creates a new account and sends a verification email. The account is created but not
 * fully active until email is verified via POST /account/verify. If an unverified account
 * with the same email exists, resends the verification email. Returns 400 if a verified
 * account already exists.
 */
export const accountRegister = <ThrowOnError extends boolean = false>(
	options: Options<AccountRegisterA821604cData, ThrowOnError>
) => {
	return (options.client ?? client).post<AccountRegisterA821604cResponses, unknown, ThrowOnError>({
		url: '/api/account/register',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Verify Email
 *
 * Verify email address using the token from the verification email.
 *
 * Call this with the token received via email after registration. On success, activates
 * the account and returns the verified user profile along with JWT tokens for immediate login.
 * The verification token is single-use and expires after a set period.
 */
export const accountVerifyEmail = <ThrowOnError extends boolean = false>(
	options: Options<AccountVerifyEmail1921Da3fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountVerifyEmail1921Da3fResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Resend Verification Email
 *
 * Resend the email verification link to the authenticated user.
 *
 * Use this if the original verification email was lost or expired. Returns 400 if the
 * email is already verified. Requires authentication with the unverified account's JWT.
 */
export const accountResendVerificationEmail = <ThrowOnError extends boolean = false>(
	options?: Options<AccountResendVerificationEmail3Bf1C834Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountResendVerificationEmail3Bf1C834Responses,
		AccountResendVerificationEmail3Bf1C834Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/verify-resend',
		...options
	});
};

/**
 * Delete Account Request
 *
 * Initiate GDPR-compliant account deletion by sending confirmation email.
 *
 * Sends an email with a deletion confirmation link. The account is not deleted until
 * the user confirms via POST /account/delete-confirm with the token from the email.
 * This two-step process prevents accidental deletions.
 */
export const accountDeleteAccountRequest = <ThrowOnError extends boolean = false>(
	options?: Options<AccountDeleteAccountRequestF18F820aData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountDeleteAccountRequestF18F820aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/delete-request',
		...options
	});
};

/**
 * Delete Account Confirm
 *
 * Permanently delete the account using the confirmation token from email.
 *
 * Call this with the token received via email after POST /account/delete-request.
 * This action is irreversible and deletes all user data. The deletion token is
 * single-use and expires after a set period.
 */
export const accountDeleteAccountConfirm = <ThrowOnError extends boolean = false>(
	options: Options<AccountDeleteAccountConfirm2F96B49fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountDeleteAccountConfirm2F96B49fResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/delete-confirm',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password Request
 *
 * Request a password reset by email.
 *
 * Sends a password reset link to the provided email if an account exists. Always returns
 * a success message to prevent user enumeration attacks. Google SSO users cannot use this
 * endpoint. After receiving the email, use POST /account/password/reset with the token.
 */
export const accountResetPasswordRequest = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordRequestA3D55017Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordRequestA3D55017Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset-request',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password
 *
 * Reset password using the token from the password reset email.
 *
 * Call this with the token received via email after POST /account/password/reset-request.
 * The new password must meet security requirements. The reset token is single-use and
 * expires after a set period. After reset, the user must login again with the new password.
 */
export const accountResetPassword = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPassword92A8Af5cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPassword92A8Af5cResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Dashboard Organizations
 *
 * View organizations for your dashboard filtered by your relationship to them.
 *
 * Filter by: organizations you own, are staff of, are a member of, or have pending requests to.
 * Shows only organizations you have permission to view. Use this to display "My Organizations"
 * sections in the UI.
 */
export const dashboardDashboardOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardOrganizations885Faeb0Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardOrganizations885Faeb0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/organizations',
		...options
	});
};

/**
 * Dashboard Events
 *
 * View upcoming events for your dashboard filtered by your relationship to them.
 *
 * Filter by: events you're organizing, attending (RSVP'd or have tickets), invited to, or have
 * requested invitations to. Only shows future events you have permission to view. Use this to
 * display "My Events" sections in the UI.
 */
export const dashboardDashboardEvents = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEvents30157Ed7Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEvents30157Ed7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/events',
		...options
	});
};

/**
 * Dashboard Event Series
 *
 * View event series for your dashboard filtered by your relationship to them.
 *
 * Filter by: series you're organizing or series you're attending events in. Shows only
 * series you have permission to view. Use this to display "My Series" sections in the UI.
 */
export const dashboardDashboardEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventSeries62F57802Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventSeries62F57802Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/event_series',
		...options
	});
};

/**
 * Dashboard Invitations
 *
 * View your pending event invitations.
 *
 * Returns invitations you've received but not yet acted on, sorted by event date (soonest first).
 * Use this to display a "Pending Invitations" section prompting users to RSVP or purchase tickets.
 */
export const dashboardDashboardInvitations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardInvitations09C00B1eData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardInvitations09C00B1eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/invitations',
		...options
	});
};

/**
 * List Organizations
 *
 * Browse and search organizations visible to the current user.
 *
 * Results are filtered by visibility settings and user memberships. By default orders by
 * 'distance' (nearest first based on user location). Can also sort alphabetically by 'name'
 * or reverse with '-name'. Supports text search and filtering.
 */
export const organizationListOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<OrganizationListOrganizationsC1Ddd404Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		OrganizationListOrganizationsC1Ddd404Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/',
		...options
	});
};

/**
 * Get Organization
 *
 * Retrieve organization details using its unique slug.
 *
 * Returns full organization information including description, location, member count, and
 * settings. Use this to display the organization profile page.
 */
export const organizationGetOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationGetOrganizationA7A710FeData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationGetOrganizationA7A710FeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this organization and marked for display on organization page.
 *
 * Returns documents, links, or media files provided by organization admins. Resources may
 * be public or restricted to members only. Supports filtering by type and text search.
 */
export const organizationListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationListResources678D6C51Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationListResources678D6C51Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/resources',
		...options
	});
};

/**
 * Create Membership Request
 *
 * Submit a request to become a member of this organization.
 *
 * Creates a membership request that organization admins can approve or reject. Being a
 * member may be required to access certain members-only events. Returns the created
 * request for tracking status.
 */
export const organizationCreateMembershipRequest = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationCreateMembershipRequestA2Ab77B1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationCreateMembershipRequestA2Ab77B1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/membership-requests',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an organization membership invitation using a token from invitation link.
 *
 * Creates an OrganizationMember record, granting you member status. Members may have
 * access to members-only events and resources. Returns the organization on success,
 * or 400 if the token is invalid/expired.
 */
export const organizationClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationClaimInvitation09285150Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationClaimInvitation09285150Responses,
		OrganizationClaimInvitation09285150Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Organization
 *
 * Get comprehensive organization details including all platform fee and Stripe fields.
 */
export const organizationadminGetOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetOrganization72Bf92F7Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetOrganization72Bf92F7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options
	});
};

/**
 * Update Organization
 *
 * Update organization by slug.
 */
export const organizationadminUpdateOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateOrganizationF15E7067Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationF15E7067Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Stripe Connect
 *
 * Get a link to onboard the organization to Stripe.
 */
export const organizationadminStripeConnect = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeConnect71755113Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeConnect71755113Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/connect',
		...options
	});
};

/**
 * Stripe Account Verify
 *
 * Get the organization's Stripe account status.
 */
export const organizationadminStripeAccountVerify = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeAccountVerify63E4755cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeAccountVerify63E4755cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/account/verify',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to organization.
 */
export const organizationadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadLogoA7Fc3D6fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadLogoA7Fc3D6fResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to organization.
 */
export const organizationadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadCoverArtB913F158Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadCoverArtB913F158Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from organization.
 */
export const organizationadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteLogoFdb51848Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteLogoFdb51848Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from organization.
 */
export const organizationadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteCoverArtD4944679Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteCoverArtD4944679Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-cover-art',
		...options
	});
};

/**
 * Create Event Series
 *
 * Create a new event series.
 */
export const organizationadminCreateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEventSeriesEb83B072Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEventSeriesEb83B072Responses,
		OrganizationadminCreateEventSeriesEb83B072Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Event
 *
 * Create a new event.
 */
export const organizationadminCreateEvent = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEvent7153905bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEvent7153905bResponses,
		OrganizationadminCreateEvent7153905bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Organization Tokens
 *
 * List all tokens for an organization that the user has admin rights for.
 */
export const organizationadminListOrganizationTokens = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListOrganizationTokensB814Ad05Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListOrganizationTokensB814Ad05Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens',
		...options
	});
};

/**
 * Create Organization Token
 *
 * Create a new token for an organization.
 */
export const organizationadminCreateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminCreateOrganizationToken79B1F2F0Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateOrganizationToken79B1F2F0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Organization Token
 *
 * Delete an organization token.
 */
export const organizationadminDeleteOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminDeleteOrganizationTokenDf10C340Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteOrganizationTokenDf10C340Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options
	});
};

/**
 * Update Organization Token
 *
 * Update an organization token.
 */
export const organizationadminUpdateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateOrganizationToken1A7A390fData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationToken1A7A390fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Membership Requests
 *
 * List all membership requests for an organization.
 */
export const organizationadminListMembershipRequests = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListMembershipRequests16E7Fb29Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembershipRequests16E7Fb29Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests',
		...options
	});
};

/**
 * Approve Membership Request
 *
 * Approve a membership request.
 */
export const organizationadminApproveMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminApproveMembershipRequest4B9F31BaData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminApproveMembershipRequest4B9F31BaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/approve',
		...options
	});
};

/**
 * Reject Membership Request
 *
 * Reject a membership request.
 */
export const organizationadminRejectMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminRejectMembershipRequestE7A20845Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRejectMembershipRequestE7A20845Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/reject',
		...options
	});
};

/**
 * List Resources
 *
 * List all resources for a specific organization.
 */
export const organizationadminListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListResourcesE460De19Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListResourcesE460De19Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options
	});
};

/**
 * Create Resource
 *
 * Create a new resource for the organization.
 *
 * Accepts multipart/form-data with individual form fields for each schema property.
 * For FILE type resources, include the file parameter.
 */
export const organizationadminCreateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateResourceEbf6F49cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateResourceEbf6F49cResponses,
		unknown,
		ThrowOnError
	>({
		...urlSearchParamsBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options,
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded',
			...options.headers
		}
	});
};

/**
 * Delete Resource
 *
 * Delete a resource from the organization.
 */
export const organizationadminDeleteResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteResource60Aad217Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteResource60Aad217Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Get Resource
 *
 * Retrieve a specific resource for the organization.
 */
export const organizationadminGetResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetResource7884C80cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetResource7884C80cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Update Resource
 *
 * Update a resource for the organization.
 */
export const organizationadminUpdateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateResource57B1Abb3Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateResource57B1Abb3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Members
 *
 * List all members of an organization.
 */
export const organizationadminListMembers = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListMembers891B58CdData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembers891B58CdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members',
		...options
	});
};

/**
 * Remove Member
 *
 * Remove a member from an organization.
 */
export const organizationadminRemoveMember = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveMemberFd99B29bData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveMemberFd99B29bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members/{user_id}',
		...options
	});
};

/**
 * List Staff
 *
 * List all staff of an organization.
 */
export const organizationadminListStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListStaff5951B367Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListStaff5951B367Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff',
		...options
	});
};

/**
 * Remove Staff
 *
 * Remove a staff member from an organization.
 */
export const organizationadminRemoveStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveStaffBe4Eab61Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveStaffBe4Eab61Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options
	});
};

/**
 * Add Staff
 *
 * Add a staff member to an organization.
 */
export const organizationadminAddStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddStaff9Dd80C1fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddStaff9Dd80C1fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Staff Permissions
 *
 * Update a staff member's permissions.
 */
export const organizationadminUpdateStaffPermissions = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateStaffPermissions276B4639Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateStaffPermissions276B4639Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}/permissions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Clear akk tags from the organization.
 */
export const organizationadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminClearTags44018432Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminClearTags44018432Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const organizationadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddTagsC507Ee77Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddTagsC507Ee77Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const organizationadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveTags21E0F2D1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRemoveTags21E0F2D1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Events
 *
 * Browse and search events visible to the current user.
 *
 * Results are filtered by visibility rules (public/private), event status, and user permissions.
 * By default shows only upcoming events; set include_past=true to see past events.
 * Ordering: 'distance' (default) shows nearest events based on user location, 'start' shows
 * soonest first, '-start' shows latest first. Supports filtering by organization, series,
 * tags, and text search.
 */
export const eventListEvents = <ThrowOnError extends boolean = false>(
	options?: Options<EventListEvents9F2493AaData, ThrowOnError>
) => {
	return (options?.client ?? client).get<EventListEvents9F2493AaResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an event invitation using a token from an invitation link or email.
 *
 * Creates an EventInvitation record for the user, granting access to the event.
 * Invitations can bypass certain eligibility requirements like membership, capacity limits,
 * and RSVP deadlines. Returns the event on success, or 400 if the token is invalid/expired.
 */
export const eventClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventClaimInvitation5734B257Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventClaimInvitation5734B257Responses,
		EventClaimInvitation5734B257Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Event Attendees
 *
 * Get the list of confirmed attendees for this event.
 *
 * Returns users who have RSVPed 'yes' or have active tickets. Visibility is controlled by
 * event settings - attendee lists may be hidden from regular attendees. Organization staff
 * and event creators always have access.
 */
export const eventGetEventAttendees = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventAttendees0162A818Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventAttendees0162A818Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/attendee-list',
		...options
	});
};

/**
 * Get My Event Status
 *
 * Check the authenticated user's current status and eligibility for an event.
 *
 * Returns either the user's RSVP/ticket status if they've already joined, or an eligibility
 * check result explaining what steps are needed to attend. The eligibility check validates:
 * event status, RSVP deadline, invitations, organization membership, required questionnaires,
 * capacity limits, and ticket availability. Use this to determine which action to show users
 * (RSVP button, buy ticket, fill questionnaire, etc.).
 */
export const eventGetMyEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventGetMyEventStatus7400Bc00Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetMyEventStatus7400Bc00Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/my-status',
		...options
	});
};

/**
 * Request Invitation
 *
 * Submit a request to be invited to a private or invite-only event.
 *
 * Creates an invitation request that event organizers can approve or reject. Include an
 * optional message explaining why you want to attend. Returns 400 if you've already
 * submitted a request for this event. Check GET /{event_id}/my-status to see if you
 * need an invitation.
 */
export const eventRequestInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventRequestInvitation93Acd258Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRequestInvitation93Acd258Responses,
		EventRequestInvitation93Acd258Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/request-invitation',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Resources
 *
 * Get supplementary resources attached to this event.
 *
 * Returns resources like documents, links, or media files provided by event organizers.
 * Resources may be public or restricted to attendees only. Supports filtering by type
 * (file, link, etc.) and text search.
 */
export const eventListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventListResources8Ebb1579Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListResources8Ebb1579Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/events/{event_id}/resources',
			...options
		}
	);
};

/**
 * Delete Invitation Request
 *
 * Cancel a pending invitation request.
 *
 * Withdraws your invitation request for an event. Only works for your own requests
 * that haven't been decided yet. Returns 404 if the request doesn't exist or doesn't
 * belong to you.
 */
export const eventDeleteInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventDeleteInvitationRequest92A52A8bData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventDeleteInvitationRequest92A52A8bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/invitation-request/{request_id}',
		...options
	});
};

/**
 * List User Invitation Requests
 *
 * View your invitation requests across all events.
 *
 * Returns your invitation requests with their current status (pending/approved/rejected).
 * Filter by event_id to see requests for a specific event, or by status to see approved/
 * rejected requests. Use this to track which events you've requested access to.
 */
export const eventListUserInvitationRequests = <ThrowOnError extends boolean = false>(
	options?: Options<EventListUserInvitationRequestsFa77063cData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventListUserInvitationRequestsFa77063cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/me/pending_invitation_requests',
		...options
	});
};

/**
 * Get Event By Slugs
 *
 * Retrieve event details using human-readable organization and event slugs.
 *
 * Use this for clean URLs like /events/tech-meetup/monthly-session. Returns 404 if
 * the event doesn't exist or you don't have permission to view it.
 */
export const eventGetEventBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventBySlugs3B8816D2Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventBySlugs3B8816D2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{org_slug}/{event_slug}',
		...options
	});
};

/**
 * Get Event
 *
 * Retrieve full event details by ID.
 *
 * Returns comprehensive event information including description, location, times, organization,
 * ticket tiers, and visibility settings. Use this to display the event detail page.
 */
export const eventGetEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventD107D50eData, ThrowOnError>
) => {
	return (options.client ?? client).get<EventGetEventD107D50eResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}',
		...options
	});
};

/**
 * Rsvp Event
 *
 * RSVP to a non-ticketed event (answer: 'yes', 'no', or 'maybe').
 *
 * Only works for events where requires_ticket=false. Runs full eligibility check including
 * event status, RSVP deadline, invitations, membership requirements, required questionnaires,
 * and capacity limits. Returns RSVP record on success. On failure, returns eligibility details
 * explaining what's blocking you and what next_step to take (e.g., complete questionnaire,
 * request invitation).
 */
export const eventRsvpEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventRsvpEvent4F4E006dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRsvpEvent4F4E006dResponses,
		EventRsvpEvent4F4E006dErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/rsvp/{answer}',
		...options
	});
};

/**
 * List Tiers
 *
 * Get all ticket tiers available for purchase at this event.
 *
 * Returns ticket types with pricing, availability, and sales windows. Filters tiers based
 * on user eligibility - you'll only see tiers you're allowed to purchase. Check visibility
 * settings and sales_start_at/sales_end_at to determine which are currently on sale.
 */
export const eventListTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventListTiersC35F2A56Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListTiersC35F2A56Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/tiers',
		...options
	});
};

/**
 * Ticket Checkout
 *
 * Purchase a fixed-price event ticket.
 *
 * Runs eligibility checks before allowing purchase. For online payment: returns Stripe
 * checkout URL to redirect user for payment. For free/offline/at-the-door tickets: creates
 * ticket immediately and returns it. Cannot be used for pay-what-you-can (PWYC) tiers -
 * use POST /{event_id}/tickets/{tier_id}/checkout/pwyc instead. On eligibility failure,
 * returns 400 with eligibility details explaining what's blocking you and what next_step
 * to take (e.g., complete questionnaire, request invitation, wait for tickets to go on sale).
 */
export const eventTicketCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketCheckoutCad69FcdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketCheckoutCad69FcdResponses,
		EventTicketCheckoutCad69FcdErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout',
		...options
	});
};

/**
 * Ticket Pwyc Checkout
 *
 * Purchase a pay-what-you-can (PWYC) ticket with a user-specified amount.
 *
 * Only works for ticket tiers with price_type=PWYC. Validates the amount is within the
 * tier's min/max bounds. Returns Stripe checkout URL for online payment, or creates ticket
 * immediately for free/offline payment methods. Returns 400 for non-PWYC tiers, if amount
 * is out of bounds, or on eligibility failure (with eligibility details explaining what's
 * blocking you and what next_step to take).
 */
export const eventTicketPwycCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketPwycCheckout804B5Ee7Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketPwycCheckout804B5Ee7Responses,
		EventTicketPwycCheckout804B5Ee7Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout/pwyc',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Questionnaire
 *
 * Retrieve a questionnaire required for event admission.
 *
 * Returns the questionnaire structure with all sections and questions. Questions may be
 * shuffled based on questionnaire settings. Use this to display the form that users must
 * complete before accessing the event.
 */
export const eventGetQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventGetQuestionnaire9Fc5Da77Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetQuestionnaire9Fc5Da77Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}',
		...options
	});
};

/**
 * Submit Questionnaire
 *
 * Submit answers to an event admission questionnaire.
 *
 * Validates all required questions are answered. If submission status is 'ready', triggers
 * automatic evaluation (may use LLM for free-text answers). Depending on the questionnaire's
 * evaluation_mode (automatic/manual/hybrid), results may be immediate or pending staff review.
 * Passing the questionnaire may be required before you can RSVP or purchase tickets.
 */
export const eventSubmitQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventSubmitQuestionnaire15265Bb1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventSubmitQuestionnaire15265Bb1Responses,
		EventSubmitQuestionnaire15265Bb1Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}/submit',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Event Token
 *
 * Delete an event token.
 */
export const eventadminDeleteEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteEventToken1C9CcafdData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteEventToken1C9CcafdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options
	});
};

/**
 * Update Event Token
 *
 * Update an event token.
 */
export const eventadminUpdateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventTokenBa62E645Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventTokenBa62E645Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Event Tokens
 *
 * List all event tokens.
 */
export const eventadminListEventTokens = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventTokensE0C2Fd23Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventTokensE0C2Fd23Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options
	});
};

/**
 * Create Event Token
 *
 * Create a new event token.
 */
export const eventadminCreateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateEventToken41B8F8B2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateEventToken41B8F8B2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Decide Invitation Request
 *
 * Request an invitation to an event.
 */
export const eventadminDecideInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDecideInvitationRequest31871F0dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminDecideInvitationRequest31871F0dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-request/{request_id}/{decision}',
		...options
	});
};

/**
 * List Event Invitation Requests
 *
 * List all pending invitation requests for the current user.
 */
export const eventadminListEventInvitationRequests = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventInvitationRequests7Ac895C1Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventInvitationRequests7Ac895C1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation_requests',
		...options
	});
};

/**
 * Update Event
 *
 * Update event by ID.
 */
export const eventadminUpdateEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventAa5A991bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventAa5A991bResponses,
		EventadminUpdateEventAa5A991bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Event Status
 *
 * Update event status to the specified value.
 */
export const eventadminUpdateEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventStatus59570164Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUpdateEventStatus59570164Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/actions/update-status/{status}',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to event.
 */
export const eventadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadLogo5A123201Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadLogo5A123201Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to event.
 */
export const eventadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadCoverArtF161995eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadCoverArtF161995eResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event.
 */
export const eventadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteLogo9D2F97D4Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteLogo9D2F97D4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event.
 */
export const eventadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteCoverArtDfe1C840Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteCoverArtDfe1C840Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminClearTags87134B46Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminClearTags87134B46Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const eventadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminAddTags199870C2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<EventadminAddTags199870C2Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/event-admin/{event_id}/tags',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options.headers
			}
		}
	);
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminRemoveTags6069AcbeData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminRemoveTags6069AcbeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Ticket Tiers
 *
 * List all ticket tiers for an event.
 */
export const eventadminListTicketTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketTiersC62Ceb1dData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketTiersC62Ceb1dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tiers',
		...options
	});
};

/**
 * Create Ticket Tier
 *
 * Create a new ticket tier for an event.
 */
export const eventadminCreateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateTicketTier69Ed5Ad3Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateTicketTier69Ed5Ad3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ticket Tier
 *
 * Delete a ticket tier.
 *
 * Note this might raise a 400 if ticket with this tier where already bought.
 */
export const eventadminDeleteTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteTicketTier86E0Bf75Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteTicketTier86E0Bf75Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options
	});
};

/**
 * Update Ticket Tier
 *
 * Update a ticket tier.
 */
export const eventadminUpdateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateTicketTier81Bd5B3aData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateTicketTier81Bd5B3aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Tickets
 *
 * List tickets for an event with optional filters.
 *
 * Supports filtering by:
 * - status: Filter by ticket status (PENDING, ACTIVE, CANCELLED, CHECKED_IN)
 * - tier__payment_method: Filter by payment method (ONLINE, OFFLINE, AT_THE_DOOR, FREE)
 */
export const eventadminListTickets = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTickets07Bf39C5Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTickets07Bf39C5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets',
		...options
	});
};

/**
 * Confirm Ticket Payment
 *
 * Confirm payment for a pending offline ticket and activate it.
 */
export const eventadminConfirmTicketPayment = <ThrowOnError extends boolean = false>(
	options: Options<EventadminConfirmTicketPayment21530940Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminConfirmTicketPayment21530940Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/confirm-payment',
		...options
	});
};

/**
 * Cancel Ticket
 *
 * Cancel a manual payment ticket.
 *
 * This endpoint is for offline/at-the-door tickets only.
 * Online tickets (Stripe) should be refunded via Stripe Dashboard.
 */
export const eventadminCancelTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCancelTicket8C940Df0Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCancelTicket8C940Df0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/cancel',
		...options
	});
};

/**
 * Check In Ticket
 *
 * Check in an attendee by scanning their ticket.
 */
export const eventadminCheckInTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCheckInTicket6D69F527Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCheckInTicket6D69F527Responses,
		EventadminCheckInTicket6D69F527Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/check-in',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Invitations
 *
 * List all invitations for registered users.
 */
export const eventadminListInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListInvitations33B6F32bData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListInvitations33B6F32bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options
	});
};

/**
 * Create Invitations
 *
 * Create direct invitations for users by email addresses.
 */
export const eventadminCreateInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateInvitations5511Bf2bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateInvitations5511Bf2bResponses,
		EventadminCreateInvitations5511Bf2bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Invitations
 *
 * List all pending invitations for unregistered users.
 */
export const eventadminListPendingInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingInvitationsD110F8AdData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingInvitationsD110F8AdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-invitations',
		...options
	});
};

/**
 * Delete Invitation Endpoint
 *
 * Delete an invitation (registered or pending).
 */
export const eventadminDeleteInvitationEndpoint = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteInvitationEndpoint6Dba7A34Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteInvitationEndpoint6Dba7A34Responses,
		EventadminDeleteInvitationEndpoint6Dba7A34Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations/{invitation_type}/{invitation_id}',
		...options
	});
};

/**
 * List Rsvps
 *
 * List all RSVPs for an event.
 *
 * Shows all users who have RSVPed to the event with their status.
 * Use this to see who is attending, not attending, or maybe attending.
 * Supports filtering by status and user_id.
 */
export const eventadminListRsvps = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListRsvpsF87Eb547Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListRsvpsF87Eb547Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps',
		...options
	});
};

/**
 * Create Rsvp
 *
 * Create an RSVP on behalf of a user.
 *
 * Use this when a user contacts the organization to RSVP outside the platform
 * (e.g., via text, email, or in person).
 */
export const eventadminCreateRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateRsvp4Ae40393Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateRsvp4Ae40393Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Rsvp
 *
 * Delete an RSVP.
 *
 * Use this to remove a user's RSVP entirely from the event.
 * Note: This is different from setting status to "no" - it completely removes the RSVP record.
 */
export const eventadminDeleteRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteRsvpC27D29F5Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteRsvpC27D29F5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps/{rsvp_id}',
		...options
	});
};

/**
 * Get Rsvp
 *
 * Get details of a specific RSVP.
 */
export const eventadminGetRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminGetRsvpEb4510BaData, ThrowOnError>
) => {
	return (options.client ?? client).get<EventadminGetRsvpEb4510BaResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps/{rsvp_id}',
		...options
	});
};

/**
 * Update Rsvp
 *
 * Update an existing RSVP.
 *
 * Use this to change a user's RSVP status when they contact you to update their response.
 */
export const eventadminUpdateRsvp = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateRsvp5159A3AeData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateRsvp5159A3AeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/rsvps/{rsvp_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * My Permissions
 *
 * Get a user's permission map, per organization.
 */
export const permissionMyPermissions = <ThrowOnError extends boolean = false>(
	options?: Options<PermissionMyPermissions7401F39eData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		PermissionMyPermissions7401F39eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/permissions/my-permissions',
		...options
	});
};

/**
 * List Event Series
 *
 * Browse event series (recurring event collections) visible to the current user.
 *
 * Event series group related recurring events (e.g., "Monthly Tech Meetup"). Results are
 * filtered by visibility and permissions. Supports filtering by organization and text search.
 */
export const eventseriesListEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<EventseriesListEventSeries196C001bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventseriesListEventSeries196C001bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/',
		...options
	});
};

/**
 * Get Event Series By Slugs
 *
 * Retrieve event series details using human-readable organization and series slugs.
 *
 * Use this for clean URLs like /event-series/tech-meetup/monthly-sessions. Returns 404
 * if the series doesn't exist or you don't have permission to view it.
 */
export const eventseriesGetEventSeriesBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesBySlugs9A912675Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesBySlugs9A912675Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{org_slug}/{series_slug}',
		...options
	});
};

/**
 * Get Event Series
 *
 * Retrieve full event series details by ID.
 *
 * Returns series information including description, organization, and settings. Use this
 * to display the series profile page and list related events.
 */
export const eventseriesGetEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeries0D6Cd05eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeries0D6Cd05eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this event series.
 *
 * Returns documents, links, or media files that apply to all events in the series.
 * Resources may be public or restricted based on visibility settings. Supports filtering
 * by type and text search.
 */
export const eventseriesListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesListResourcesB97F6De3Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesListResourcesB97F6De3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}/resources',
		...options
	});
};

/**
 * Delete Event Series
 *
 * Permanently delete an event series (admin only).
 *
 * Removes the series. Events in the series are not deleted but become standalone.
 * Requires 'delete_event_series' permission (typically organization owners only).
 */
export const eventseriesadminDeleteEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteEventSeriesDb759345Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteEventSeriesDb759345Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options
	});
};

/**
 * Update Event Series
 *
 * Update event series details (admin only).
 *
 * Modify series name, description, or settings. Requires 'edit_event_series' permission
 * (organization staff/owners). Changes apply to the series but not individual events.
 */
export const eventseriesadminUpdateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUpdateEventSeries3C425F5cData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventseriesadminUpdateEventSeries3C425F5cResponses,
		EventseriesadminUpdateEventSeries3C425F5cErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Upload Logo
 *
 * Upload a logo image for the event series (admin only).
 *
 * Replaces the existing logo. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadLogo51Ee2623Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadLogo51Ee2623Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art/banner image for the event series (admin only).
 *
 * Replaces the existing cover art. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadCoverArtF448F5AaData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadCoverArtF448F5AaResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event series (admin only).
 *
 * Removes the logo image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteLogo17E44E93Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteLogo17E44E93Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event series (admin only).
 *
 * Removes the cover art image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteCoverArtD5B6B46cData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteCoverArtD5B6B46cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove all tags from the event series (admin only).
 *
 * Clears all categorization tags. Requires 'edit_event_series' permission.
 */
export const eventseriesadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminClearTagsF0C43952Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminClearTagsF0C43952Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add tags to categorize the event series (admin only).
 *
 * Tags help users discover series through filtering and search. Returns the updated tag list.
 * Requires 'edit_event_series' permission.
 */
export const eventseriesadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminAddTagsFce03Fc4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminAddTagsFce03Fc4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove specific tags from the event series (admin only).
 *
 * Removes only the specified tags, keeping others. Returns the updated tag list. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminRemoveTags6D81A1B9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminRemoveTags6D81A1B9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Potluck Items
 *
 * View all potluck items for this event.
 *
 * Returns items users can bring, with flags indicating if each item is assigned and if you
 * own it. Available when event.potluck_open=true. Use this to display what's needed and
 * what you've claimed.
 */
export const potluckListPotluckItems = <ThrowOnError extends boolean = false>(
	options: Options<PotluckListPotluckItems25833E29Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		PotluckListPotluckItems25833E29Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options
	});
};

/**
 * Create Potluck Item
 *
 * Add a new item to the event's potluck list.
 *
 * Specify item name, quantity, and optional notes. Attendees can claim items via
 * POST /{event_id}/potluck/{item_id}/claim. Requires permission to create potluck items.
 */
export const potluckCreatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckCreatePotluckItemDe4Ae3EeData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckCreatePotluckItemDe4Ae3EeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Potluck Item
 *
 * Remove a potluck item from the event.
 *
 * Deletes the item even if it's been claimed. Requires permission to manage potluck items.
 */
export const potluckDeletePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckDeletePotluckItemBe11Edd5Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		PotluckDeletePotluckItemBe11Edd5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options
	});
};

/**
 * Update Potluck Item
 *
 * Update a potluck item's details.
 *
 * Modify item name, quantity, or notes. Requires permission to manage potluck items
 * (typically event organizers).
 */
export const potluckUpdatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUpdatePotluckItemA2503115Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		PotluckUpdatePotluckItemA2503115Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Claim Potluck Item
 *
 * Claim a potluck item to bring to the event.
 *
 * Assigns the item to you. Returns 400 if already claimed by someone else. Use this when
 * you want to commit to bringing a specific item.
 */
export const potluckClaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckClaimPotluckItem70407274Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckClaimPotluckItem70407274Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/claim',
		...options
	});
};

/**
 * Unclaim Potluck Item
 *
 * Release a potluck item you previously claimed.
 *
 * Makes the item available for others to claim. Returns 404 if the item isn't claimed
 * by you.
 */
export const potluckUnclaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUnclaimPotluckItemA74Bffb8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckUnclaimPotluckItemA74Bffb8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/unclaim',
		...options
	});
};

/**
 * List Org Questionnaires
 *
 * Browse questionnaires you have permission to view or manage.
 *
 * Returns questionnaires from organizations where you have staff/owner access. Use this to
 * find questionnaires to attach to events or review submissions. Supports filtering by
 * event_id or event_series_id to find questionnaires assigned to specific events or series.
 *
 * Each questionnaire includes a count of pending evaluations (submissions with no evaluation
 * or evaluations with "pending review" status).
 */
export const questionnaireListOrgQuestionnaires = <ThrowOnError extends boolean = false>(
	options?: Options<QuestionnaireListOrgQuestionnaires40088E58Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		QuestionnaireListOrgQuestionnaires40088E58Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/',
		...options
	});
};

/**
 * Create Org Questionnaire
 *
 * Create a new questionnaire for an organization (admin only).
 *
 * Creates a questionnaire with specified type (admission, membership, feedback, or generic)
 * and optional max_submission_age. After creation, add sections and questions via
 * POST /questionnaires/{id}/sections and /multiple-choice-questions endpoints. Requires
 * 'create_questionnaire' permission (organization staff/owners).
 */
export const questionnaireCreateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateOrgQuestionnaireC4993E95Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateOrgQuestionnaireC4993E95Responses,
		QuestionnaireCreateOrgQuestionnaireC4993E95Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{organization_id}/create-questionnaire',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Org Questionnaire
 *
 * Delete an organization questionnaire (admin only).
 *
 * Permanently removes the questionnaire. Requires 'delete_questionnaire' permission.
 */
export const questionnaireDeleteOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteOrgQuestionnaire9B93671bData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteOrgQuestionnaire9B93671bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Get Org Questionnaire
 *
 * Retrieve a questionnaire's details and structure (admin only).
 *
 * Returns the questionnaire with all sections, questions, and settings. Use this to view or
 * edit an existing questionnaire. Requires permission to manage the organization's questionnaires.
 */
export const questionnaireGetOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetOrgQuestionnaire4B157263Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetOrgQuestionnaire4B157263Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Update Org Questionnaire
 *
 * Update organization questionnaire and underlying questionnaire settings (admin only).
 *
 * Allows updating both OrganizationQuestionnaire wrapper fields (max_submission_age,
 * questionnaire_type) and the underlying Questionnaire fields (name, min_score, llm_guidelines,
 * shuffle_questions, shuffle_sections, evaluation_mode, can_retake_after, max_attempts).
 * Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateOrgQuestionnaire2C772505Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateOrgQuestionnaire2C772505Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Section
 *
 * Add a section to organize questions in the questionnaire (admin only).
 *
 * Sections group related questions. Specify section name and display order. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateSection5Dd89657Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateSection5Dd89657Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Section
 *
 * Delete a questionnaire section (admin only).
 *
 * Removes the section and all questions within it. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteSectionB24368DbData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteSectionB24368DbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options
	});
};

/**
 * Update Section
 *
 * Update a questionnaire section's details (admin only).
 *
 * Modify section name or display order. Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateSection5E5Fe926Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateSection5E5Fe926Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Question
 *
 * Add a multiple-choice question to the questionnaire (admin only).
 *
 * Create a question with predefined answer options. After creation, add options via
 * POST /questionnaires/{id}/multiple-choice-questions/{question_id}/options. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcQuestion70502672Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcQuestion70502672Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Question
 *
 * Delete a multiple choice question (admin only).
 *
 * Removes the question and all its options. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcQuestion9Ad513E7Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcQuestion9Ad513E7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options
	});
};

/**
 * Update Mc Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcQuestion93188079Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcQuestion93188079Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireCreateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcOptionA4Acf0CaData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcOptionA4Acf0CaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}/options',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Option
 *
 * Delete a multiple choice option (admin only).
 *
 * Removes the option from a question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcOption913782B3Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcOption913782B3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options
	});
};

/**
 * Update Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcOption66348BaeData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcOption66348BaeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Ft Question
 *
 * Add a free-text question to the questionnaire (admin only).
 *
 * Create an open-ended question for text responses. Can be auto-evaluated by LLM based on
 * scoring criteria. Requires 'edit_questionnaire' permission.
 */
export const questionnaireCreateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateFtQuestionD10Dac66Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateFtQuestionD10Dac66Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ft Question
 *
 * Delete a free text question (admin only).
 *
 * Removes the question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteFtQuestion7Caf5B9bData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteFtQuestion7Caf5B9bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options
	});
};

/**
 * Update Ft Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateFtQuestion4240F6A0Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateFtQuestion4240F6A0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Submissions
 *
 * View user submissions for this questionnaire (admin only).
 *
 * Returns submitted questionnaires ready for review. Use this to see who has applied for
 * event access and their responses. Requires 'evaluate_questionnaire' permission.
 *
 * Filtering:
 * - evaluation_status: Filter by evaluation status (approved/rejected/pending review/no_evaluation)
 *
 * Ordering:
 * - submitted_at: Oldest submissions first
 * - -submitted_at: Newest submissions first (default)
 */
export const questionnaireListSubmissions = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireListSubmissionsCd241550Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireListSubmissionsCd241550Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions',
		...options
	});
};

/**
 * Get Submission Detail
 *
 * View detailed answers for a specific submission (admin only).
 *
 * Returns all questions and the user's answers, plus automatic evaluation results if available.
 * Use this to review a submission before manual approval/rejection. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireGetSubmissionDetail = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetSubmissionDetail358478A9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetSubmissionDetail358478A9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}',
		...options
	});
};

/**
 * Evaluate Submission
 *
 * Manually approve or reject a questionnaire submission (admin only).
 *
 * Overrides automatic evaluation or provides decision for manual-review questionnaires.
 * Approved users can then RSVP or purchase tickets for the event. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireEvaluateSubmission = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireEvaluateSubmission1Ffdca31Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireEvaluateSubmission1Ffdca31Responses,
		QuestionnaireEvaluateSubmission1Ffdca31Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}/evaluate',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Questionnaire Status
 *
 * Update the status of a questionnaire (admin only).
 *
 * Changes the questionnaire status between DRAFT, READY, and PUBLISHED.
 * - DRAFT: Questionnaire is being created/edited
 * - READY: Questionnaire is complete but not yet published
 * - PUBLISHED: Questionnaire is live and can be taken by users
 *
 * Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateQuestionnaireStatus = <
	ThrowOnError extends boolean = false
>(
	options: Options<QuestionnaireUpdateQuestionnaireStatus8274B884Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireUpdateQuestionnaireStatus8274B884Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/status/{status}',
		...options
	});
};

/**
 * Replace Events
 *
 * Replace all assigned events for this questionnaire (admin only).
 *
 * Batch operation to set exactly which events require this questionnaire. Validates that
 * events belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEvents = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEventsAf266D92Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEventsAf266D92Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event
 *
 * Unassign a single event from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEvent62E5A2E5Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEvent62E5A2E5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Assign Event
 *
 * Assign a single event to this questionnaire (admin only).
 *
 * Adds one event that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEvent8A9B8Ed6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEvent8A9B8Ed6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Replace Event Series
 *
 * Replace all assigned event series for this questionnaire (admin only).
 *
 * Batch operation to set exactly which event series require this questionnaire. Validates that
 * series belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEventSeries2E0Ef06bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEventSeries2E0Ef06bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event Series
 *
 * Unassign a single event series from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event series. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEventSeriesCa91D13eData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEventSeriesCa91D13eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Assign Event Series
 *
 * Assign a single event series to this questionnaire (admin only).
 *
 * Adds one event series that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEventSeries641F9A73Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEventSeries641F9A73Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Get General Preferences
 *
 * Get your global preferences that apply across all organizations and events.
 *
 * Returns default notification and privacy settings. These serve as defaults that can be
 * overridden at organization, series, or event level.
 */
export const userpreferencesGetGeneralPreferences = <ThrowOnError extends boolean = false>(
	options?: Options<UserpreferencesGetGeneralPreferences0B42Ee02Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		UserpreferencesGetGeneralPreferences0B42Ee02Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options
	});
};

/**
 * Update Global Preferences
 *
 * Update your global preference defaults.
 *
 * Modify notification and privacy settings. Set overwrite_children=true to cascade changes
 * to all organization/series/event-level preferences, overriding custom settings.
 */
export const userpreferencesUpdateGlobalPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateGlobalPreferencesB7Eaf518Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateGlobalPreferencesB7Eaf518Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Organization Preferences
 *
 * Get your preferences for a specific organization.
 *
 * Returns organization-level overrides for notifications and privacy. Falls back to global
 * preferences if not customized.
 */
export const userpreferencesGetOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetOrganizationPreferences128D93A1Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetOrganizationPreferences128D93A1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options
	});
};

/**
 * Update Organization Preferences
 *
 * Update preferences for a specific organization.
 *
 * Overrides global defaults for this organization. Set overwrite_children=true to cascade
 * changes to all series/event-level preferences within this organization.
 */
export const userpreferencesUpdateOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateOrganizationPreferences6Bba6A88Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateOrganizationPreferences6Bba6A88Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Series Preferences
 *
 * Get your preferences for a specific event series.
 *
 * Returns series-level overrides for notifications. Falls back to organization or global
 * preferences if not customized.
 */
export const userpreferencesGetEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetEventSeriesPreferencesD8436AfbData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventSeriesPreferencesD8436AfbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options
	});
};

/**
 * Update Event Series Preferences
 *
 * Update preferences for a specific event series.
 *
 * Overrides organization/global defaults for this series. Set overwrite_children=true to
 * cascade changes to all individual event preferences within this series.
 */
export const userpreferencesUpdateEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateEventSeriesPreferences8389A0EcData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventSeriesPreferences8389A0EcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Preferences
 *
 * Get your preferences for a specific event.
 *
 * Returns event-level overrides for notifications. Falls back to series, organization, or
 * global preferences if not customized.
 */
export const userpreferencesGetEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesGetEventPreferences7557D1E9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventPreferences7557D1E9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options
	});
};

/**
 * Update Event Preferences
 *
 * Update preferences for a specific event.
 *
 * Overrides series/organization/global defaults for this event. The most specific preference
 * level always takes precedence.
 */
export const userpreferencesUpdateEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesUpdateEventPreferencesFc456B90Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventPreferencesFc456B90Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Handle Webhook
 *
 * Process Stripe webhook events for payment processing.
 *
 * Handles payment confirmations, failures, and refunds. Verifies webhook signature for
 * security. This endpoint is called by Stripe, not by clients directly.
 */
export const stripewebhookHandleWebhook = <ThrowOnError extends boolean = false>(
	options?: Options<StripewebhookHandleWebhookF9100C60Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		StripewebhookHandleWebhookF9100C60Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/stripe/webhook',
		...options
	});
};

/**
 * List Tags
 *
 * Browse and search all available tags in the system.
 *
 * Tags are used to categorize organizations, events, and series. Supports autocomplete via
 * the 'search' query parameter (e.g., /api/tags/?search=tech). Use this to populate tag
 * selection dropdowns or filters.
 */
export const tagListTags = <ThrowOnError extends boolean = false>(
	options?: Options<TagListTags4Bedc744Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<TagListTags4Bedc744Responses, unknown, ThrowOnError>({
		url: '/api/tags/',
		...options
	});
};

/**
 * List Cities
 *
 * Search and browse cities from the global database.
 *
 * Supports filtering by country and searching by city name. Use the 'search' parameter
 * for autocomplete functionality. Useful for setting user location preferences or
 * filtering events by location.
 */
export const cityListCities = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCitiesB6C167F3Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCitiesB6C167F3Responses, unknown, ThrowOnError>({
		url: '/api/cities/',
		...options
	});
};

/**
 * List Countries
 *
 * Get a list of all countries with cities in the database.
 *
 * Returns country names for filtering cities. Use this to populate country
 * selection dropdowns in location pickers.
 */
export const cityListCountries = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCountries74881EaeData, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCountries74881EaeResponses, unknown, ThrowOnError>(
		{
			url: '/api/cities/countries',
			...options
		}
	);
};

/**
 * Get City
 *
 * Retrieve detailed information for a specific city by ID.
 *
 * Returns city details including name, coordinates, and country. Use this to
 * get full city information after selecting from a search result.
 */
export const cityGetCity = <ThrowOnError extends boolean = false>(
	options: Options<CityGetCityA64Dd7F5Data, ThrowOnError>
) => {
	return (options.client ?? client).get<CityGetCityA64Dd7F5Responses, unknown, ThrowOnError>({
		url: '/api/cities/{city_id}',
		...options
	});
};
