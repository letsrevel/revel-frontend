// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	formDataBodySerializer,
	type Options as Options2,
	type TDataShape,
	urlSearchParamsBodySerializer
} from './client';
import { client } from './client.gen';
import type {
	AccountDeleteAccountConfirm17Ae2A5dData,
	AccountDeleteAccountConfirm17Ae2A5dResponses,
	AccountDeleteAccountRequestA3245490Data,
	AccountDeleteAccountRequestA3245490Responses,
	AccountExportData7302D324Data,
	AccountExportData7302D324Responses,
	AccountMe2C6272B3Data,
	AccountMe2C6272B3Responses,
	AccountRegister2F1Be53dData,
	AccountRegister2F1Be53dResponses,
	AccountResendVerificationEmail3Eeac89bData,
	AccountResendVerificationEmail3Eeac89bErrors,
	AccountResendVerificationEmail3Eeac89bResponses,
	AccountResetPasswordE1F30D85Data,
	AccountResetPasswordE1F30D85Responses,
	AccountResetPasswordRequest9E291A60Data,
	AccountResetPasswordRequest9E291A60Responses,
	AccountUpdateProfile8E461A12Data,
	AccountUpdateProfile8E461A12Responses,
	AccountVerifyEmailE5Bfd398Data,
	AccountVerifyEmailE5Bfd398Responses,
	ApiApiHealthcheckData,
	ApiApiHealthcheckResponses,
	ApiApiVersionData,
	ApiApiVersionResponses,
	AuthDemoObtainToken8Dcf5223Data,
	AuthDemoObtainToken8Dcf5223Responses,
	AuthGoogleLogin8Df12665Data,
	AuthGoogleLogin8Df12665Responses,
	AuthObtainToken3345D8C8Data,
	AuthObtainToken3345D8C8Responses,
	AuthObtainTokenWithOtp46814DfbData,
	AuthObtainTokenWithOtp46814DfbResponses,
	CityGetCity4Bb7Fc00Data,
	CityGetCity4Bb7Fc00Responses,
	CityListCities017E5Df2Data,
	CityListCities017E5Df2Responses,
	CityListCountriesC4A1E830Data,
	CityListCountriesC4A1E830Responses,
	DashboardDashboardEventsBd634997Data,
	DashboardDashboardEventsBd634997Responses,
	DashboardDashboardEventSeries3C7F6Cb1Data,
	DashboardDashboardEventSeries3C7F6Cb1Responses,
	DashboardDashboardInvitations58Db198bData,
	DashboardDashboardInvitations58Db198bResponses,
	DashboardDashboardOrganizations0E32708fData,
	DashboardDashboardOrganizations0E32708fResponses,
	EventadminAddTagsA28D5B14Data,
	EventadminAddTagsA28D5B14Responses,
	EventadminCheckInTicket59A70Bf8Data,
	EventadminCheckInTicket59A70Bf8Errors,
	EventadminCheckInTicket59A70Bf8Responses,
	EventadminClearTags1F6C2D6cData,
	EventadminClearTags1F6C2D6cResponses,
	EventadminConfirmTicketPayment4Dde6437Data,
	EventadminConfirmTicketPayment4Dde6437Responses,
	EventadminCreateEventTokenAf60D68cData,
	EventadminCreateEventTokenAf60D68cResponses,
	EventadminCreateInvitations733Ff6BaData,
	EventadminCreateInvitations733Ff6BaErrors,
	EventadminCreateInvitations733Ff6BaResponses,
	EventadminCreateTicketTierF3F7363dData,
	EventadminCreateTicketTierF3F7363dResponses,
	EventadminDecideInvitationRequestF10118FbData,
	EventadminDecideInvitationRequestF10118FbResponses,
	EventadminDeleteCoverArt4478Dd77Data,
	EventadminDeleteCoverArt4478Dd77Responses,
	EventadminDeleteEventToken6561773fData,
	EventadminDeleteEventToken6561773fResponses,
	EventadminDeleteInvitationEndpointD2F4190eData,
	EventadminDeleteInvitationEndpointD2F4190eErrors,
	EventadminDeleteInvitationEndpointD2F4190eResponses,
	EventadminDeleteLogoB6F21423Data,
	EventadminDeleteLogoB6F21423Responses,
	EventadminDeleteTicketTier006Aaa35Data,
	EventadminDeleteTicketTier006Aaa35Responses,
	EventadminListEventInvitationRequests2D58Fff4Data,
	EventadminListEventInvitationRequests2D58Fff4Responses,
	EventadminListEventTokens422Cc08dData,
	EventadminListEventTokens422Cc08dResponses,
	EventadminListInvitations825E5905Data,
	EventadminListInvitations825E5905Responses,
	EventadminListPendingInvitations2A4C53AfData,
	EventadminListPendingInvitations2A4C53AfResponses,
	EventadminListPendingTicketsC9D9679cData,
	EventadminListPendingTicketsC9D9679cResponses,
	EventadminListTicketTiers2B1C8300Data,
	EventadminListTicketTiers2B1C8300Responses,
	EventadminRemoveTags2D997FfeData,
	EventadminRemoveTags2D997FfeResponses,
	EventadminUpdateEvent915D70F7Data,
	EventadminUpdateEvent915D70F7Errors,
	EventadminUpdateEvent915D70F7Responses,
	EventadminUpdateEventStatus05955A8aData,
	EventadminUpdateEventStatus05955A8aResponses,
	EventadminUpdateEventToken7Fb7Cce9Data,
	EventadminUpdateEventToken7Fb7Cce9Responses,
	EventadminUpdateTicketTier29B0594cData,
	EventadminUpdateTicketTier29B0594cResponses,
	EventadminUploadCoverArtA805B668Data,
	EventadminUploadCoverArtA805B668Responses,
	EventadminUploadLogo5F54E903Data,
	EventadminUploadLogo5F54E903Responses,
	EventClaimInvitation935047E1Data,
	EventClaimInvitation935047E1Errors,
	EventClaimInvitation935047E1Responses,
	EventDeleteInvitationRequest912D3D08Data,
	EventDeleteInvitationRequest912D3D08Responses,
	EventGetEvent73D8A134Data,
	EventGetEvent73D8A134Responses,
	EventGetEventAttendees77E1E518Data,
	EventGetEventAttendees77E1E518Responses,
	EventGetEventBySlugs262B0077Data,
	EventGetEventBySlugs262B0077Responses,
	EventGetMyEventStatus209Cdf75Data,
	EventGetMyEventStatus209Cdf75Responses,
	EventGetQuestionnaireE218Ced1Data,
	EventGetQuestionnaireE218Ced1Responses,
	EventListEvents1A658307Data,
	EventListEvents1A658307Responses,
	EventListResourcesD69C2524Data,
	EventListResourcesD69C2524Responses,
	EventListTiers23136Ae2Data,
	EventListTiers23136Ae2Responses,
	EventListUserInvitationRequestsDd4D5D81Data,
	EventListUserInvitationRequestsDd4D5D81Responses,
	EventRequestInvitationF170A23bData,
	EventRequestInvitationF170A23bErrors,
	EventRequestInvitationF170A23bResponses,
	EventRsvpEvent9201Ac3eData,
	EventRsvpEvent9201Ac3eErrors,
	EventRsvpEvent9201Ac3eResponses,
	EventseriesadminAddTags9C75B473Data,
	EventseriesadminAddTags9C75B473Responses,
	EventseriesadminClearTags93B3Ecc0Data,
	EventseriesadminClearTags93B3Ecc0Responses,
	EventseriesadminDeleteCoverArt0341E447Data,
	EventseriesadminDeleteCoverArt0341E447Responses,
	EventseriesadminDeleteEventSeriesDbf3981cData,
	EventseriesadminDeleteEventSeriesDbf3981cResponses,
	EventseriesadminDeleteLogoE3B42E9fData,
	EventseriesadminDeleteLogoE3B42E9fResponses,
	EventseriesadminRemoveTags2B11D1EaData,
	EventseriesadminRemoveTags2B11D1EaResponses,
	EventseriesadminUpdateEventSeries4D992747Data,
	EventseriesadminUpdateEventSeries4D992747Errors,
	EventseriesadminUpdateEventSeries4D992747Responses,
	EventseriesadminUploadCoverArtF0C79525Data,
	EventseriesadminUploadCoverArtF0C79525Responses,
	EventseriesadminUploadLogo5Afea2C4Data,
	EventseriesadminUploadLogo5Afea2C4Responses,
	EventseriesGetEventSeries095Fa42fData,
	EventseriesGetEventSeries095Fa42fResponses,
	EventseriesGetEventSeriesBySlugsC1B70Ed3Data,
	EventseriesGetEventSeriesBySlugsC1B70Ed3Responses,
	EventseriesListEventSeries73738B47Data,
	EventseriesListEventSeries73738B47Responses,
	EventseriesListResourcesE6217Cb7Data,
	EventseriesListResourcesE6217Cb7Responses,
	EventSubmitQuestionnaire0B52F8C9Data,
	EventSubmitQuestionnaire0B52F8C9Errors,
	EventSubmitQuestionnaire0B52F8C9Responses,
	EventTicketCheckoutBe55B8B6Data,
	EventTicketCheckoutBe55B8B6Errors,
	EventTicketCheckoutBe55B8B6Responses,
	EventTicketPwycCheckoutEdfa7D7bData,
	EventTicketPwycCheckoutEdfa7D7bErrors,
	EventTicketPwycCheckoutEdfa7D7bResponses,
	OrganizationadminAddStaffCcaf00E3Data,
	OrganizationadminAddStaffCcaf00E3Responses,
	OrganizationadminAddTags03Dbb3C3Data,
	OrganizationadminAddTags03Dbb3C3Responses,
	OrganizationadminApproveMembershipRequestB8248F2aData,
	OrganizationadminApproveMembershipRequestB8248F2aResponses,
	OrganizationadminClearTagsFc208B9cData,
	OrganizationadminClearTagsFc208B9cResponses,
	OrganizationadminCreateEvent4A5877B8Data,
	OrganizationadminCreateEvent4A5877B8Errors,
	OrganizationadminCreateEvent4A5877B8Responses,
	OrganizationadminCreateEventSeries45603E91Data,
	OrganizationadminCreateEventSeries45603E91Errors,
	OrganizationadminCreateEventSeries45603E91Responses,
	OrganizationadminCreateOrganizationTokenE9103Cc1Data,
	OrganizationadminCreateOrganizationTokenE9103Cc1Responses,
	OrganizationadminCreateResource4B6C1124Data,
	OrganizationadminCreateResource4B6C1124Responses,
	OrganizationadminDeleteCoverArtDcdaac5fData,
	OrganizationadminDeleteCoverArtDcdaac5fResponses,
	OrganizationadminDeleteLogo31558FdbData,
	OrganizationadminDeleteLogo31558FdbResponses,
	OrganizationadminDeleteOrganizationTokenE18Ff03bData,
	OrganizationadminDeleteOrganizationTokenE18Ff03bResponses,
	OrganizationadminDeleteResourceF6C7Db62Data,
	OrganizationadminDeleteResourceF6C7Db62Responses,
	OrganizationadminGetResourceC9D29FefData,
	OrganizationadminGetResourceC9D29FefResponses,
	OrganizationadminListMembersA6D0C4E8Data,
	OrganizationadminListMembersA6D0C4E8Responses,
	OrganizationadminListMembershipRequests188Bf181Data,
	OrganizationadminListMembershipRequests188Bf181Responses,
	OrganizationadminListOrganizationTokens2183C72dData,
	OrganizationadminListOrganizationTokens2183C72dResponses,
	OrganizationadminListResources416B6E7dData,
	OrganizationadminListResources416B6E7dResponses,
	OrganizationadminListStaffCdf78EafData,
	OrganizationadminListStaffCdf78EafResponses,
	OrganizationadminRejectMembershipRequest1Ccdf903Data,
	OrganizationadminRejectMembershipRequest1Ccdf903Responses,
	OrganizationadminRemoveMember20A15911Data,
	OrganizationadminRemoveMember20A15911Responses,
	OrganizationadminRemoveStaff785D3F09Data,
	OrganizationadminRemoveStaff785D3F09Responses,
	OrganizationadminRemoveTagsD0Aec8F1Data,
	OrganizationadminRemoveTagsD0Aec8F1Responses,
	OrganizationadminStripeAccountVerify6602231cData,
	OrganizationadminStripeAccountVerify6602231cResponses,
	OrganizationadminStripeConnectBb0B6F33Data,
	OrganizationadminStripeConnectBb0B6F33Responses,
	OrganizationadminUpdateOrganization5E6Fe595Data,
	OrganizationadminUpdateOrganization5E6Fe595Responses,
	OrganizationadminUpdateOrganizationToken483620BcData,
	OrganizationadminUpdateOrganizationToken483620BcResponses,
	OrganizationadminUpdateResource9E995367Data,
	OrganizationadminUpdateResource9E995367Responses,
	OrganizationadminUpdateStaffPermissions7De08F49Data,
	OrganizationadminUpdateStaffPermissions7De08F49Responses,
	OrganizationadminUploadCoverArt52C08167Data,
	OrganizationadminUploadCoverArt52C08167Responses,
	OrganizationadminUploadLogo37845009Data,
	OrganizationadminUploadLogo37845009Responses,
	OrganizationClaimInvitation3361B794Data,
	OrganizationClaimInvitation3361B794Errors,
	OrganizationClaimInvitation3361B794Responses,
	OrganizationCreateMembershipRequest2Dd9A710Data,
	OrganizationCreateMembershipRequest2Dd9A710Responses,
	OrganizationGetOrganizationD8F70Ed1Data,
	OrganizationGetOrganizationD8F70Ed1Responses,
	OrganizationListOrganizations34A08E93Data,
	OrganizationListOrganizations34A08E93Responses,
	OrganizationListResources6F5E967aData,
	OrganizationListResources6F5E967aResponses,
	OtpDisableOtpBa908B6dData,
	OtpDisableOtpBa908B6dResponses,
	OtpEnableOtp9E070581Data,
	OtpEnableOtp9E070581Responses,
	OtpSetupOtp9C41130cData,
	OtpSetupOtp9C41130cResponses,
	PermissionMyPermissions5C36B820Data,
	PermissionMyPermissions5C36B820Responses,
	PotluckClaimPotluckItem11Fa1EddData,
	PotluckClaimPotluckItem11Fa1EddResponses,
	PotluckCreatePotluckItem815Ba978Data,
	PotluckCreatePotluckItem815Ba978Responses,
	PotluckDeletePotluckItem58C038B2Data,
	PotluckDeletePotluckItem58C038B2Responses,
	PotluckListPotluckItemsDadc973fData,
	PotluckListPotluckItemsDadc973fResponses,
	PotluckUnclaimPotluckItem9033Bf38Data,
	PotluckUnclaimPotluckItem9033Bf38Responses,
	PotluckUpdatePotluckItem2A8132E0Data,
	PotluckUpdatePotluckItem2A8132E0Responses,
	QuestionnaireAssignEventBbb45Ad4Data,
	QuestionnaireAssignEventBbb45Ad4Responses,
	QuestionnaireAssignEventSeries6Aa0E041Data,
	QuestionnaireAssignEventSeries6Aa0E041Responses,
	QuestionnaireCreateFtQuestion32291D7dData,
	QuestionnaireCreateFtQuestion32291D7dResponses,
	QuestionnaireCreateMcOptionBc096C71Data,
	QuestionnaireCreateMcOptionBc096C71Responses,
	QuestionnaireCreateMcQuestionE0568F0cData,
	QuestionnaireCreateMcQuestionE0568F0cResponses,
	QuestionnaireCreateOrgQuestionnaireE37038EbData,
	QuestionnaireCreateOrgQuestionnaireE37038EbErrors,
	QuestionnaireCreateOrgQuestionnaireE37038EbResponses,
	QuestionnaireCreateSection3Bec3Cc8Data,
	QuestionnaireCreateSection3Bec3Cc8Responses,
	QuestionnaireDeleteFtQuestionA32E12CdData,
	QuestionnaireDeleteFtQuestionA32E12CdResponses,
	QuestionnaireDeleteMcOptionEab87162Data,
	QuestionnaireDeleteMcOptionEab87162Responses,
	QuestionnaireDeleteMcQuestion05Bf4B74Data,
	QuestionnaireDeleteMcQuestion05Bf4B74Responses,
	QuestionnaireDeleteOrgQuestionnaire3B6D6033Data,
	QuestionnaireDeleteOrgQuestionnaire3B6D6033Responses,
	QuestionnaireDeleteSection2839357aData,
	QuestionnaireDeleteSection2839357aResponses,
	QuestionnaireEvaluateSubmission5E1E9D9bData,
	QuestionnaireEvaluateSubmission5E1E9D9bErrors,
	QuestionnaireEvaluateSubmission5E1E9D9bResponses,
	QuestionnaireGetOrgQuestionnaire13B9Ed5dData,
	QuestionnaireGetOrgQuestionnaire13B9Ed5dResponses,
	QuestionnaireGetSubmissionDetailA514Bfd5Data,
	QuestionnaireGetSubmissionDetailA514Bfd5Responses,
	QuestionnaireListOrgQuestionnaires71890C8eData,
	QuestionnaireListOrgQuestionnaires71890C8eResponses,
	QuestionnaireListSubmissions7Df8Cb01Data,
	QuestionnaireListSubmissions7Df8Cb01Responses,
	QuestionnaireReplaceEventsE0Df2A52Data,
	QuestionnaireReplaceEventsE0Df2A52Responses,
	QuestionnaireReplaceEventSeriesE2Ae2A14Data,
	QuestionnaireReplaceEventSeriesE2Ae2A14Responses,
	QuestionnaireUnassignEvent17704878Data,
	QuestionnaireUnassignEvent17704878Responses,
	QuestionnaireUnassignEventSeries0B10B8D0Data,
	QuestionnaireUnassignEventSeries0B10B8D0Responses,
	QuestionnaireUpdateFtQuestion104Bee43Data,
	QuestionnaireUpdateFtQuestion104Bee43Responses,
	QuestionnaireUpdateMcOption88D25Da9Data,
	QuestionnaireUpdateMcOption88D25Da9Responses,
	QuestionnaireUpdateMcQuestion936Bbd9dData,
	QuestionnaireUpdateMcQuestion936Bbd9dResponses,
	QuestionnaireUpdateOrgQuestionnaireEbc0E8D6Data,
	QuestionnaireUpdateOrgQuestionnaireEbc0E8D6Responses,
	QuestionnaireUpdateQuestionnaireStatusF3F8613eData,
	QuestionnaireUpdateQuestionnaireStatusF3F8613eResponses,
	QuestionnaireUpdateSection71E7E691Data,
	QuestionnaireUpdateSection71E7E691Responses,
	StripewebhookHandleWebhookFd2Aa002Data,
	StripewebhookHandleWebhookFd2Aa002Responses,
	TagListTagsB4554Ba7Data,
	TagListTagsB4554Ba7Responses,
	TokenRefreshData,
	TokenRefreshResponses,
	UserpreferencesGetEventPreferences3Ea4Bfb5Data,
	UserpreferencesGetEventPreferences3Ea4Bfb5Responses,
	UserpreferencesGetEventSeriesPreferences34C31Ff9Data,
	UserpreferencesGetEventSeriesPreferences34C31Ff9Responses,
	UserpreferencesGetGeneralPreferences20C76CacData,
	UserpreferencesGetGeneralPreferences20C76CacResponses,
	UserpreferencesGetOrganizationPreferencesB552F1B8Data,
	UserpreferencesGetOrganizationPreferencesB552F1B8Responses,
	UserpreferencesUpdateEventPreferences852F60EbData,
	UserpreferencesUpdateEventPreferences852F60EbResponses,
	UserpreferencesUpdateEventSeriesPreferencesAf354Ab0Data,
	UserpreferencesUpdateEventSeriesPreferencesAf354Ab0Responses,
	UserpreferencesUpdateGlobalPreferencesC78Cd0DeData,
	UserpreferencesUpdateGlobalPreferencesC78Cd0DeResponses,
	UserpreferencesUpdateOrganizationPreferences968F12C4Data,
	UserpreferencesUpdateOrganizationPreferences968F12C4Responses
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Version
 *
 * Get the API version.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiVersion = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiVersionData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiVersionResponses, unknown, ThrowOnError>({
		url: '/api/version',
		...options
	});
};

/**
 * Healthcheck
 *
 * Check the health of the API.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiHealthcheck = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiHealthcheckData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiHealthcheckResponses, unknown, ThrowOnError>({
		url: '/api/healthcheck',
		...options
	});
};

/**
 * Obtain Token
 *
 * Authenticate with email and password to obtain JWT access/refresh tokens.
 *
 * For users without 2FA: Returns standard JWT token pair for immediate access.
 * For users with TOTP enabled: Returns a temporary token that must be exchanged for
 * a full token pair via POST /auth/token/pair/otp along with the TOTP code.
 * Users registered via Google SSO must use POST /auth/google/login instead.
 */
export const authObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainToken3345D8C8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthObtainToken3345D8C8Responses, unknown, ThrowOnError>({
		url: '/api/auth/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Refresh Token
 */
export const tokenRefresh = <ThrowOnError extends boolean = false>(
	options: Options<TokenRefreshData, ThrowOnError>
) => {
	return (options.client ?? client).post<TokenRefreshResponses, unknown, ThrowOnError>({
		url: '/api/auth/refresh',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Demo Obtain Token
 *
 * Create and authenticate a demo user account (demo mode only).
 *
 * Automatically creates a user account with the provided credentials if it doesn't exist,
 * then returns JWT tokens. Only available when DEMO_MODE is enabled in settings.
 * Email must end with @example.com.
 */
export const authDemoObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthDemoObtainToken8Dcf5223Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthDemoObtainToken8Dcf5223Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/demo/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Obtain Token With Otp
 *
 * Complete 2FA authentication by exchanging temporary token and TOTP code for JWT tokens.
 *
 * Call this after POST /auth/token/pair returns a temporary token for a 2FA-enabled user.
 * Validates the TOTP code from the user's authenticator app and returns a standard JWT token
 * pair on success. Returns 401 if the TOTP code is invalid.
 */
export const authObtainTokenWithOtp = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainTokenWithOtp46814DfbData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthObtainTokenWithOtp46814DfbResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/token/pair/otp',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Google Login
 *
 * Authenticate or register via Google SSO using a Google ID token.
 *
 * Verifies the Google ID token, creates a new user if needed, and returns JWT tokens.
 * For existing Google SSO users, this is the only valid login method - they cannot
 * use password-based authentication.
 */
export const authGoogleLogin = <ThrowOnError extends boolean = false>(
	options: Options<AuthGoogleLogin8Df12665Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthGoogleLogin8Df12665Responses, unknown, ThrowOnError>({
		url: '/api/auth/google/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Setup Otp
 *
 * Get the TOTP provisioning URI to configure an authenticator app.
 *
 * Returns a URI (often as QR code) to scan with authenticator apps like Google Authenticator
 * or Authy. Returns 400 if 2FA is already enabled. After scanning, verify the setup with
 * POST /otp/verify to activate 2FA.
 */
export const otpSetupOtp = <ThrowOnError extends boolean = false>(
	options?: Options<OtpSetupOtp9C41130cData, ThrowOnError>
) => {
	return (options?.client ?? client).get<OtpSetupOtp9C41130cResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/setup',
		...options
	});
};

/**
 * Enable Otp
 *
 * Activate 2FA by verifying the TOTP code from the authenticator app.
 *
 * Call this after GET /otp/setup with a code from your authenticator app to confirm
 * it's configured correctly. On success, activates 2FA for the account. Future logins
 * will require the TOTP code via POST /auth/token/pair/otp. Returns 403 if code is invalid.
 */
export const otpEnableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpEnableOtp9E070581Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpEnableOtp9E070581Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Disable Otp
 *
 * Deactivate 2FA after verifying the current TOTP code.
 *
 * Requires the current TOTP code to prevent unauthorized disabling. After disabling,
 * login will only require email and password via POST /auth/token/pair. Returns 403
 * if the TOTP code is invalid.
 */
export const otpDisableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpDisableOtpBa908B6dData, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpDisableOtpBa908B6dResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/disable',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Export Data
 *
 * Request a GDPR-compliant export of all personal data.
 *
 * Initiates an asynchronous export of all user data including profile, events, tickets,
 * and submissions. The export will be emailed to the user when ready. Rate-limited to
 * prevent abuse.
 */
export const accountExportData = <ThrowOnError extends boolean = false>(
	options?: Options<AccountExportData7302D324Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountExportData7302D324Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/export-data',
		...options
	});
};

/**
 * Me
 *
 * Retrieve the authenticated user's profile information.
 *
 * Returns complete user profile including email, name, location preferences, and 2FA status.
 * Use this to display user info in the UI or verify authentication status.
 */
export const accountMe = <ThrowOnError extends boolean = false>(
	options?: Options<AccountMe2C6272B3Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<AccountMe2C6272B3Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options
	});
};

/**
 * Update Profile
 *
 * Update the authenticated user's profile information.
 *
 * Allows updating name, location preferences, and other profile fields. Only provided
 * fields are updated. Returns the updated user profile.
 */
export const accountUpdateProfile = <ThrowOnError extends boolean = false>(
	options: Options<AccountUpdateProfile8E461A12Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		AccountUpdateProfile8E461A12Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Register
 *
 * Create a new user account with email and password.
 *
 * Creates a new account and sends a verification email. The account is created but not
 * fully active until email is verified via POST /account/verify. If an unverified account
 * with the same email exists, resends the verification email. Returns 400 if a verified
 * account already exists.
 */
export const accountRegister = <ThrowOnError extends boolean = false>(
	options: Options<AccountRegister2F1Be53dData, ThrowOnError>
) => {
	return (options.client ?? client).post<AccountRegister2F1Be53dResponses, unknown, ThrowOnError>({
		url: '/api/account/register',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Verify Email
 *
 * Verify email address using the token from the verification email.
 *
 * Call this with the token received via email after registration. On success, activates
 * the account and returns the verified user profile along with JWT tokens for immediate login.
 * The verification token is single-use and expires after a set period.
 */
export const accountVerifyEmail = <ThrowOnError extends boolean = false>(
	options: Options<AccountVerifyEmailE5Bfd398Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountVerifyEmailE5Bfd398Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Resend Verification Email
 *
 * Resend the email verification link to the authenticated user.
 *
 * Use this if the original verification email was lost or expired. Returns 400 if the
 * email is already verified. Requires authentication with the unverified account's JWT.
 */
export const accountResendVerificationEmail = <ThrowOnError extends boolean = false>(
	options?: Options<AccountResendVerificationEmail3Eeac89bData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountResendVerificationEmail3Eeac89bResponses,
		AccountResendVerificationEmail3Eeac89bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/verify-resend',
		...options
	});
};

/**
 * Delete Account Request
 *
 * Initiate GDPR-compliant account deletion by sending confirmation email.
 *
 * Sends an email with a deletion confirmation link. The account is not deleted until
 * the user confirms via POST /account/delete-confirm with the token from the email.
 * This two-step process prevents accidental deletions.
 */
export const accountDeleteAccountRequest = <ThrowOnError extends boolean = false>(
	options?: Options<AccountDeleteAccountRequestA3245490Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountDeleteAccountRequestA3245490Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/delete-request',
		...options
	});
};

/**
 * Delete Account Confirm
 *
 * Permanently delete the account using the confirmation token from email.
 *
 * Call this with the token received via email after POST /account/delete-request.
 * This action is irreversible and deletes all user data. The deletion token is
 * single-use and expires after a set period.
 */
export const accountDeleteAccountConfirm = <ThrowOnError extends boolean = false>(
	options: Options<AccountDeleteAccountConfirm17Ae2A5dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountDeleteAccountConfirm17Ae2A5dResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/delete-confirm',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password Request
 *
 * Request a password reset by email.
 *
 * Sends a password reset link to the provided email if an account exists. Always returns
 * a success message to prevent user enumeration attacks. Google SSO users cannot use this
 * endpoint. After receiving the email, use POST /account/password/reset with the token.
 */
export const accountResetPasswordRequest = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordRequest9E291A60Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordRequest9E291A60Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset-request',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password
 *
 * Reset password using the token from the password reset email.
 *
 * Call this with the token received via email after POST /account/password/reset-request.
 * The new password must meet security requirements. The reset token is single-use and
 * expires after a set period. After reset, the user must login again with the new password.
 */
export const accountResetPassword = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordE1F30D85Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordE1F30D85Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Dashboard Organizations
 *
 * View organizations for your dashboard filtered by your relationship to them.
 *
 * Filter by: organizations you own, are staff of, are a member of, or have pending requests to.
 * Shows only organizations you have permission to view. Use this to display "My Organizations"
 * sections in the UI.
 */
export const dashboardDashboardOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardOrganizations0E32708fData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardOrganizations0E32708fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/organizations',
		...options
	});
};

/**
 * Dashboard Events
 *
 * View upcoming events for your dashboard filtered by your relationship to them.
 *
 * Filter by: events you're organizing, attending (RSVP'd or have tickets), invited to, or have
 * requested invitations to. Only shows future events you have permission to view. Use this to
 * display "My Events" sections in the UI.
 */
export const dashboardDashboardEvents = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventsBd634997Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventsBd634997Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/events',
		...options
	});
};

/**
 * Dashboard Event Series
 *
 * View event series for your dashboard filtered by your relationship to them.
 *
 * Filter by: series you're organizing or series you're attending events in. Shows only
 * series you have permission to view. Use this to display "My Series" sections in the UI.
 */
export const dashboardDashboardEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventSeries3C7F6Cb1Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventSeries3C7F6Cb1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/event_series',
		...options
	});
};

/**
 * Dashboard Invitations
 *
 * View your pending event invitations.
 *
 * Returns invitations you've received but not yet acted on, sorted by event date (soonest first).
 * Use this to display a "Pending Invitations" section prompting users to RSVP or purchase tickets.
 */
export const dashboardDashboardInvitations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardInvitations58Db198bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardInvitations58Db198bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/invitations',
		...options
	});
};

/**
 * List Organizations
 *
 * Browse and search organizations visible to the current user.
 *
 * Results are filtered by visibility settings and user memberships. By default orders by
 * 'distance' (nearest first based on user location). Can also sort alphabetically by 'name'
 * or reverse with '-name'. Supports text search and filtering.
 */
export const organizationListOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<OrganizationListOrganizations34A08E93Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		OrganizationListOrganizations34A08E93Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/',
		...options
	});
};

/**
 * Get Organization
 *
 * Retrieve organization details using its unique slug.
 *
 * Returns full organization information including description, location, member count, and
 * settings. Use this to display the organization profile page.
 */
export const organizationGetOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationGetOrganizationD8F70Ed1Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationGetOrganizationD8F70Ed1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this organization and marked for display on organization page.
 *
 * Returns documents, links, or media files provided by organization admins. Resources may
 * be public or restricted to members only. Supports filtering by type and text search.
 */
export const organizationListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationListResources6F5E967aData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationListResources6F5E967aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/resources',
		...options
	});
};

/**
 * Create Membership Request
 *
 * Submit a request to become a member of this organization.
 *
 * Creates a membership request that organization admins can approve or reject. Being a
 * member may be required to access certain members-only events. Returns the created
 * request for tracking status.
 */
export const organizationCreateMembershipRequest = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationCreateMembershipRequest2Dd9A710Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationCreateMembershipRequest2Dd9A710Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/membership-requests',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an organization membership invitation using a token from invitation link.
 *
 * Creates an OrganizationMember record, granting you member status. Members may have
 * access to members-only events and resources. Returns the organization on success,
 * or 400 if the token is invalid/expired.
 */
export const organizationClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationClaimInvitation3361B794Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationClaimInvitation3361B794Responses,
		OrganizationClaimInvitation3361B794Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/claim-invitation/{token}',
		...options
	});
};

/**
 * Update Organization
 *
 * Update organization by slug.
 */
export const organizationadminUpdateOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateOrganization5E6Fe595Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganization5E6Fe595Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Stripe Connect
 *
 * Get a link to onboard the organization to Stripe.
 */
export const organizationadminStripeConnect = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeConnectBb0B6F33Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeConnectBb0B6F33Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/connect',
		...options
	});
};

/**
 * Stripe Account Verify
 *
 * Get the organization's Stripe account status.
 */
export const organizationadminStripeAccountVerify = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeAccountVerify6602231cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeAccountVerify6602231cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/account/verify',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to organization.
 */
export const organizationadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadLogo37845009Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadLogo37845009Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to organization.
 */
export const organizationadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadCoverArt52C08167Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadCoverArt52C08167Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from organization.
 */
export const organizationadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteLogo31558FdbData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteLogo31558FdbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from organization.
 */
export const organizationadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteCoverArtDcdaac5fData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteCoverArtDcdaac5fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-cover-art',
		...options
	});
};

/**
 * Create Event Series
 *
 * Create a new event series.
 */
export const organizationadminCreateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEventSeries45603E91Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEventSeries45603E91Responses,
		OrganizationadminCreateEventSeries45603E91Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Event
 *
 * Create a new event.
 */
export const organizationadminCreateEvent = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEvent4A5877B8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEvent4A5877B8Responses,
		OrganizationadminCreateEvent4A5877B8Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Organization Tokens
 *
 * List all tokens for an organization that the user has admin rights for.
 */
export const organizationadminListOrganizationTokens = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListOrganizationTokens2183C72dData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListOrganizationTokens2183C72dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens',
		...options
	});
};

/**
 * Create Organization Token
 *
 * Create a new token for an organization.
 */
export const organizationadminCreateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminCreateOrganizationTokenE9103Cc1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateOrganizationTokenE9103Cc1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Organization Token
 *
 * Delete an organization token.
 */
export const organizationadminDeleteOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminDeleteOrganizationTokenE18Ff03bData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteOrganizationTokenE18Ff03bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options
	});
};

/**
 * Update Organization Token
 *
 * Update an organization token.
 */
export const organizationadminUpdateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateOrganizationToken483620BcData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationToken483620BcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Membership Requests
 *
 * List all membership requests for an organization.
 */
export const organizationadminListMembershipRequests = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListMembershipRequests188Bf181Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembershipRequests188Bf181Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests',
		...options
	});
};

/**
 * Approve Membership Request
 *
 * Approve a membership request.
 */
export const organizationadminApproveMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminApproveMembershipRequestB8248F2aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminApproveMembershipRequestB8248F2aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/approve',
		...options
	});
};

/**
 * Reject Membership Request
 *
 * Reject a membership request.
 */
export const organizationadminRejectMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminRejectMembershipRequest1Ccdf903Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRejectMembershipRequest1Ccdf903Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/reject',
		...options
	});
};

/**
 * List Resources
 *
 * List all resources for a specific organization.
 */
export const organizationadminListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListResources416B6E7dData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListResources416B6E7dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options
	});
};

/**
 * Create Resource
 *
 * Create a new resource for the organization.
 *
 * Accepts multipart/form-data with individual form fields for each schema property.
 * For FILE type resources, include the file parameter.
 */
export const organizationadminCreateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateResource4B6C1124Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateResource4B6C1124Responses,
		unknown,
		ThrowOnError
	>({
		...urlSearchParamsBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options,
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded',
			...options.headers
		}
	});
};

/**
 * Delete Resource
 *
 * Delete a resource from the organization.
 */
export const organizationadminDeleteResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteResourceF6C7Db62Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteResourceF6C7Db62Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Get Resource
 *
 * Retrieve a specific resource for the organization.
 */
export const organizationadminGetResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetResourceC9D29FefData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetResourceC9D29FefResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Update Resource
 *
 * Update a resource for the organization.
 */
export const organizationadminUpdateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateResource9E995367Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateResource9E995367Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Members
 *
 * List all members of an organization.
 */
export const organizationadminListMembers = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListMembersA6D0C4E8Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembersA6D0C4E8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members',
		...options
	});
};

/**
 * Remove Member
 *
 * Remove a member from an organization.
 */
export const organizationadminRemoveMember = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveMember20A15911Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveMember20A15911Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members/{user_id}',
		...options
	});
};

/**
 * List Staff
 *
 * List all staff of an organization.
 */
export const organizationadminListStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListStaffCdf78EafData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListStaffCdf78EafResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff',
		...options
	});
};

/**
 * Remove Staff
 *
 * Remove a staff member from an organization.
 */
export const organizationadminRemoveStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveStaff785D3F09Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveStaff785D3F09Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options
	});
};

/**
 * Add Staff
 *
 * Add a staff member to an organization.
 */
export const organizationadminAddStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddStaffCcaf00E3Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddStaffCcaf00E3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Staff Permissions
 *
 * Update a staff member's permissions.
 */
export const organizationadminUpdateStaffPermissions = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateStaffPermissions7De08F49Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateStaffPermissions7De08F49Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}/permissions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Clear akk tags from the organization.
 */
export const organizationadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminClearTagsFc208B9cData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminClearTagsFc208B9cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const organizationadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddTags03Dbb3C3Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddTags03Dbb3C3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const organizationadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveTagsD0Aec8F1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRemoveTagsD0Aec8F1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Events
 *
 * Browse and search events visible to the current user.
 *
 * Results are filtered by visibility rules (public/private), event status, and user permissions.
 * By default shows only upcoming events; set include_past=true to see past events.
 * Ordering: 'distance' (default) shows nearest events based on user location, 'start' shows
 * soonest first, '-start' shows latest first. Supports filtering by organization, series,
 * tags, and text search.
 */
export const eventListEvents = <ThrowOnError extends boolean = false>(
	options?: Options<EventListEvents1A658307Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<EventListEvents1A658307Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an event invitation using a token from an invitation link or email.
 *
 * Creates an EventInvitation record for the user, granting access to the event.
 * Invitations can bypass certain eligibility requirements like membership, capacity limits,
 * and RSVP deadlines. Returns the event on success, or 400 if the token is invalid/expired.
 */
export const eventClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventClaimInvitation935047E1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventClaimInvitation935047E1Responses,
		EventClaimInvitation935047E1Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Event Attendees
 *
 * Get the list of confirmed attendees for this event.
 *
 * Returns users who have RSVPed 'yes' or have active tickets. Visibility is controlled by
 * event settings - attendee lists may be hidden from regular attendees. Organization staff
 * and event creators always have access.
 */
export const eventGetEventAttendees = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventAttendees77E1E518Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventAttendees77E1E518Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/attendee-list',
		...options
	});
};

/**
 * Get My Event Status
 *
 * Check the authenticated user's current status and eligibility for an event.
 *
 * Returns either the user's RSVP/ticket status if they've already joined, or an eligibility
 * check result explaining what steps are needed to attend. The eligibility check validates:
 * event status, RSVP deadline, invitations, organization membership, required questionnaires,
 * capacity limits, and ticket availability. Use this to determine which action to show users
 * (RSVP button, buy ticket, fill questionnaire, etc.).
 */
export const eventGetMyEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventGetMyEventStatus209Cdf75Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetMyEventStatus209Cdf75Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/my-status',
		...options
	});
};

/**
 * Request Invitation
 *
 * Submit a request to be invited to a private or invite-only event.
 *
 * Creates an invitation request that event organizers can approve or reject. Include an
 * optional message explaining why you want to attend. Returns 400 if you've already
 * submitted a request for this event. Check GET /{event_id}/my-status to see if you
 * need an invitation.
 */
export const eventRequestInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventRequestInvitationF170A23bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRequestInvitationF170A23bResponses,
		EventRequestInvitationF170A23bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/request-invitation',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Resources
 *
 * Get supplementary resources attached to this event.
 *
 * Returns resources like documents, links, or media files provided by event organizers.
 * Resources may be public or restricted to attendees only. Supports filtering by type
 * (file, link, etc.) and text search.
 */
export const eventListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventListResourcesD69C2524Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListResourcesD69C2524Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/events/{event_id}/resources',
			...options
		}
	);
};

/**
 * Delete Invitation Request
 *
 * Cancel a pending invitation request.
 *
 * Withdraws your invitation request for an event. Only works for your own requests
 * that haven't been decided yet. Returns 404 if the request doesn't exist or doesn't
 * belong to you.
 */
export const eventDeleteInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventDeleteInvitationRequest912D3D08Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventDeleteInvitationRequest912D3D08Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/invitation-request/{request_id}',
		...options
	});
};

/**
 * List User Invitation Requests
 *
 * View your invitation requests across all events.
 *
 * Returns your invitation requests with their current status (pending/approved/rejected).
 * Filter by event_id to see requests for a specific event, or by status to see approved/
 * rejected requests. Use this to track which events you've requested access to.
 */
export const eventListUserInvitationRequests = <ThrowOnError extends boolean = false>(
	options?: Options<EventListUserInvitationRequestsDd4D5D81Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventListUserInvitationRequestsDd4D5D81Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/me/pending_invitation_requests',
		...options
	});
};

/**
 * Get Event By Slugs
 *
 * Retrieve event details using human-readable organization and event slugs.
 *
 * Use this for clean URLs like /events/tech-meetup/monthly-session. Returns 404 if
 * the event doesn't exist or you don't have permission to view it.
 */
export const eventGetEventBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventBySlugs262B0077Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventBySlugs262B0077Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{org_slug}/{event_slug}',
		...options
	});
};

/**
 * Get Event
 *
 * Retrieve full event details by ID.
 *
 * Returns comprehensive event information including description, location, times, organization,
 * ticket tiers, and visibility settings. Use this to display the event detail page.
 */
export const eventGetEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEvent73D8A134Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventGetEvent73D8A134Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}',
		...options
	});
};

/**
 * Rsvp Event
 *
 * RSVP to a non-ticketed event (answer: 'yes', 'no', or 'maybe').
 *
 * Only works for events where requires_ticket=false. Runs full eligibility check including
 * event status, RSVP deadline, invitations, membership requirements, required questionnaires,
 * and capacity limits. Returns RSVP record on success. On failure, returns eligibility details
 * explaining what's blocking you and what next_step to take (e.g., complete questionnaire,
 * request invitation).
 */
export const eventRsvpEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventRsvpEvent9201Ac3eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRsvpEvent9201Ac3eResponses,
		EventRsvpEvent9201Ac3eErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/rsvp/{answer}',
		...options
	});
};

/**
 * List Tiers
 *
 * Get all ticket tiers available for purchase at this event.
 *
 * Returns ticket types with pricing, availability, and sales windows. Filters tiers based
 * on user eligibility - you'll only see tiers you're allowed to purchase. Check visibility
 * settings and sales_start_at/sales_end_at to determine which are currently on sale.
 */
export const eventListTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventListTiers23136Ae2Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListTiers23136Ae2Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/tiers',
		...options
	});
};

/**
 * Ticket Checkout
 *
 * Purchase a fixed-price event ticket.
 *
 * Runs eligibility checks before allowing purchase. For online payment: returns Stripe
 * checkout URL to redirect user for payment. For free/offline/at-the-door tickets: creates
 * ticket immediately and returns it. Cannot be used for pay-what-you-can (PWYC) tiers -
 * use POST /{event_id}/tickets/{tier_id}/checkout/pwyc instead. On eligibility failure,
 * returns 400 with eligibility details explaining what's blocking you and what next_step
 * to take (e.g., complete questionnaire, request invitation, wait for tickets to go on sale).
 */
export const eventTicketCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketCheckoutBe55B8B6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketCheckoutBe55B8B6Responses,
		EventTicketCheckoutBe55B8B6Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout',
		...options
	});
};

/**
 * Ticket Pwyc Checkout
 *
 * Purchase a pay-what-you-can (PWYC) ticket with a user-specified amount.
 *
 * Only works for ticket tiers with price_type=PWYC. Validates the amount is within the
 * tier's min/max bounds. Returns Stripe checkout URL for online payment, or creates ticket
 * immediately for free/offline payment methods. Returns 400 for non-PWYC tiers, if amount
 * is out of bounds, or on eligibility failure (with eligibility details explaining what's
 * blocking you and what next_step to take).
 */
export const eventTicketPwycCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketPwycCheckoutEdfa7D7bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketPwycCheckoutEdfa7D7bResponses,
		EventTicketPwycCheckoutEdfa7D7bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout/pwyc',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Questionnaire
 *
 * Retrieve a questionnaire required for event admission.
 *
 * Returns the questionnaire structure with all sections and questions. Questions may be
 * shuffled based on questionnaire settings. Use this to display the form that users must
 * complete before accessing the event.
 */
export const eventGetQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventGetQuestionnaireE218Ced1Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetQuestionnaireE218Ced1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}',
		...options
	});
};

/**
 * Submit Questionnaire
 *
 * Submit answers to an event admission questionnaire.
 *
 * Validates all required questions are answered. If submission status is 'ready', triggers
 * automatic evaluation (may use LLM for free-text answers). Depending on the questionnaire's
 * evaluation_mode (automatic/manual/hybrid), results may be immediate or pending staff review.
 * Passing the questionnaire may be required before you can RSVP or purchase tickets.
 */
export const eventSubmitQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventSubmitQuestionnaire0B52F8C9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventSubmitQuestionnaire0B52F8C9Responses,
		EventSubmitQuestionnaire0B52F8C9Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}/submit',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Event Token
 *
 * Delete an event token.
 */
export const eventadminDeleteEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteEventToken6561773fData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteEventToken6561773fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options
	});
};

/**
 * Update Event Token
 *
 * Update an event token.
 */
export const eventadminUpdateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventToken7Fb7Cce9Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventToken7Fb7Cce9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Event Tokens
 *
 * List all event tokens.
 */
export const eventadminListEventTokens = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventTokens422Cc08dData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventTokens422Cc08dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options
	});
};

/**
 * Create Event Token
 *
 * Create a new event token.
 */
export const eventadminCreateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateEventTokenAf60D68cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateEventTokenAf60D68cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Decide Invitation Request
 *
 * Request an invitation to an event.
 */
export const eventadminDecideInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDecideInvitationRequestF10118FbData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminDecideInvitationRequestF10118FbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-request/{request_id}/{decision}',
		...options
	});
};

/**
 * List Event Invitation Requests
 *
 * List all pending invitation requests for the current user.
 */
export const eventadminListEventInvitationRequests = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventInvitationRequests2D58Fff4Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventInvitationRequests2D58Fff4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation_requests',
		...options
	});
};

/**
 * Update Event
 *
 * Update event by ID.
 */
export const eventadminUpdateEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEvent915D70F7Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEvent915D70F7Responses,
		EventadminUpdateEvent915D70F7Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Event Status
 *
 * Update event status to the specified value.
 */
export const eventadminUpdateEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventStatus05955A8aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUpdateEventStatus05955A8aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/actions/update-status/{status}',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to event.
 */
export const eventadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadLogo5F54E903Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadLogo5F54E903Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to event.
 */
export const eventadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadCoverArtA805B668Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadCoverArtA805B668Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event.
 */
export const eventadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteLogoB6F21423Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteLogoB6F21423Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event.
 */
export const eventadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteCoverArt4478Dd77Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteCoverArt4478Dd77Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminClearTags1F6C2D6cData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminClearTags1F6C2D6cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const eventadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminAddTagsA28D5B14Data, ThrowOnError>
) => {
	return (options.client ?? client).post<EventadminAddTagsA28D5B14Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/event-admin/{event_id}/tags',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options.headers
			}
		}
	);
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminRemoveTags2D997FfeData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminRemoveTags2D997FfeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Ticket Tiers
 *
 * List all ticket tiers for an event.
 */
export const eventadminListTicketTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketTiers2B1C8300Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketTiers2B1C8300Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tiers',
		...options
	});
};

/**
 * Create Ticket Tier
 *
 * Create a new ticket tier for an event.
 */
export const eventadminCreateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateTicketTierF3F7363dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateTicketTierF3F7363dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ticket Tier
 *
 * Delete a ticket tier.
 *
 * Note this might raise a 400 if ticket with this tier where already bought.
 */
export const eventadminDeleteTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteTicketTier006Aaa35Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteTicketTier006Aaa35Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options
	});
};

/**
 * Update Ticket Tier
 *
 * Update a ticket tier.
 */
export const eventadminUpdateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateTicketTier29B0594cData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateTicketTier29B0594cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Tickets
 *
 * List all pending tickets for offline and at-the-door payment methods.
 */
export const eventadminListPendingTickets = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingTicketsC9D9679cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingTicketsC9D9679cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-tickets',
		...options
	});
};

/**
 * Confirm Ticket Payment
 *
 * Confirm payment for a pending offline ticket and activate it.
 */
export const eventadminConfirmTicketPayment = <ThrowOnError extends boolean = false>(
	options: Options<EventadminConfirmTicketPayment4Dde6437Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminConfirmTicketPayment4Dde6437Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/confirm-payment',
		...options
	});
};

/**
 * Check In Ticket
 *
 * Check in an attendee by scanning their ticket.
 */
export const eventadminCheckInTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCheckInTicket59A70Bf8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCheckInTicket59A70Bf8Responses,
		EventadminCheckInTicket59A70Bf8Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/check-in',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Invitations
 *
 * List all invitations for registered users.
 */
export const eventadminListInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListInvitations825E5905Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListInvitations825E5905Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options
	});
};

/**
 * Create Invitations
 *
 * Create direct invitations for users by email addresses.
 */
export const eventadminCreateInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateInvitations733Ff6BaData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateInvitations733Ff6BaResponses,
		EventadminCreateInvitations733Ff6BaErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Invitations
 *
 * List all pending invitations for unregistered users.
 */
export const eventadminListPendingInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingInvitations2A4C53AfData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingInvitations2A4C53AfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-invitations',
		...options
	});
};

/**
 * Delete Invitation Endpoint
 *
 * Delete an invitation (registered or pending).
 */
export const eventadminDeleteInvitationEndpoint = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteInvitationEndpointD2F4190eData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteInvitationEndpointD2F4190eResponses,
		EventadminDeleteInvitationEndpointD2F4190eErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations/{invitation_type}/{invitation_id}',
		...options
	});
};

/**
 * My Permissions
 *
 * Get a user's permission map, per organization.
 */
export const permissionMyPermissions = <ThrowOnError extends boolean = false>(
	options?: Options<PermissionMyPermissions5C36B820Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		PermissionMyPermissions5C36B820Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/permissions/my-permissions',
		...options
	});
};

/**
 * List Event Series
 *
 * Browse event series (recurring event collections) visible to the current user.
 *
 * Event series group related recurring events (e.g., "Monthly Tech Meetup"). Results are
 * filtered by visibility and permissions. Supports filtering by organization and text search.
 */
export const eventseriesListEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<EventseriesListEventSeries73738B47Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventseriesListEventSeries73738B47Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/',
		...options
	});
};

/**
 * Get Event Series By Slugs
 *
 * Retrieve event series details using human-readable organization and series slugs.
 *
 * Use this for clean URLs like /event-series/tech-meetup/monthly-sessions. Returns 404
 * if the series doesn't exist or you don't have permission to view it.
 */
export const eventseriesGetEventSeriesBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesBySlugsC1B70Ed3Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesBySlugsC1B70Ed3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{org_slug}/{series_slug}',
		...options
	});
};

/**
 * Get Event Series
 *
 * Retrieve full event series details by ID.
 *
 * Returns series information including description, organization, and settings. Use this
 * to display the series profile page and list related events.
 */
export const eventseriesGetEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeries095Fa42fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeries095Fa42fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this event series.
 *
 * Returns documents, links, or media files that apply to all events in the series.
 * Resources may be public or restricted based on visibility settings. Supports filtering
 * by type and text search.
 */
export const eventseriesListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesListResourcesE6217Cb7Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesListResourcesE6217Cb7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}/resources',
		...options
	});
};

/**
 * Delete Event Series
 *
 * Permanently delete an event series (admin only).
 *
 * Removes the series. Events in the series are not deleted but become standalone.
 * Requires 'delete_event_series' permission (typically organization owners only).
 */
export const eventseriesadminDeleteEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteEventSeriesDbf3981cData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteEventSeriesDbf3981cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options
	});
};

/**
 * Update Event Series
 *
 * Update event series details (admin only).
 *
 * Modify series name, description, or settings. Requires 'edit_event_series' permission
 * (organization staff/owners). Changes apply to the series but not individual events.
 */
export const eventseriesadminUpdateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUpdateEventSeries4D992747Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventseriesadminUpdateEventSeries4D992747Responses,
		EventseriesadminUpdateEventSeries4D992747Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Upload Logo
 *
 * Upload a logo image for the event series (admin only).
 *
 * Replaces the existing logo. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadLogo5Afea2C4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadLogo5Afea2C4Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art/banner image for the event series (admin only).
 *
 * Replaces the existing cover art. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadCoverArtF0C79525Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadCoverArtF0C79525Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event series (admin only).
 *
 * Removes the logo image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteLogoE3B42E9fData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteLogoE3B42E9fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event series (admin only).
 *
 * Removes the cover art image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteCoverArt0341E447Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteCoverArt0341E447Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove all tags from the event series (admin only).
 *
 * Clears all categorization tags. Requires 'edit_event_series' permission.
 */
export const eventseriesadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminClearTags93B3Ecc0Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminClearTags93B3Ecc0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add tags to categorize the event series (admin only).
 *
 * Tags help users discover series through filtering and search. Returns the updated tag list.
 * Requires 'edit_event_series' permission.
 */
export const eventseriesadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminAddTags9C75B473Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminAddTags9C75B473Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove specific tags from the event series (admin only).
 *
 * Removes only the specified tags, keeping others. Returns the updated tag list. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminRemoveTags2B11D1EaData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminRemoveTags2B11D1EaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Potluck Items
 *
 * View all potluck items for this event.
 *
 * Returns items users can bring, with flags indicating if each item is assigned and if you
 * own it. Available when event.potluck_open=true. Use this to display what's needed and
 * what you've claimed.
 */
export const potluckListPotluckItems = <ThrowOnError extends boolean = false>(
	options: Options<PotluckListPotluckItemsDadc973fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		PotluckListPotluckItemsDadc973fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options
	});
};

/**
 * Create Potluck Item
 *
 * Add a new item to the event's potluck list.
 *
 * Specify item name, quantity, and optional notes. Attendees can claim items via
 * POST /{event_id}/potluck/{item_id}/claim. Requires permission to create potluck items.
 */
export const potluckCreatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckCreatePotluckItem815Ba978Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckCreatePotluckItem815Ba978Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Potluck Item
 *
 * Remove a potluck item from the event.
 *
 * Deletes the item even if it's been claimed. Requires permission to manage potluck items.
 */
export const potluckDeletePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckDeletePotluckItem58C038B2Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		PotluckDeletePotluckItem58C038B2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options
	});
};

/**
 * Update Potluck Item
 *
 * Update a potluck item's details.
 *
 * Modify item name, quantity, or notes. Requires permission to manage potluck items
 * (typically event organizers).
 */
export const potluckUpdatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUpdatePotluckItem2A8132E0Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		PotluckUpdatePotluckItem2A8132E0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Claim Potluck Item
 *
 * Claim a potluck item to bring to the event.
 *
 * Assigns the item to you. Returns 400 if already claimed by someone else. Use this when
 * you want to commit to bringing a specific item.
 */
export const potluckClaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckClaimPotluckItem11Fa1EddData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckClaimPotluckItem11Fa1EddResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/claim',
		...options
	});
};

/**
 * Unclaim Potluck Item
 *
 * Release a potluck item you previously claimed.
 *
 * Makes the item available for others to claim. Returns 404 if the item isn't claimed
 * by you.
 */
export const potluckUnclaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUnclaimPotluckItem9033Bf38Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckUnclaimPotluckItem9033Bf38Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/unclaim',
		...options
	});
};

/**
 * List Org Questionnaires
 *
 * Browse questionnaires you have permission to view or manage.
 *
 * Returns questionnaires from organizations where you have staff/owner access. Use this to
 * find questionnaires to attach to events or review submissions.
 */
export const questionnaireListOrgQuestionnaires = <ThrowOnError extends boolean = false>(
	options?: Options<QuestionnaireListOrgQuestionnaires71890C8eData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		QuestionnaireListOrgQuestionnaires71890C8eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/',
		...options
	});
};

/**
 * Create Org Questionnaire
 *
 * Create a new questionnaire for an organization (admin only).
 *
 * Creates a questionnaire with specified type (admission, membership, feedback, or generic)
 * and optional max_submission_age. After creation, add sections and questions via
 * POST /questionnaires/{id}/sections and /multiple-choice-questions endpoints. Requires
 * 'create_questionnaire' permission (organization staff/owners).
 */
export const questionnaireCreateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateOrgQuestionnaireE37038EbData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateOrgQuestionnaireE37038EbResponses,
		QuestionnaireCreateOrgQuestionnaireE37038EbErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{organization_id}/create-questionnaire',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Org Questionnaire
 *
 * Delete an organization questionnaire (admin only).
 *
 * Permanently removes the questionnaire. Requires 'delete_questionnaire' permission.
 */
export const questionnaireDeleteOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteOrgQuestionnaire3B6D6033Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteOrgQuestionnaire3B6D6033Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Get Org Questionnaire
 *
 * Retrieve a questionnaire's details and structure (admin only).
 *
 * Returns the questionnaire with all sections, questions, and settings. Use this to view or
 * edit an existing questionnaire. Requires permission to manage the organization's questionnaires.
 */
export const questionnaireGetOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetOrgQuestionnaire13B9Ed5dData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetOrgQuestionnaire13B9Ed5dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Update Org Questionnaire
 *
 * Update organization questionnaire and underlying questionnaire settings (admin only).
 *
 * Allows updating both OrganizationQuestionnaire wrapper fields (max_submission_age,
 * questionnaire_type) and the underlying Questionnaire fields (name, min_score, llm_guidelines,
 * shuffle_questions, shuffle_sections, evaluation_mode, can_retake_after, max_attempts).
 * Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateOrgQuestionnaireEbc0E8D6Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateOrgQuestionnaireEbc0E8D6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Section
 *
 * Add a section to organize questions in the questionnaire (admin only).
 *
 * Sections group related questions. Specify section name and display order. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateSection3Bec3Cc8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateSection3Bec3Cc8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Section
 *
 * Delete a questionnaire section (admin only).
 *
 * Removes the section and all questions within it. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteSection2839357aData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteSection2839357aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options
	});
};

/**
 * Update Section
 *
 * Update a questionnaire section's details (admin only).
 *
 * Modify section name or display order. Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateSection71E7E691Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateSection71E7E691Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Question
 *
 * Add a multiple-choice question to the questionnaire (admin only).
 *
 * Create a question with predefined answer options. After creation, add options via
 * POST /questionnaires/{id}/multiple-choice-questions/{question_id}/options. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcQuestionE0568F0cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcQuestionE0568F0cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Question
 *
 * Delete a multiple choice question (admin only).
 *
 * Removes the question and all its options. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcQuestion05Bf4B74Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcQuestion05Bf4B74Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options
	});
};

/**
 * Update Mc Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcQuestion936Bbd9dData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcQuestion936Bbd9dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireCreateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcOptionBc096C71Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcOptionBc096C71Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}/options',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Mc Option
 *
 * Delete a multiple choice option (admin only).
 *
 * Removes the option from a question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteMcOptionEab87162Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteMcOptionEab87162Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options
	});
};

/**
 * Update Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcOption88D25Da9Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcOption88D25Da9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Ft Question
 *
 * Add a free-text question to the questionnaire (admin only).
 *
 * Create an open-ended question for text responses. Can be auto-evaluated by LLM based on
 * scoring criteria. Requires 'edit_questionnaire' permission.
 */
export const questionnaireCreateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateFtQuestion32291D7dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateFtQuestion32291D7dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ft Question
 *
 * Delete a free text question (admin only).
 *
 * Removes the question. Requires 'edit_questionnaire' permission.
 */
export const questionnaireDeleteFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireDeleteFtQuestionA32E12CdData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireDeleteFtQuestionA32E12CdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options
	});
};

/**
 * Update Ft Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateFtQuestion104Bee43Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateFtQuestion104Bee43Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Submissions
 *
 * View user submissions for this questionnaire (admin only).
 *
 * Returns submitted questionnaires ready for review. Use this to see who has applied for
 * event access and their responses. Requires 'evaluate_questionnaire' permission.
 */
export const questionnaireListSubmissions = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireListSubmissions7Df8Cb01Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireListSubmissions7Df8Cb01Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions',
		...options
	});
};

/**
 * Get Submission Detail
 *
 * View detailed answers for a specific submission (admin only).
 *
 * Returns all questions and the user's answers, plus automatic evaluation results if available.
 * Use this to review a submission before manual approval/rejection. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireGetSubmissionDetail = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetSubmissionDetailA514Bfd5Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetSubmissionDetailA514Bfd5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}',
		...options
	});
};

/**
 * Evaluate Submission
 *
 * Manually approve or reject a questionnaire submission (admin only).
 *
 * Overrides automatic evaluation or provides decision for manual-review questionnaires.
 * Approved users can then RSVP or purchase tickets for the event. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireEvaluateSubmission = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireEvaluateSubmission5E1E9D9bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireEvaluateSubmission5E1E9D9bResponses,
		QuestionnaireEvaluateSubmission5E1E9D9bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}/evaluate',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Questionnaire Status
 *
 * Update the status of a questionnaire (admin only).
 *
 * Changes the questionnaire status between DRAFT, READY, and PUBLISHED.
 * - DRAFT: Questionnaire is being created/edited
 * - READY: Questionnaire is complete but not yet published
 * - PUBLISHED: Questionnaire is live and can be taken by users
 *
 * Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateQuestionnaireStatus = <
	ThrowOnError extends boolean = false
>(
	options: Options<QuestionnaireUpdateQuestionnaireStatusF3F8613eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireUpdateQuestionnaireStatusF3F8613eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/status/{status}',
		...options
	});
};

/**
 * Replace Events
 *
 * Replace all assigned events for this questionnaire (admin only).
 *
 * Batch operation to set exactly which events require this questionnaire. Validates that
 * events belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEvents = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEventsE0Df2A52Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEventsE0Df2A52Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event
 *
 * Unassign a single event from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEvent17704878Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEvent17704878Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Assign Event
 *
 * Assign a single event to this questionnaire (admin only).
 *
 * Adds one event that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEvent = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEventBbb45Ad4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEventBbb45Ad4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/events/{event_id}',
		...options
	});
};

/**
 * Replace Event Series
 *
 * Replace all assigned event series for this questionnaire (admin only).
 *
 * Batch operation to set exactly which event series require this questionnaire. Validates that
 * series belong to the same organization. Requires 'edit_questionnaire' permission.
 */
export const questionnaireReplaceEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireReplaceEventSeriesE2Ae2A14Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireReplaceEventSeriesE2Ae2A14Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Unassign Event Series
 *
 * Unassign a single event series from this questionnaire (admin only).
 *
 * Removes requirement for this questionnaire from one event series. Requires 'edit_questionnaire'
 * permission.
 */
export const questionnaireUnassignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUnassignEventSeries0B10B8D0Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		QuestionnaireUnassignEventSeries0B10B8D0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Assign Event Series
 *
 * Assign a single event series to this questionnaire (admin only).
 *
 * Adds one event series that will require completion of this questionnaire. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireAssignEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireAssignEventSeries6Aa0E041Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireAssignEventSeries6Aa0E041Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/event-series/{series_id}',
		...options
	});
};

/**
 * Get General Preferences
 *
 * Get your global preferences that apply across all organizations and events.
 *
 * Returns default notification and privacy settings. These serve as defaults that can be
 * overridden at organization, series, or event level.
 */
export const userpreferencesGetGeneralPreferences = <ThrowOnError extends boolean = false>(
	options?: Options<UserpreferencesGetGeneralPreferences20C76CacData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		UserpreferencesGetGeneralPreferences20C76CacResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options
	});
};

/**
 * Update Global Preferences
 *
 * Update your global preference defaults.
 *
 * Modify notification and privacy settings. Set overwrite_children=true to cascade changes
 * to all organization/series/event-level preferences, overriding custom settings.
 */
export const userpreferencesUpdateGlobalPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateGlobalPreferencesC78Cd0DeData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateGlobalPreferencesC78Cd0DeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Organization Preferences
 *
 * Get your preferences for a specific organization.
 *
 * Returns organization-level overrides for notifications and privacy. Falls back to global
 * preferences if not customized.
 */
export const userpreferencesGetOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetOrganizationPreferencesB552F1B8Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetOrganizationPreferencesB552F1B8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options
	});
};

/**
 * Update Organization Preferences
 *
 * Update preferences for a specific organization.
 *
 * Overrides global defaults for this organization. Set overwrite_children=true to cascade
 * changes to all series/event-level preferences within this organization.
 */
export const userpreferencesUpdateOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateOrganizationPreferences968F12C4Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateOrganizationPreferences968F12C4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Series Preferences
 *
 * Get your preferences for a specific event series.
 *
 * Returns series-level overrides for notifications. Falls back to organization or global
 * preferences if not customized.
 */
export const userpreferencesGetEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetEventSeriesPreferences34C31Ff9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventSeriesPreferences34C31Ff9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options
	});
};

/**
 * Update Event Series Preferences
 *
 * Update preferences for a specific event series.
 *
 * Overrides organization/global defaults for this series. Set overwrite_children=true to
 * cascade changes to all individual event preferences within this series.
 */
export const userpreferencesUpdateEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateEventSeriesPreferencesAf354Ab0Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventSeriesPreferencesAf354Ab0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Preferences
 *
 * Get your preferences for a specific event.
 *
 * Returns event-level overrides for notifications. Falls back to series, organization, or
 * global preferences if not customized.
 */
export const userpreferencesGetEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesGetEventPreferences3Ea4Bfb5Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventPreferences3Ea4Bfb5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options
	});
};

/**
 * Update Event Preferences
 *
 * Update preferences for a specific event.
 *
 * Overrides series/organization/global defaults for this event. The most specific preference
 * level always takes precedence.
 */
export const userpreferencesUpdateEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesUpdateEventPreferences852F60EbData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventPreferences852F60EbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Handle Webhook
 *
 * Process Stripe webhook events for payment processing.
 *
 * Handles payment confirmations, failures, and refunds. Verifies webhook signature for
 * security. This endpoint is called by Stripe, not by clients directly.
 */
export const stripewebhookHandleWebhook = <ThrowOnError extends boolean = false>(
	options?: Options<StripewebhookHandleWebhookFd2Aa002Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		StripewebhookHandleWebhookFd2Aa002Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/stripe/webhook',
		...options
	});
};

/**
 * List Tags
 *
 * Browse and search all available tags in the system.
 *
 * Tags are used to categorize organizations, events, and series. Supports autocomplete via
 * the 'search' query parameter (e.g., /api/tags/?search=tech). Use this to populate tag
 * selection dropdowns or filters.
 */
export const tagListTags = <ThrowOnError extends boolean = false>(
	options?: Options<TagListTagsB4554Ba7Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<TagListTagsB4554Ba7Responses, unknown, ThrowOnError>({
		url: '/api/tags/',
		...options
	});
};

/**
 * List Cities
 *
 * Search and browse cities from the global database.
 *
 * Supports filtering by country and searching by city name. Use the 'search' parameter
 * for autocomplete functionality. Useful for setting user location preferences or
 * filtering events by location.
 */
export const cityListCities = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCities017E5Df2Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCities017E5Df2Responses, unknown, ThrowOnError>({
		url: '/api/cities/',
		...options
	});
};

/**
 * List Countries
 *
 * Get a list of all countries with cities in the database.
 *
 * Returns country names for filtering cities. Use this to populate country
 * selection dropdowns in location pickers.
 */
export const cityListCountries = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCountriesC4A1E830Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCountriesC4A1E830Responses, unknown, ThrowOnError>(
		{
			url: '/api/cities/countries',
			...options
		}
	);
};

/**
 * Get City
 *
 * Retrieve detailed information for a specific city by ID.
 *
 * Returns city details including name, coordinates, and country. Use this to
 * get full city information after selecting from a search result.
 */
export const cityGetCity = <ThrowOnError extends boolean = false>(
	options: Options<CityGetCity4Bb7Fc00Data, ThrowOnError>
) => {
	return (options.client ?? client).get<CityGetCity4Bb7Fc00Responses, unknown, ThrowOnError>({
		url: '/api/cities/{city_id}',
		...options
	});
};
