// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	formDataBodySerializer,
	type Options as Options2,
	type TDataShape,
	urlSearchParamsBodySerializer
} from './client';
import { client } from './client.gen';
import type {
	AccountDeleteAccountConfirm160970F1Data,
	AccountDeleteAccountConfirm160970F1Responses,
	AccountDeleteAccountRequest064B010bData,
	AccountDeleteAccountRequest064B010bResponses,
	AccountExportData880A200dData,
	AccountExportData880A200dResponses,
	AccountMeF6Fced88Data,
	AccountMeF6Fced88Responses,
	AccountRegister1Ab6AdedData,
	AccountRegister1Ab6AdedResponses,
	AccountResendVerificationEmail589A42EeData,
	AccountResendVerificationEmail589A42EeErrors,
	AccountResendVerificationEmail589A42EeResponses,
	AccountResetPassword4Aa81983Data,
	AccountResetPassword4Aa81983Responses,
	AccountResetPasswordRequest6B97E46fData,
	AccountResetPasswordRequest6B97E46fResponses,
	AccountUpdateProfile9Df4B47dData,
	AccountUpdateProfile9Df4B47dResponses,
	AccountVerifyEmail761D2301Data,
	AccountVerifyEmail761D2301Responses,
	ApiApiHealthcheckData,
	ApiApiHealthcheckResponses,
	ApiApiVersionData,
	ApiApiVersionResponses,
	AuthDemoObtainToken47E56C2dData,
	AuthDemoObtainToken47E56C2dResponses,
	AuthGoogleLogin416E9521Data,
	AuthGoogleLogin416E9521Responses,
	AuthObtainToken96A01D3fData,
	AuthObtainToken96A01D3fResponses,
	AuthObtainTokenWithOtp08E6D4B8Data,
	AuthObtainTokenWithOtp08E6D4B8Responses,
	CityGetCity55765D3eData,
	CityGetCity55765D3eResponses,
	CityListCities6A0Ae61dData,
	CityListCities6A0Ae61dResponses,
	CityListCountriesDa1A1A42Data,
	CityListCountriesDa1A1A42Responses,
	DashboardDashboardEvents048Ebb03Data,
	DashboardDashboardEvents048Ebb03Responses,
	DashboardDashboardEventSeries8292E4F0Data,
	DashboardDashboardEventSeries8292E4F0Responses,
	DashboardDashboardInvitations6E837D7aData,
	DashboardDashboardInvitations6E837D7aResponses,
	DashboardDashboardOrganizations7B4A1433Data,
	DashboardDashboardOrganizations7B4A1433Responses,
	EventadminAddTags2685Ad83Data,
	EventadminAddTags2685Ad83Responses,
	EventadminCheckInTicket4B602Ef6Data,
	EventadminCheckInTicket4B602Ef6Errors,
	EventadminCheckInTicket4B602Ef6Responses,
	EventadminClearTags0Fee13B3Data,
	EventadminClearTags0Fee13B3Responses,
	EventadminConfirmTicketPayment6A0Bf2E3Data,
	EventadminConfirmTicketPayment6A0Bf2E3Responses,
	EventadminCreateEventTokenA7E4Eb7eData,
	EventadminCreateEventTokenA7E4Eb7eResponses,
	EventadminCreateInvitations6517A1A7Data,
	EventadminCreateInvitations6517A1A7Errors,
	EventadminCreateInvitations6517A1A7Responses,
	EventadminCreateTicketTierB627B0BbData,
	EventadminCreateTicketTierB627B0BbResponses,
	EventadminDecideInvitationRequestBeef1Ce9Data,
	EventadminDecideInvitationRequestBeef1Ce9Responses,
	EventadminDeleteCoverArtF2F21F1cData,
	EventadminDeleteCoverArtF2F21F1cResponses,
	EventadminDeleteEventToken2E875110Data,
	EventadminDeleteEventToken2E875110Responses,
	EventadminDeleteInvitationEndpoint136C2E0cData,
	EventadminDeleteInvitationEndpoint136C2E0cErrors,
	EventadminDeleteInvitationEndpoint136C2E0cResponses,
	EventadminDeleteLogoA8572577Data,
	EventadminDeleteLogoA8572577Responses,
	EventadminDeleteTicketTier4D289FddData,
	EventadminDeleteTicketTier4D289FddResponses,
	EventadminListEventInvitationRequests4D55Ca34Data,
	EventadminListEventInvitationRequests4D55Ca34Responses,
	EventadminListEventTokensE200D3B4Data,
	EventadminListEventTokensE200D3B4Responses,
	EventadminListInvitations44Da3003Data,
	EventadminListInvitations44Da3003Responses,
	EventadminListPendingInvitationsF6C35418Data,
	EventadminListPendingInvitationsF6C35418Responses,
	EventadminListPendingTickets750Cf731Data,
	EventadminListPendingTickets750Cf731Responses,
	EventadminListTicketTiersBe152C27Data,
	EventadminListTicketTiersBe152C27Responses,
	EventadminRemoveTagsDe97B455Data,
	EventadminRemoveTagsDe97B455Responses,
	EventadminUpdateEvent668C060dData,
	EventadminUpdateEvent668C060dErrors,
	EventadminUpdateEvent668C060dResponses,
	EventadminUpdateEventStatus2D9E4206Data,
	EventadminUpdateEventStatus2D9E4206Responses,
	EventadminUpdateEventTokenB1De05BaData,
	EventadminUpdateEventTokenB1De05BaResponses,
	EventadminUpdateTicketTier3C74A206Data,
	EventadminUpdateTicketTier3C74A206Responses,
	EventadminUploadCoverArt02E939E7Data,
	EventadminUploadCoverArt02E939E7Responses,
	EventadminUploadLogoA2A42BbcData,
	EventadminUploadLogoA2A42BbcResponses,
	EventClaimInvitation1E5Ef38cData,
	EventClaimInvitation1E5Ef38cErrors,
	EventClaimInvitation1E5Ef38cResponses,
	EventDeleteInvitationRequestFc4624F7Data,
	EventDeleteInvitationRequestFc4624F7Responses,
	EventGetEvent92Ea18B6Data,
	EventGetEvent92Ea18B6Responses,
	EventGetEventAttendees0C9853C5Data,
	EventGetEventAttendees0C9853C5Responses,
	EventGetEventBySlugsAc566E1eData,
	EventGetEventBySlugsAc566E1eResponses,
	EventGetMyEventStatus3A3E231cData,
	EventGetMyEventStatus3A3E231cResponses,
	EventGetQuestionnaire13Ed0Da8Data,
	EventGetQuestionnaire13Ed0Da8Responses,
	EventListEventsA65581F2Data,
	EventListEventsA65581F2Responses,
	EventListResourcesF9B3F1E4Data,
	EventListResourcesF9B3F1E4Responses,
	EventListTiers36D0E0EcData,
	EventListTiers36D0E0EcResponses,
	EventListUserInvitationRequestsE960B2EaData,
	EventListUserInvitationRequestsE960B2EaResponses,
	EventRequestInvitation50Dcb1B6Data,
	EventRequestInvitation50Dcb1B6Errors,
	EventRequestInvitation50Dcb1B6Responses,
	EventRsvpEvent5Af7E321Data,
	EventRsvpEvent5Af7E321Errors,
	EventRsvpEvent5Af7E321Responses,
	EventseriesadminAddTagsA9D60A64Data,
	EventseriesadminAddTagsA9D60A64Responses,
	EventseriesadminClearTags1D905BbcData,
	EventseriesadminClearTags1D905BbcResponses,
	EventseriesadminDeleteCoverArt200559C8Data,
	EventseriesadminDeleteCoverArt200559C8Responses,
	EventseriesadminDeleteEventSeries1Dfa914aData,
	EventseriesadminDeleteEventSeries1Dfa914aResponses,
	EventseriesadminDeleteLogoA3235F6dData,
	EventseriesadminDeleteLogoA3235F6dResponses,
	EventseriesadminRemoveTagsC64D342bData,
	EventseriesadminRemoveTagsC64D342bResponses,
	EventseriesadminUpdateEventSeries2E05E165Data,
	EventseriesadminUpdateEventSeries2E05E165Errors,
	EventseriesadminUpdateEventSeries2E05E165Responses,
	EventseriesadminUploadCoverArt78F28217Data,
	EventseriesadminUploadCoverArt78F28217Responses,
	EventseriesadminUploadLogo755D74F5Data,
	EventseriesadminUploadLogo755D74F5Responses,
	EventseriesGetEventSeries9F678Ad0Data,
	EventseriesGetEventSeries9F678Ad0Responses,
	EventseriesGetEventSeriesBySlugs8Dfaa63fData,
	EventseriesGetEventSeriesBySlugs8Dfaa63fResponses,
	EventseriesListEventSeries21Dfe186Data,
	EventseriesListEventSeries21Dfe186Responses,
	EventseriesListResources097A63AaData,
	EventseriesListResources097A63AaResponses,
	EventSubmitQuestionnaire9A4508A1Data,
	EventSubmitQuestionnaire9A4508A1Errors,
	EventSubmitQuestionnaire9A4508A1Responses,
	EventTicketCheckoutB1C67548Data,
	EventTicketCheckoutB1C67548Errors,
	EventTicketCheckoutB1C67548Responses,
	EventTicketPwycCheckoutCa32Fa44Data,
	EventTicketPwycCheckoutCa32Fa44Errors,
	EventTicketPwycCheckoutCa32Fa44Responses,
	OrganizationadminAddStaff54431Fb8Data,
	OrganizationadminAddStaff54431Fb8Responses,
	OrganizationadminAddTags2957Ea37Data,
	OrganizationadminAddTags2957Ea37Responses,
	OrganizationadminApproveMembershipRequest9660Df84Data,
	OrganizationadminApproveMembershipRequest9660Df84Responses,
	OrganizationadminClearTagsF51Db4E0Data,
	OrganizationadminClearTagsF51Db4E0Responses,
	OrganizationadminCreateEventBa0783CcData,
	OrganizationadminCreateEventBa0783CcErrors,
	OrganizationadminCreateEventBa0783CcResponses,
	OrganizationadminCreateEventSeriesC087754fData,
	OrganizationadminCreateEventSeriesC087754fErrors,
	OrganizationadminCreateEventSeriesC087754fResponses,
	OrganizationadminCreateOrganizationToken59C624F0Data,
	OrganizationadminCreateOrganizationToken59C624F0Responses,
	OrganizationadminCreateResource501BebcdData,
	OrganizationadminCreateResource501BebcdResponses,
	OrganizationadminDeleteCoverArtBb3B3F47Data,
	OrganizationadminDeleteCoverArtBb3B3F47Responses,
	OrganizationadminDeleteLogoFbb0748bData,
	OrganizationadminDeleteLogoFbb0748bResponses,
	OrganizationadminDeleteOrganizationTokenEd116081Data,
	OrganizationadminDeleteOrganizationTokenEd116081Responses,
	OrganizationadminDeleteResourceA8D641F1Data,
	OrganizationadminDeleteResourceA8D641F1Responses,
	OrganizationadminGetResourceBade4D30Data,
	OrganizationadminGetResourceBade4D30Responses,
	OrganizationadminListMembers8B8Ab526Data,
	OrganizationadminListMembers8B8Ab526Responses,
	OrganizationadminListMembershipRequests1F0B771aData,
	OrganizationadminListMembershipRequests1F0B771aResponses,
	OrganizationadminListOrganizationTokens2220B2F3Data,
	OrganizationadminListOrganizationTokens2220B2F3Responses,
	OrganizationadminListResources0De857C6Data,
	OrganizationadminListResources0De857C6Responses,
	OrganizationadminListStaff4248378eData,
	OrganizationadminListStaff4248378eResponses,
	OrganizationadminRejectMembershipRequest77142C08Data,
	OrganizationadminRejectMembershipRequest77142C08Responses,
	OrganizationadminRemoveMember67E5D418Data,
	OrganizationadminRemoveMember67E5D418Responses,
	OrganizationadminRemoveStaffEc213B18Data,
	OrganizationadminRemoveStaffEc213B18Responses,
	OrganizationadminRemoveTagsCa0E5D2dData,
	OrganizationadminRemoveTagsCa0E5D2dResponses,
	OrganizationadminStripeAccountVerifyE7D5Aa24Data,
	OrganizationadminStripeAccountVerifyE7D5Aa24Responses,
	OrganizationadminStripeConnect3B39BcffData,
	OrganizationadminStripeConnect3B39BcffResponses,
	OrganizationadminUpdateOrganization65C02274Data,
	OrganizationadminUpdateOrganization65C02274Responses,
	OrganizationadminUpdateOrganizationTokenB36B080bData,
	OrganizationadminUpdateOrganizationTokenB36B080bResponses,
	OrganizationadminUpdateResource580DbcbaData,
	OrganizationadminUpdateResource580DbcbaResponses,
	OrganizationadminUpdateStaffPermissions0198A390Data,
	OrganizationadminUpdateStaffPermissions0198A390Responses,
	OrganizationadminUploadCoverArt83A813E1Data,
	OrganizationadminUploadCoverArt83A813E1Responses,
	OrganizationadminUploadLogoFf61681bData,
	OrganizationadminUploadLogoFf61681bResponses,
	OrganizationClaimInvitationC47E2EebData,
	OrganizationClaimInvitationC47E2EebErrors,
	OrganizationClaimInvitationC47E2EebResponses,
	OrganizationCreateMembershipRequest9977013aData,
	OrganizationCreateMembershipRequest9977013aResponses,
	OrganizationGetOrganizationA292Bb72Data,
	OrganizationGetOrganizationA292Bb72Responses,
	OrganizationListOrganizationsAb18Fa76Data,
	OrganizationListOrganizationsAb18Fa76Responses,
	OrganizationListResources57Ca8C62Data,
	OrganizationListResources57Ca8C62Responses,
	OtpDisableOtp871954CeData,
	OtpDisableOtp871954CeResponses,
	OtpEnableOtp7A67B253Data,
	OtpEnableOtp7A67B253Responses,
	OtpSetupOtp54C008D0Data,
	OtpSetupOtp54C008D0Responses,
	PermissionMyPermissionsDf4Ba5B7Data,
	PermissionMyPermissionsDf4Ba5B7Responses,
	PotluckClaimPotluckItemFd5Ebe7bData,
	PotluckClaimPotluckItemFd5Ebe7bResponses,
	PotluckCreatePotluckItem9A731D42Data,
	PotluckCreatePotluckItem9A731D42Responses,
	PotluckDeletePotluckItemB8Dc54BbData,
	PotluckDeletePotluckItemB8Dc54BbResponses,
	PotluckListPotluckItemsA6Ef0B35Data,
	PotluckListPotluckItemsA6Ef0B35Responses,
	PotluckUnclaimPotluckItem65Dc487aData,
	PotluckUnclaimPotluckItem65Dc487aResponses,
	PotluckUpdatePotluckItem57Eeafd5Data,
	PotluckUpdatePotluckItem57Eeafd5Responses,
	QuestionnaireCreateFtQuestion8390EaacData,
	QuestionnaireCreateFtQuestion8390EaacResponses,
	QuestionnaireCreateMcOptionF40841FfData,
	QuestionnaireCreateMcOptionF40841FfResponses,
	QuestionnaireCreateMcQuestion39Ab1622Data,
	QuestionnaireCreateMcQuestion39Ab1622Responses,
	QuestionnaireCreateOrgQuestionnaire81049B53Data,
	QuestionnaireCreateOrgQuestionnaire81049B53Errors,
	QuestionnaireCreateOrgQuestionnaire81049B53Responses,
	QuestionnaireCreateSectionDd4C1537Data,
	QuestionnaireCreateSectionDd4C1537Responses,
	QuestionnaireEvaluateSubmissionC4C26231Data,
	QuestionnaireEvaluateSubmissionC4C26231Errors,
	QuestionnaireEvaluateSubmissionC4C26231Responses,
	QuestionnaireGetOrgQuestionnaire3C588434Data,
	QuestionnaireGetOrgQuestionnaire3C588434Responses,
	QuestionnaireGetSubmissionDetail876D63D4Data,
	QuestionnaireGetSubmissionDetail876D63D4Responses,
	QuestionnaireListOrgQuestionnaires2Ca13Df8Data,
	QuestionnaireListOrgQuestionnaires2Ca13Df8Responses,
	QuestionnaireListSubmissions69Ad45A3Data,
	QuestionnaireListSubmissions69Ad45A3Responses,
	QuestionnaireUpdateFtQuestion7279E38cData,
	QuestionnaireUpdateFtQuestion7279E38cResponses,
	QuestionnaireUpdateMcOption54Ddd8FfData,
	QuestionnaireUpdateMcOption54Ddd8FfResponses,
	QuestionnaireUpdateMcQuestion452Aeeb2Data,
	QuestionnaireUpdateMcQuestion452Aeeb2Responses,
	QuestionnaireUpdateSection18C63436Data,
	QuestionnaireUpdateSection18C63436Responses,
	StripewebhookHandleWebhook567A8199Data,
	StripewebhookHandleWebhook567A8199Responses,
	TagListTagsE815B739Data,
	TagListTagsE815B739Responses,
	TokenRefreshData,
	TokenRefreshResponses,
	UserpreferencesGetEventPreferences72682Ba9Data,
	UserpreferencesGetEventPreferences72682Ba9Responses,
	UserpreferencesGetEventSeriesPreferencesA93181E7Data,
	UserpreferencesGetEventSeriesPreferencesA93181E7Responses,
	UserpreferencesGetGeneralPreferencesD7E7Fdb8Data,
	UserpreferencesGetGeneralPreferencesD7E7Fdb8Responses,
	UserpreferencesGetOrganizationPreferencesBf92B8DeData,
	UserpreferencesGetOrganizationPreferencesBf92B8DeResponses,
	UserpreferencesUpdateEventPreferencesE352Eb52Data,
	UserpreferencesUpdateEventPreferencesE352Eb52Responses,
	UserpreferencesUpdateEventSeriesPreferences32Fefe94Data,
	UserpreferencesUpdateEventSeriesPreferences32Fefe94Responses,
	UserpreferencesUpdateGlobalPreferencesB4E8Df59Data,
	UserpreferencesUpdateGlobalPreferencesB4E8Df59Responses,
	UserpreferencesUpdateOrganizationPreferences533B6A33Data,
	UserpreferencesUpdateOrganizationPreferences533B6A33Responses
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Version
 *
 * Get the API version.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiVersion = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiVersionData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiVersionResponses, unknown, ThrowOnError>({
		url: '/api/version',
		...options
	});
};

/**
 * Healthcheck
 *
 * Check the health of the API.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiHealthcheck = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiHealthcheckData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiHealthcheckResponses, unknown, ThrowOnError>({
		url: '/api/healthcheck',
		...options
	});
};

/**
 * Obtain Token
 *
 * Authenticate with email and password to obtain JWT access/refresh tokens.
 *
 * For users without 2FA: Returns standard JWT token pair for immediate access.
 * For users with TOTP enabled: Returns a temporary token that must be exchanged for
 * a full token pair via POST /auth/token/pair/otp along with the TOTP code.
 * Users registered via Google SSO must use POST /auth/google/login instead.
 */
export const authObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainToken96A01D3fData, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthObtainToken96A01D3fResponses, unknown, ThrowOnError>({
		url: '/api/auth/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Refresh Token
 */
export const tokenRefresh = <ThrowOnError extends boolean = false>(
	options: Options<TokenRefreshData, ThrowOnError>
) => {
	return (options.client ?? client).post<TokenRefreshResponses, unknown, ThrowOnError>({
		url: '/api/auth/refresh',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Demo Obtain Token
 *
 * Create and authenticate a demo user account (demo mode only).
 *
 * Automatically creates a user account with the provided credentials if it doesn't exist,
 * then returns JWT tokens. Only available when DEMO_MODE is enabled in settings.
 * Email must end with @example.com.
 */
export const authDemoObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthDemoObtainToken47E56C2dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthDemoObtainToken47E56C2dResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/demo/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Obtain Token With Otp
 *
 * Complete 2FA authentication by exchanging temporary token and TOTP code for JWT tokens.
 *
 * Call this after POST /auth/token/pair returns a temporary token for a 2FA-enabled user.
 * Validates the TOTP code from the user's authenticator app and returns a standard JWT token
 * pair on success. Returns 401 if the TOTP code is invalid.
 */
export const authObtainTokenWithOtp = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainTokenWithOtp08E6D4B8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthObtainTokenWithOtp08E6D4B8Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/token/pair/otp',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Google Login
 *
 * Authenticate or register via Google SSO using a Google ID token.
 *
 * Verifies the Google ID token, creates a new user if needed, and returns JWT tokens.
 * For existing Google SSO users, this is the only valid login method - they cannot
 * use password-based authentication.
 */
export const authGoogleLogin = <ThrowOnError extends boolean = false>(
	options: Options<AuthGoogleLogin416E9521Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthGoogleLogin416E9521Responses, unknown, ThrowOnError>({
		url: '/api/auth/google/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Setup Otp
 *
 * Get the TOTP provisioning URI to configure an authenticator app.
 *
 * Returns a URI (often as QR code) to scan with authenticator apps like Google Authenticator
 * or Authy. Returns 400 if 2FA is already enabled. After scanning, verify the setup with
 * POST /otp/verify to activate 2FA.
 */
export const otpSetupOtp = <ThrowOnError extends boolean = false>(
	options?: Options<OtpSetupOtp54C008D0Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<OtpSetupOtp54C008D0Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/setup',
		...options
	});
};

/**
 * Enable Otp
 *
 * Activate 2FA by verifying the TOTP code from the authenticator app.
 *
 * Call this after GET /otp/setup with a code from your authenticator app to confirm
 * it's configured correctly. On success, activates 2FA for the account. Future logins
 * will require the TOTP code via POST /auth/token/pair/otp. Returns 403 if code is invalid.
 */
export const otpEnableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpEnableOtp7A67B253Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpEnableOtp7A67B253Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Disable Otp
 *
 * Deactivate 2FA after verifying the current TOTP code.
 *
 * Requires the current TOTP code to prevent unauthorized disabling. After disabling,
 * login will only require email and password via POST /auth/token/pair. Returns 403
 * if the TOTP code is invalid.
 */
export const otpDisableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpDisableOtp871954CeData, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpDisableOtp871954CeResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/disable',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Export Data
 *
 * Request a GDPR-compliant export of all personal data.
 *
 * Initiates an asynchronous export of all user data including profile, events, tickets,
 * and submissions. The export will be emailed to the user when ready. Rate-limited to
 * prevent abuse.
 */
export const accountExportData = <ThrowOnError extends boolean = false>(
	options?: Options<AccountExportData880A200dData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountExportData880A200dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/export-data',
		...options
	});
};

/**
 * Me
 *
 * Retrieve the authenticated user's profile information.
 *
 * Returns complete user profile including email, name, location preferences, and 2FA status.
 * Use this to display user info in the UI or verify authentication status.
 */
export const accountMe = <ThrowOnError extends boolean = false>(
	options?: Options<AccountMeF6Fced88Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<AccountMeF6Fced88Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options
	});
};

/**
 * Update Profile
 *
 * Update the authenticated user's profile information.
 *
 * Allows updating name, location preferences, and other profile fields. Only provided
 * fields are updated. Returns the updated user profile.
 */
export const accountUpdateProfile = <ThrowOnError extends boolean = false>(
	options: Options<AccountUpdateProfile9Df4B47dData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		AccountUpdateProfile9Df4B47dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Register
 *
 * Create a new user account with email and password.
 *
 * Creates a new account and sends a verification email. The account is created but not
 * fully active until email is verified via POST /account/verify. If an unverified account
 * with the same email exists, resends the verification email. Returns 400 if a verified
 * account already exists.
 */
export const accountRegister = <ThrowOnError extends boolean = false>(
	options: Options<AccountRegister1Ab6AdedData, ThrowOnError>
) => {
	return (options.client ?? client).post<AccountRegister1Ab6AdedResponses, unknown, ThrowOnError>({
		url: '/api/account/register',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Verify Email
 *
 * Verify email address using the token from the verification email.
 *
 * Call this with the token received via email after registration. On success, activates
 * the account and returns the verified user profile along with JWT tokens for immediate login.
 * The verification token is single-use and expires after a set period.
 */
export const accountVerifyEmail = <ThrowOnError extends boolean = false>(
	options: Options<AccountVerifyEmail761D2301Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountVerifyEmail761D2301Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Resend Verification Email
 *
 * Resend the email verification link to the authenticated user.
 *
 * Use this if the original verification email was lost or expired. Returns 400 if the
 * email is already verified. Requires authentication with the unverified account's JWT.
 */
export const accountResendVerificationEmail = <ThrowOnError extends boolean = false>(
	options?: Options<AccountResendVerificationEmail589A42EeData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountResendVerificationEmail589A42EeResponses,
		AccountResendVerificationEmail589A42EeErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/verify-resend',
		...options
	});
};

/**
 * Delete Account Request
 *
 * Initiate GDPR-compliant account deletion by sending confirmation email.
 *
 * Sends an email with a deletion confirmation link. The account is not deleted until
 * the user confirms via POST /account/delete-confirm with the token from the email.
 * This two-step process prevents accidental deletions.
 */
export const accountDeleteAccountRequest = <ThrowOnError extends boolean = false>(
	options?: Options<AccountDeleteAccountRequest064B010bData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountDeleteAccountRequest064B010bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/delete-request',
		...options
	});
};

/**
 * Delete Account Confirm
 *
 * Permanently delete the account using the confirmation token from email.
 *
 * Call this with the token received via email after POST /account/delete-request.
 * This action is irreversible and deletes all user data. The deletion token is
 * single-use and expires after a set period.
 */
export const accountDeleteAccountConfirm = <ThrowOnError extends boolean = false>(
	options: Options<AccountDeleteAccountConfirm160970F1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountDeleteAccountConfirm160970F1Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/delete-confirm',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password Request
 *
 * Request a password reset by email.
 *
 * Sends a password reset link to the provided email if an account exists. Always returns
 * a success message to prevent user enumeration attacks. Google SSO users cannot use this
 * endpoint. After receiving the email, use POST /account/password/reset with the token.
 */
export const accountResetPasswordRequest = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordRequest6B97E46fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordRequest6B97E46fResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset-request',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password
 *
 * Reset password using the token from the password reset email.
 *
 * Call this with the token received via email after POST /account/password/reset-request.
 * The new password must meet security requirements. The reset token is single-use and
 * expires after a set period. After reset, the user must login again with the new password.
 */
export const accountResetPassword = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPassword4Aa81983Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPassword4Aa81983Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Dashboard Organizations
 *
 * View organizations for your dashboard filtered by your relationship to them.
 *
 * Filter by: organizations you own, are staff of, are a member of, or have pending requests to.
 * Shows only organizations you have permission to view. Use this to display "My Organizations"
 * sections in the UI.
 */
export const dashboardDashboardOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardOrganizations7B4A1433Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardOrganizations7B4A1433Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/organizations',
		...options
	});
};

/**
 * Dashboard Events
 *
 * View upcoming events for your dashboard filtered by your relationship to them.
 *
 * Filter by: events you're organizing, attending (RSVP'd or have tickets), invited to, or have
 * requested invitations to. Only shows future events you have permission to view. Use this to
 * display "My Events" sections in the UI.
 */
export const dashboardDashboardEvents = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEvents048Ebb03Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEvents048Ebb03Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/events',
		...options
	});
};

/**
 * Dashboard Event Series
 *
 * View event series for your dashboard filtered by your relationship to them.
 *
 * Filter by: series you're organizing or series you're attending events in. Shows only
 * series you have permission to view. Use this to display "My Series" sections in the UI.
 */
export const dashboardDashboardEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventSeries8292E4F0Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventSeries8292E4F0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/event_series',
		...options
	});
};

/**
 * Dashboard Invitations
 *
 * View your pending event invitations.
 *
 * Returns invitations you've received but not yet acted on, sorted by event date (soonest first).
 * Use this to display a "Pending Invitations" section prompting users to RSVP or purchase tickets.
 */
export const dashboardDashboardInvitations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardInvitations6E837D7aData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardInvitations6E837D7aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/invitations',
		...options
	});
};

/**
 * List Organizations
 *
 * Browse and search organizations visible to the current user.
 *
 * Results are filtered by visibility settings and user memberships. By default orders by
 * 'distance' (nearest first based on user location). Can also sort alphabetically by 'name'
 * or reverse with '-name'. Supports text search and filtering.
 */
export const organizationListOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<OrganizationListOrganizationsAb18Fa76Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		OrganizationListOrganizationsAb18Fa76Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/',
		...options
	});
};

/**
 * Get Organization
 *
 * Retrieve organization details using its unique slug.
 *
 * Returns full organization information including description, location, member count, and
 * settings. Use this to display the organization profile page.
 */
export const organizationGetOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationGetOrganizationA292Bb72Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationGetOrganizationA292Bb72Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this organization and marked for display on organization page.
 *
 * Returns documents, links, or media files provided by organization admins. Resources may
 * be public or restricted to members only. Supports filtering by type and text search.
 */
export const organizationListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationListResources57Ca8C62Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationListResources57Ca8C62Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/resources',
		...options
	});
};

/**
 * Create Membership Request
 *
 * Submit a request to become a member of this organization.
 *
 * Creates a membership request that organization admins can approve or reject. Being a
 * member may be required to access certain members-only events. Returns the created
 * request for tracking status.
 */
export const organizationCreateMembershipRequest = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationCreateMembershipRequest9977013aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationCreateMembershipRequest9977013aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/membership-requests',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an organization membership invitation using a token from invitation link.
 *
 * Creates an OrganizationMember record, granting you member status. Members may have
 * access to members-only events and resources. Returns the organization on success,
 * or 400 if the token is invalid/expired.
 */
export const organizationClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationClaimInvitationC47E2EebData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationClaimInvitationC47E2EebResponses,
		OrganizationClaimInvitationC47E2EebErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/claim-invitation/{token}',
		...options
	});
};

/**
 * Update Organization
 *
 * Update organization by slug.
 */
export const organizationadminUpdateOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateOrganization65C02274Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganization65C02274Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Stripe Connect
 *
 * Get a link to onboard the organization to Stripe.
 */
export const organizationadminStripeConnect = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeConnect3B39BcffData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeConnect3B39BcffResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/connect',
		...options
	});
};

/**
 * Stripe Account Verify
 *
 * Get the organization's Stripe account status.
 */
export const organizationadminStripeAccountVerify = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeAccountVerifyE7D5Aa24Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeAccountVerifyE7D5Aa24Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/account/verify',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to organization.
 */
export const organizationadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadLogoFf61681bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadLogoFf61681bResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to organization.
 */
export const organizationadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadCoverArt83A813E1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadCoverArt83A813E1Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from organization.
 */
export const organizationadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteLogoFbb0748bData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteLogoFbb0748bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from organization.
 */
export const organizationadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteCoverArtBb3B3F47Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteCoverArtBb3B3F47Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-cover-art',
		...options
	});
};

/**
 * Create Event Series
 *
 * Create a new event series.
 */
export const organizationadminCreateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEventSeriesC087754fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEventSeriesC087754fResponses,
		OrganizationadminCreateEventSeriesC087754fErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Event
 *
 * Create a new event.
 */
export const organizationadminCreateEvent = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEventBa0783CcData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEventBa0783CcResponses,
		OrganizationadminCreateEventBa0783CcErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Organization Tokens
 *
 * List all tokens for an organization that the user has admin rights for.
 */
export const organizationadminListOrganizationTokens = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListOrganizationTokens2220B2F3Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListOrganizationTokens2220B2F3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens',
		...options
	});
};

/**
 * Create Organization Token
 *
 * Create a new token for an organization.
 */
export const organizationadminCreateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminCreateOrganizationToken59C624F0Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateOrganizationToken59C624F0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Organization Token
 *
 * Delete an organization token.
 */
export const organizationadminDeleteOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminDeleteOrganizationTokenEd116081Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteOrganizationTokenEd116081Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options
	});
};

/**
 * Update Organization Token
 *
 * Update an organization token.
 */
export const organizationadminUpdateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateOrganizationTokenB36B080bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationTokenB36B080bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Membership Requests
 *
 * List all membership requests for an organization.
 */
export const organizationadminListMembershipRequests = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListMembershipRequests1F0B771aData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembershipRequests1F0B771aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests',
		...options
	});
};

/**
 * Approve Membership Request
 *
 * Approve a membership request.
 */
export const organizationadminApproveMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminApproveMembershipRequest9660Df84Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminApproveMembershipRequest9660Df84Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/approve',
		...options
	});
};

/**
 * Reject Membership Request
 *
 * Reject a membership request.
 */
export const organizationadminRejectMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminRejectMembershipRequest77142C08Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRejectMembershipRequest77142C08Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/reject',
		...options
	});
};

/**
 * List Resources
 *
 * List all resources for a specific organization.
 */
export const organizationadminListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListResources0De857C6Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListResources0De857C6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options
	});
};

/**
 * Create Resource
 *
 * Create a new resource for the organization.
 *
 * Accepts multipart/form-data with individual form fields for each schema property.
 * For FILE type resources, include the file parameter.
 */
export const organizationadminCreateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateResource501BebcdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateResource501BebcdResponses,
		unknown,
		ThrowOnError
	>({
		...urlSearchParamsBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options,
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded',
			...options.headers
		}
	});
};

/**
 * Delete Resource
 *
 * Delete a resource from the organization.
 */
export const organizationadminDeleteResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteResourceA8D641F1Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteResourceA8D641F1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Get Resource
 *
 * Retrieve a specific resource for the organization.
 */
export const organizationadminGetResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetResourceBade4D30Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetResourceBade4D30Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Update Resource
 *
 * Update a resource for the organization.
 */
export const organizationadminUpdateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateResource580DbcbaData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateResource580DbcbaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Members
 *
 * List all members of an organization.
 */
export const organizationadminListMembers = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListMembers8B8Ab526Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembers8B8Ab526Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members',
		...options
	});
};

/**
 * Remove Member
 *
 * Remove a member from an organization.
 */
export const organizationadminRemoveMember = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveMember67E5D418Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveMember67E5D418Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members/{user_id}',
		...options
	});
};

/**
 * List Staff
 *
 * List all staff of an organization.
 */
export const organizationadminListStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListStaff4248378eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListStaff4248378eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff',
		...options
	});
};

/**
 * Remove Staff
 *
 * Remove a staff member from an organization.
 */
export const organizationadminRemoveStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveStaffEc213B18Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveStaffEc213B18Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options
	});
};

/**
 * Add Staff
 *
 * Add a staff member to an organization.
 */
export const organizationadminAddStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddStaff54431Fb8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddStaff54431Fb8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Staff Permissions
 *
 * Update a staff member's permissions.
 */
export const organizationadminUpdateStaffPermissions = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateStaffPermissions0198A390Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateStaffPermissions0198A390Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}/permissions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Clear akk tags from the organization.
 */
export const organizationadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminClearTagsF51Db4E0Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminClearTagsF51Db4E0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const organizationadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddTags2957Ea37Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddTags2957Ea37Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const organizationadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveTagsCa0E5D2dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRemoveTagsCa0E5D2dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Events
 *
 * Browse and search events visible to the current user.
 *
 * Results are filtered by visibility rules (public/private), event status, and user permissions.
 * By default shows only upcoming events; set include_past=true to see past events.
 * Ordering: 'distance' (default) shows nearest events based on user location, 'start' shows
 * soonest first, '-start' shows latest first. Supports filtering by organization, series,
 * tags, and text search.
 */
export const eventListEvents = <ThrowOnError extends boolean = false>(
	options?: Options<EventListEventsA65581F2Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<EventListEventsA65581F2Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an event invitation using a token from an invitation link or email.
 *
 * Creates an EventInvitation record for the user, granting access to the event.
 * Invitations can bypass certain eligibility requirements like membership, capacity limits,
 * and RSVP deadlines. Returns the event on success, or 400 if the token is invalid/expired.
 */
export const eventClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventClaimInvitation1E5Ef38cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventClaimInvitation1E5Ef38cResponses,
		EventClaimInvitation1E5Ef38cErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Event Attendees
 *
 * Get the list of confirmed attendees for this event.
 *
 * Returns users who have RSVPed 'yes' or have active tickets. Visibility is controlled by
 * event settings - attendee lists may be hidden from regular attendees. Organization staff
 * and event creators always have access.
 */
export const eventGetEventAttendees = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventAttendees0C9853C5Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventAttendees0C9853C5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/attendee-list',
		...options
	});
};

/**
 * Get My Event Status
 *
 * Check the authenticated user's current status and eligibility for an event.
 *
 * Returns either the user's RSVP/ticket status if they've already joined, or an eligibility
 * check result explaining what steps are needed to attend. The eligibility check validates:
 * event status, RSVP deadline, invitations, organization membership, required questionnaires,
 * capacity limits, and ticket availability. Use this to determine which action to show users
 * (RSVP button, buy ticket, fill questionnaire, etc.).
 */
export const eventGetMyEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventGetMyEventStatus3A3E231cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetMyEventStatus3A3E231cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/my-status',
		...options
	});
};

/**
 * Request Invitation
 *
 * Submit a request to be invited to a private or invite-only event.
 *
 * Creates an invitation request that event organizers can approve or reject. Include an
 * optional message explaining why you want to attend. Returns 400 if you've already
 * submitted a request for this event. Check GET /{event_id}/my-status to see if you
 * need an invitation.
 */
export const eventRequestInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventRequestInvitation50Dcb1B6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRequestInvitation50Dcb1B6Responses,
		EventRequestInvitation50Dcb1B6Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/request-invitation',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Resources
 *
 * Get supplementary resources attached to this event.
 *
 * Returns resources like documents, links, or media files provided by event organizers.
 * Resources may be public or restricted to attendees only. Supports filtering by type
 * (file, link, etc.) and text search.
 */
export const eventListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventListResourcesF9B3F1E4Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListResourcesF9B3F1E4Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/events/{event_id}/resources',
			...options
		}
	);
};

/**
 * Delete Invitation Request
 *
 * Cancel a pending invitation request.
 *
 * Withdraws your invitation request for an event. Only works for your own requests
 * that haven't been decided yet. Returns 404 if the request doesn't exist or doesn't
 * belong to you.
 */
export const eventDeleteInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventDeleteInvitationRequestFc4624F7Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventDeleteInvitationRequestFc4624F7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/invitation-request/{request_id}',
		...options
	});
};

/**
 * List User Invitation Requests
 *
 * View your invitation requests across all events.
 *
 * Returns your invitation requests with their current status (pending/approved/rejected).
 * Filter by event_id to see requests for a specific event, or by status to see approved/
 * rejected requests. Use this to track which events you've requested access to.
 */
export const eventListUserInvitationRequests = <ThrowOnError extends boolean = false>(
	options?: Options<EventListUserInvitationRequestsE960B2EaData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventListUserInvitationRequestsE960B2EaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/me/pending_invitation_requests',
		...options
	});
};

/**
 * Get Event By Slugs
 *
 * Retrieve event details using human-readable organization and event slugs.
 *
 * Use this for clean URLs like /events/tech-meetup/monthly-session. Returns 404 if
 * the event doesn't exist or you don't have permission to view it.
 */
export const eventGetEventBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventBySlugsAc566E1eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventBySlugsAc566E1eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{org_slug}/{event_slug}',
		...options
	});
};

/**
 * Get Event
 *
 * Retrieve full event details by ID.
 *
 * Returns comprehensive event information including description, location, times, organization,
 * ticket tiers, and visibility settings. Use this to display the event detail page.
 */
export const eventGetEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEvent92Ea18B6Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventGetEvent92Ea18B6Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}',
		...options
	});
};

/**
 * Rsvp Event
 *
 * RSVP to a non-ticketed event (answer: 'yes', 'no', or 'maybe').
 *
 * Only works for events where requires_ticket=false. Runs full eligibility check including
 * event status, RSVP deadline, invitations, membership requirements, required questionnaires,
 * and capacity limits. Returns RSVP record on success. On failure, returns eligibility details
 * explaining what's blocking you and what next_step to take (e.g., complete questionnaire,
 * request invitation).
 */
export const eventRsvpEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventRsvpEvent5Af7E321Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRsvpEvent5Af7E321Responses,
		EventRsvpEvent5Af7E321Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/rsvp/{answer}',
		...options
	});
};

/**
 * List Tiers
 *
 * Get all ticket tiers available for purchase at this event.
 *
 * Returns ticket types with pricing, availability, and sales windows. Filters tiers based
 * on user eligibility - you'll only see tiers you're allowed to purchase. Check visibility
 * settings and sales_start_at/sales_end_at to determine which are currently on sale.
 */
export const eventListTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventListTiers36D0E0EcData, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListTiers36D0E0EcResponses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/tiers',
		...options
	});
};

/**
 * Ticket Checkout
 *
 * Purchase a fixed-price event ticket.
 *
 * Runs eligibility checks before allowing purchase. For online payment: returns Stripe
 * checkout URL to redirect user for payment. For free/offline/at-the-door tickets: creates
 * ticket immediately and returns it. Cannot be used for pay-what-you-can (PWYC) tiers -
 * use POST /{event_id}/tickets/{tier_id}/checkout/pwyc instead. On eligibility failure,
 * returns 400 with eligibility details explaining what's blocking you and what next_step
 * to take (e.g., complete questionnaire, request invitation, wait for tickets to go on sale).
 */
export const eventTicketCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketCheckoutB1C67548Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketCheckoutB1C67548Responses,
		EventTicketCheckoutB1C67548Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout',
		...options
	});
};

/**
 * Ticket Pwyc Checkout
 *
 * Purchase a pay-what-you-can (PWYC) ticket with a user-specified amount.
 *
 * Only works for ticket tiers with price_type=PWYC. Validates the amount is within the
 * tier's min/max bounds. Returns Stripe checkout URL for online payment, or creates ticket
 * immediately for free/offline payment methods. Returns 400 for non-PWYC tiers, if amount
 * is out of bounds, or on eligibility failure (with eligibility details explaining what's
 * blocking you and what next_step to take).
 */
export const eventTicketPwycCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketPwycCheckoutCa32Fa44Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketPwycCheckoutCa32Fa44Responses,
		EventTicketPwycCheckoutCa32Fa44Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout/pwyc',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Questionnaire
 *
 * Retrieve a questionnaire required for event admission.
 *
 * Returns the questionnaire structure with all sections and questions. Questions may be
 * shuffled based on questionnaire settings. Use this to display the form that users must
 * complete before accessing the event.
 */
export const eventGetQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventGetQuestionnaire13Ed0Da8Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetQuestionnaire13Ed0Da8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}',
		...options
	});
};

/**
 * Submit Questionnaire
 *
 * Submit answers to an event admission questionnaire.
 *
 * Validates all required questions are answered. If submission status is 'ready', triggers
 * automatic evaluation (may use LLM for free-text answers). Depending on the questionnaire's
 * evaluation_mode (automatic/manual/hybrid), results may be immediate or pending staff review.
 * Passing the questionnaire may be required before you can RSVP or purchase tickets.
 */
export const eventSubmitQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventSubmitQuestionnaire9A4508A1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventSubmitQuestionnaire9A4508A1Responses,
		EventSubmitQuestionnaire9A4508A1Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}/submit',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Event Token
 *
 * Delete an event token.
 */
export const eventadminDeleteEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteEventToken2E875110Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteEventToken2E875110Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options
	});
};

/**
 * Update Event Token
 *
 * Update an event token.
 */
export const eventadminUpdateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventTokenB1De05BaData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventTokenB1De05BaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Event Tokens
 *
 * List all event tokens.
 */
export const eventadminListEventTokens = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventTokensE200D3B4Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventTokensE200D3B4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options
	});
};

/**
 * Create Event Token
 *
 * Create a new event token.
 */
export const eventadminCreateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateEventTokenA7E4Eb7eData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateEventTokenA7E4Eb7eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Decide Invitation Request
 *
 * Request an invitation to an event.
 */
export const eventadminDecideInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDecideInvitationRequestBeef1Ce9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminDecideInvitationRequestBeef1Ce9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-request/{request_id}/{decision}',
		...options
	});
};

/**
 * List Event Invitation Requests
 *
 * List all pending invitation requests for the current user.
 */
export const eventadminListEventInvitationRequests = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventInvitationRequests4D55Ca34Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventInvitationRequests4D55Ca34Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation_requests',
		...options
	});
};

/**
 * Update Event
 *
 * Update event by ID.
 */
export const eventadminUpdateEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEvent668C060dData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEvent668C060dResponses,
		EventadminUpdateEvent668C060dErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Event Status
 *
 * Update event status to the specified value.
 */
export const eventadminUpdateEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventStatus2D9E4206Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUpdateEventStatus2D9E4206Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/actions/update-status/{status}',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to event.
 */
export const eventadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadLogoA2A42BbcData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadLogoA2A42BbcResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to event.
 */
export const eventadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadCoverArt02E939E7Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadCoverArt02E939E7Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event.
 */
export const eventadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteLogoA8572577Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteLogoA8572577Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event.
 */
export const eventadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteCoverArtF2F21F1cData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteCoverArtF2F21F1cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminClearTags0Fee13B3Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminClearTags0Fee13B3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const eventadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminAddTags2685Ad83Data, ThrowOnError>
) => {
	return (options.client ?? client).post<EventadminAddTags2685Ad83Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/event-admin/{event_id}/tags',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options.headers
			}
		}
	);
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminRemoveTagsDe97B455Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminRemoveTagsDe97B455Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Ticket Tiers
 *
 * List all ticket tiers for an event.
 */
export const eventadminListTicketTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketTiersBe152C27Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketTiersBe152C27Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tiers',
		...options
	});
};

/**
 * Create Ticket Tier
 *
 * Create a new ticket tier for an event.
 */
export const eventadminCreateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateTicketTierB627B0BbData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateTicketTierB627B0BbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ticket Tier
 *
 * Delete a ticket tier.
 *
 * Note this might raise a 400 if ticket with this tier where already bought.
 */
export const eventadminDeleteTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteTicketTier4D289FddData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteTicketTier4D289FddResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options
	});
};

/**
 * Update Ticket Tier
 *
 * Update a ticket tier.
 */
export const eventadminUpdateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateTicketTier3C74A206Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateTicketTier3C74A206Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Tickets
 *
 * List all pending tickets for offline and at-the-door payment methods.
 */
export const eventadminListPendingTickets = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingTickets750Cf731Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingTickets750Cf731Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-tickets',
		...options
	});
};

/**
 * Confirm Ticket Payment
 *
 * Confirm payment for a pending offline ticket and activate it.
 */
export const eventadminConfirmTicketPayment = <ThrowOnError extends boolean = false>(
	options: Options<EventadminConfirmTicketPayment6A0Bf2E3Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminConfirmTicketPayment6A0Bf2E3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/confirm-payment',
		...options
	});
};

/**
 * Check In Ticket
 *
 * Check in an attendee by scanning their ticket.
 */
export const eventadminCheckInTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCheckInTicket4B602Ef6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCheckInTicket4B602Ef6Responses,
		EventadminCheckInTicket4B602Ef6Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/check-in',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Invitations
 *
 * List all invitations for registered users.
 */
export const eventadminListInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListInvitations44Da3003Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListInvitations44Da3003Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options
	});
};

/**
 * Create Invitations
 *
 * Create direct invitations for users by email addresses.
 */
export const eventadminCreateInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateInvitations6517A1A7Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateInvitations6517A1A7Responses,
		EventadminCreateInvitations6517A1A7Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Invitations
 *
 * List all pending invitations for unregistered users.
 */
export const eventadminListPendingInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingInvitationsF6C35418Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingInvitationsF6C35418Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-invitations',
		...options
	});
};

/**
 * Delete Invitation Endpoint
 *
 * Delete an invitation (registered or pending).
 */
export const eventadminDeleteInvitationEndpoint = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteInvitationEndpoint136C2E0cData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteInvitationEndpoint136C2E0cResponses,
		EventadminDeleteInvitationEndpoint136C2E0cErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations/{invitation_type}/{invitation_id}',
		...options
	});
};

/**
 * My Permissions
 *
 * Get a user's permission map, per organization.
 */
export const permissionMyPermissions = <ThrowOnError extends boolean = false>(
	options?: Options<PermissionMyPermissionsDf4Ba5B7Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		PermissionMyPermissionsDf4Ba5B7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/permissions/my-permissions',
		...options
	});
};

/**
 * List Event Series
 *
 * Browse event series (recurring event collections) visible to the current user.
 *
 * Event series group related recurring events (e.g., "Monthly Tech Meetup"). Results are
 * filtered by visibility and permissions. Supports filtering by organization and text search.
 */
export const eventseriesListEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<EventseriesListEventSeries21Dfe186Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventseriesListEventSeries21Dfe186Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/',
		...options
	});
};

/**
 * Get Event Series By Slugs
 *
 * Retrieve event series details using human-readable organization and series slugs.
 *
 * Use this for clean URLs like /event-series/tech-meetup/monthly-sessions. Returns 404
 * if the series doesn't exist or you don't have permission to view it.
 */
export const eventseriesGetEventSeriesBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesBySlugs8Dfaa63fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesBySlugs8Dfaa63fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{org_slug}/{series_slug}',
		...options
	});
};

/**
 * Get Event Series
 *
 * Retrieve full event series details by ID.
 *
 * Returns series information including description, organization, and settings. Use this
 * to display the series profile page and list related events.
 */
export const eventseriesGetEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeries9F678Ad0Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeries9F678Ad0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this event series.
 *
 * Returns documents, links, or media files that apply to all events in the series.
 * Resources may be public or restricted based on visibility settings. Supports filtering
 * by type and text search.
 */
export const eventseriesListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesListResources097A63AaData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesListResources097A63AaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}/resources',
		...options
	});
};

/**
 * Delete Event Series
 *
 * Permanently delete an event series (admin only).
 *
 * Removes the series. Events in the series are not deleted but become standalone.
 * Requires 'delete_event_series' permission (typically organization owners only).
 */
export const eventseriesadminDeleteEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteEventSeries1Dfa914aData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteEventSeries1Dfa914aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options
	});
};

/**
 * Update Event Series
 *
 * Update event series details (admin only).
 *
 * Modify series name, description, or settings. Requires 'edit_event_series' permission
 * (organization staff/owners). Changes apply to the series but not individual events.
 */
export const eventseriesadminUpdateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUpdateEventSeries2E05E165Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventseriesadminUpdateEventSeries2E05E165Responses,
		EventseriesadminUpdateEventSeries2E05E165Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Upload Logo
 *
 * Upload a logo image for the event series (admin only).
 *
 * Replaces the existing logo. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadLogo755D74F5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadLogo755D74F5Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art/banner image for the event series (admin only).
 *
 * Replaces the existing cover art. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadCoverArt78F28217Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadCoverArt78F28217Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event series (admin only).
 *
 * Removes the logo image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteLogoA3235F6dData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteLogoA3235F6dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event series (admin only).
 *
 * Removes the cover art image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteCoverArt200559C8Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteCoverArt200559C8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove all tags from the event series (admin only).
 *
 * Clears all categorization tags. Requires 'edit_event_series' permission.
 */
export const eventseriesadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminClearTags1D905BbcData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminClearTags1D905BbcResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add tags to categorize the event series (admin only).
 *
 * Tags help users discover series through filtering and search. Returns the updated tag list.
 * Requires 'edit_event_series' permission.
 */
export const eventseriesadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminAddTagsA9D60A64Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminAddTagsA9D60A64Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove specific tags from the event series (admin only).
 *
 * Removes only the specified tags, keeping others. Returns the updated tag list. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminRemoveTagsC64D342bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminRemoveTagsC64D342bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Potluck Items
 *
 * View all potluck items for this event.
 *
 * Returns items users can bring, with flags indicating if each item is assigned and if you
 * own it. Available when event.potluck_open=true. Use this to display what's needed and
 * what you've claimed.
 */
export const potluckListPotluckItems = <ThrowOnError extends boolean = false>(
	options: Options<PotluckListPotluckItemsA6Ef0B35Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		PotluckListPotluckItemsA6Ef0B35Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options
	});
};

/**
 * Create Potluck Item
 *
 * Add a new item to the event's potluck list.
 *
 * Specify item name, quantity, and optional notes. Attendees can claim items via
 * POST /{event_id}/potluck/{item_id}/claim. Requires permission to create potluck items.
 */
export const potluckCreatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckCreatePotluckItem9A731D42Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckCreatePotluckItem9A731D42Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Potluck Item
 *
 * Remove a potluck item from the event.
 *
 * Deletes the item even if it's been claimed. Requires permission to manage potluck items.
 */
export const potluckDeletePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckDeletePotluckItemB8Dc54BbData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		PotluckDeletePotluckItemB8Dc54BbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options
	});
};

/**
 * Update Potluck Item
 *
 * Update a potluck item's details.
 *
 * Modify item name, quantity, or notes. Requires permission to manage potluck items
 * (typically event organizers).
 */
export const potluckUpdatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUpdatePotluckItem57Eeafd5Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		PotluckUpdatePotluckItem57Eeafd5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Claim Potluck Item
 *
 * Claim a potluck item to bring to the event.
 *
 * Assigns the item to you. Returns 400 if already claimed by someone else. Use this when
 * you want to commit to bringing a specific item.
 */
export const potluckClaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckClaimPotluckItemFd5Ebe7bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckClaimPotluckItemFd5Ebe7bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/claim',
		...options
	});
};

/**
 * Unclaim Potluck Item
 *
 * Release a potluck item you previously claimed.
 *
 * Makes the item available for others to claim. Returns 404 if the item isn't claimed
 * by you.
 */
export const potluckUnclaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUnclaimPotluckItem65Dc487aData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckUnclaimPotluckItem65Dc487aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/unclaim',
		...options
	});
};

/**
 * List Org Questionnaires
 *
 * Browse questionnaires you have permission to view or manage.
 *
 * Returns questionnaires from organizations where you have staff/owner access. Use this to
 * find questionnaires to attach to events or review submissions.
 */
export const questionnaireListOrgQuestionnaires = <ThrowOnError extends boolean = false>(
	options?: Options<QuestionnaireListOrgQuestionnaires2Ca13Df8Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		QuestionnaireListOrgQuestionnaires2Ca13Df8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/',
		...options
	});
};

/**
 * Create Org Questionnaire
 *
 * Create a new admission questionnaire for an organization (admin only).
 *
 * Sets up an empty questionnaire structure. After creation, add sections and questions via
 * POST /questionnaires/{id}/sections and /multiple-choice-questions endpoints. Requires
 * 'create_questionnaire' permission (organization staff/owners).
 */
export const questionnaireCreateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateOrgQuestionnaire81049B53Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateOrgQuestionnaire81049B53Responses,
		QuestionnaireCreateOrgQuestionnaire81049B53Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{organization_id}/create-questionnaire',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Org Questionnaire
 *
 * Retrieve a questionnaire's details and structure (admin only).
 *
 * Returns the questionnaire with all sections, questions, and settings. Use this to view or
 * edit an existing questionnaire. Requires permission to manage the organization's questionnaires.
 */
export const questionnaireGetOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetOrgQuestionnaire3C588434Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetOrgQuestionnaire3C588434Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Create Section
 *
 * Add a section to organize questions in the questionnaire (admin only).
 *
 * Sections group related questions. Specify section name and display order. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateSectionDd4C1537Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateSectionDd4C1537Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Section
 *
 * Update a questionnaire section's details (admin only).
 *
 * Modify section name or display order. Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateSection18C63436Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateSection18C63436Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Question
 *
 * Add a multiple-choice question to the questionnaire (admin only).
 *
 * Create a question with predefined answer options. After creation, add options via
 * POST /questionnaires/{id}/multiple-choice-questions/{question_id}/options. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcQuestion39Ab1622Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcQuestion39Ab1622Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Mc Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcQuestion452Aeeb2Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcQuestion452Aeeb2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireCreateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcOptionF40841FfData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcOptionF40841FfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}/options',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcOption54Ddd8FfData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcOption54Ddd8FfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Ft Question
 *
 * Add a free-text question to the questionnaire (admin only).
 *
 * Create an open-ended question for text responses. Can be auto-evaluated by LLM based on
 * scoring criteria. Requires 'edit_questionnaire' permission.
 */
export const questionnaireCreateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateFtQuestion8390EaacData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateFtQuestion8390EaacResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Ft Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateFtQuestion7279E38cData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateFtQuestion7279E38cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Submissions
 *
 * View user submissions for this questionnaire (admin only).
 *
 * Returns submitted questionnaires ready for review. Use this to see who has applied for
 * event access and their responses. Requires 'evaluate_questionnaire' permission.
 */
export const questionnaireListSubmissions = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireListSubmissions69Ad45A3Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireListSubmissions69Ad45A3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions',
		...options
	});
};

/**
 * Get Submission Detail
 *
 * View detailed answers for a specific submission (admin only).
 *
 * Returns all questions and the user's answers, plus automatic evaluation results if available.
 * Use this to review a submission before manual approval/rejection. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireGetSubmissionDetail = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetSubmissionDetail876D63D4Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetSubmissionDetail876D63D4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}',
		...options
	});
};

/**
 * Evaluate Submission
 *
 * Manually approve or reject a questionnaire submission (admin only).
 *
 * Overrides automatic evaluation or provides decision for manual-review questionnaires.
 * Approved users can then RSVP or purchase tickets for the event. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireEvaluateSubmission = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireEvaluateSubmissionC4C26231Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireEvaluateSubmissionC4C26231Responses,
		QuestionnaireEvaluateSubmissionC4C26231Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}/evaluate',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get General Preferences
 *
 * Get your global preferences that apply across all organizations and events.
 *
 * Returns default notification and privacy settings. These serve as defaults that can be
 * overridden at organization, series, or event level.
 */
export const userpreferencesGetGeneralPreferences = <ThrowOnError extends boolean = false>(
	options?: Options<UserpreferencesGetGeneralPreferencesD7E7Fdb8Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		UserpreferencesGetGeneralPreferencesD7E7Fdb8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options
	});
};

/**
 * Update Global Preferences
 *
 * Update your global preference defaults.
 *
 * Modify notification and privacy settings. Set overwrite_children=true to cascade changes
 * to all organization/series/event-level preferences, overriding custom settings.
 */
export const userpreferencesUpdateGlobalPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateGlobalPreferencesB4E8Df59Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateGlobalPreferencesB4E8Df59Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Organization Preferences
 *
 * Get your preferences for a specific organization.
 *
 * Returns organization-level overrides for notifications and privacy. Falls back to global
 * preferences if not customized.
 */
export const userpreferencesGetOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetOrganizationPreferencesBf92B8DeData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetOrganizationPreferencesBf92B8DeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options
	});
};

/**
 * Update Organization Preferences
 *
 * Update preferences for a specific organization.
 *
 * Overrides global defaults for this organization. Set overwrite_children=true to cascade
 * changes to all series/event-level preferences within this organization.
 */
export const userpreferencesUpdateOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateOrganizationPreferences533B6A33Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateOrganizationPreferences533B6A33Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Series Preferences
 *
 * Get your preferences for a specific event series.
 *
 * Returns series-level overrides for notifications. Falls back to organization or global
 * preferences if not customized.
 */
export const userpreferencesGetEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetEventSeriesPreferencesA93181E7Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventSeriesPreferencesA93181E7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options
	});
};

/**
 * Update Event Series Preferences
 *
 * Update preferences for a specific event series.
 *
 * Overrides organization/global defaults for this series. Set overwrite_children=true to
 * cascade changes to all individual event preferences within this series.
 */
export const userpreferencesUpdateEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateEventSeriesPreferences32Fefe94Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventSeriesPreferences32Fefe94Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Preferences
 *
 * Get your preferences for a specific event.
 *
 * Returns event-level overrides for notifications. Falls back to series, organization, or
 * global preferences if not customized.
 */
export const userpreferencesGetEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesGetEventPreferences72682Ba9Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventPreferences72682Ba9Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options
	});
};

/**
 * Update Event Preferences
 *
 * Update preferences for a specific event.
 *
 * Overrides series/organization/global defaults for this event. The most specific preference
 * level always takes precedence.
 */
export const userpreferencesUpdateEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesUpdateEventPreferencesE352Eb52Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventPreferencesE352Eb52Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Handle Webhook
 *
 * Process Stripe webhook events for payment processing.
 *
 * Handles payment confirmations, failures, and refunds. Verifies webhook signature for
 * security. This endpoint is called by Stripe, not by clients directly.
 */
export const stripewebhookHandleWebhook = <ThrowOnError extends boolean = false>(
	options?: Options<StripewebhookHandleWebhook567A8199Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		StripewebhookHandleWebhook567A8199Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/stripe/webhook',
		...options
	});
};

/**
 * List Tags
 *
 * Browse and search all available tags in the system.
 *
 * Tags are used to categorize organizations, events, and series. Supports autocomplete via
 * the 'search' query parameter (e.g., /api/tags/?search=tech). Use this to populate tag
 * selection dropdowns or filters.
 */
export const tagListTags = <ThrowOnError extends boolean = false>(
	options?: Options<TagListTagsE815B739Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<TagListTagsE815B739Responses, unknown, ThrowOnError>({
		url: '/api/tags/',
		...options
	});
};

/**
 * List Cities
 *
 * Search and browse cities from the global database.
 *
 * Supports filtering by country and searching by city name. Use the 'search' parameter
 * for autocomplete functionality. Useful for setting user location preferences or
 * filtering events by location.
 */
export const cityListCities = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCities6A0Ae61dData, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCities6A0Ae61dResponses, unknown, ThrowOnError>({
		url: '/api/cities/',
		...options
	});
};

/**
 * List Countries
 *
 * Get a list of all countries with cities in the database.
 *
 * Returns country names for filtering cities. Use this to populate country
 * selection dropdowns in location pickers.
 */
export const cityListCountries = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCountriesDa1A1A42Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCountriesDa1A1A42Responses, unknown, ThrowOnError>(
		{
			url: '/api/cities/countries',
			...options
		}
	);
};

/**
 * Get City
 *
 * Retrieve detailed information for a specific city by ID.
 *
 * Returns city details including name, coordinates, and country. Use this to
 * get full city information after selecting from a search result.
 */
export const cityGetCity = <ThrowOnError extends boolean = false>(
	options: Options<CityGetCity55765D3eData, ThrowOnError>
) => {
	return (options.client ?? client).get<CityGetCity55765D3eResponses, unknown, ThrowOnError>({
		url: '/api/cities/{city_id}',
		...options
	});
};
