// This file is auto-generated by @hey-api/openapi-ts

import {
	type Client,
	formDataBodySerializer,
	type Options as Options2,
	type TDataShape
} from './client';
import { client } from './client.gen';
import type {
	AccountDeleteAccountConfirm932Fddf4Data,
	AccountDeleteAccountConfirm932Fddf4Responses,
	AccountDeleteAccountRequestBbfca3DbData,
	AccountDeleteAccountRequestBbfca3DbResponses,
	AccountExportData72410158Data,
	AccountExportData72410158Responses,
	AccountMeC03A3462Data,
	AccountMeC03A3462Responses,
	AccountRegister1202Fd12Data,
	AccountRegister1202Fd12Responses,
	AccountResendVerificationEmailF2B745F7Data,
	AccountResendVerificationEmailF2B745F7Errors,
	AccountResendVerificationEmailF2B745F7Responses,
	AccountResetPasswordA5Dd0182Data,
	AccountResetPasswordA5Dd0182Responses,
	AccountResetPasswordRequest6C35B041Data,
	AccountResetPasswordRequest6C35B041Responses,
	AccountUpdateProfile668A42C3Data,
	AccountUpdateProfile668A42C3Responses,
	AccountVerifyEmail3Ecbc3AeData,
	AccountVerifyEmail3Ecbc3AeResponses,
	ApiApiHealthcheckData,
	ApiApiHealthcheckResponses,
	ApiApiVersionData,
	ApiApiVersionResponses,
	AuthDemoObtainToken88063011Data,
	AuthDemoObtainToken88063011Responses,
	AuthGoogleLogin236F3339Data,
	AuthGoogleLogin236F3339Responses,
	AuthObtainToken88Ed2E9eData,
	AuthObtainToken88Ed2E9eResponses,
	AuthObtainTokenWithOtpFbeaece9Data,
	AuthObtainTokenWithOtpFbeaece9Responses,
	CityGetCity0C6F31D6Data,
	CityGetCity0C6F31D6Responses,
	CityListCities0D393970Data,
	CityListCities0D393970Responses,
	CityListCountries1C8A632dData,
	CityListCountries1C8A632dResponses,
	DashboardDashboardEvents5Fe1Ef87Data,
	DashboardDashboardEvents5Fe1Ef87Responses,
	DashboardDashboardEventSeriesB82A9A39Data,
	DashboardDashboardEventSeriesB82A9A39Responses,
	DashboardDashboardInvitations21454Ea3Data,
	DashboardDashboardInvitations21454Ea3Responses,
	DashboardDashboardOrganizationsDc29417eData,
	DashboardDashboardOrganizationsDc29417eResponses,
	EventadminAddTags3D112A61Data,
	EventadminAddTags3D112A61Responses,
	EventadminCheckInTicket249Df1DeData,
	EventadminCheckInTicket249Df1DeErrors,
	EventadminCheckInTicket249Df1DeResponses,
	EventadminClearTagsB1B9B1F8Data,
	EventadminClearTagsB1B9B1F8Responses,
	EventadminConfirmTicketPaymentBff639AfData,
	EventadminConfirmTicketPaymentBff639AfResponses,
	EventadminCreateEventToken0A7723D4Data,
	EventadminCreateEventToken0A7723D4Responses,
	EventadminCreateInvitations98A90F9bData,
	EventadminCreateInvitations98A90F9bErrors,
	EventadminCreateInvitations98A90F9bResponses,
	EventadminCreateTicketTierE35Baf6cData,
	EventadminCreateTicketTierE35Baf6cResponses,
	EventadminDecideInvitationRequest31F5Def6Data,
	EventadminDecideInvitationRequest31F5Def6Responses,
	EventadminDeleteCoverArt9A000Bb8Data,
	EventadminDeleteCoverArt9A000Bb8Responses,
	EventadminDeleteEventToken76Df8B22Data,
	EventadminDeleteEventToken76Df8B22Responses,
	EventadminDeleteInvitationEndpointE5A439AcData,
	EventadminDeleteInvitationEndpointE5A439AcErrors,
	EventadminDeleteInvitationEndpointE5A439AcResponses,
	EventadminDeleteLogoC8394081Data,
	EventadminDeleteLogoC8394081Responses,
	EventadminDeleteTicketTier783A7CacData,
	EventadminDeleteTicketTier783A7CacResponses,
	EventadminListEventInvitationRequestsE8668Db5Data,
	EventadminListEventInvitationRequestsE8668Db5Responses,
	EventadminListEventTokens0B778889Data,
	EventadminListEventTokens0B778889Responses,
	EventadminListInvitations7782F2A0Data,
	EventadminListInvitations7782F2A0Responses,
	EventadminListPendingInvitations671C5E67Data,
	EventadminListPendingInvitations671C5E67Responses,
	EventadminListPendingTickets6E230FadData,
	EventadminListPendingTickets6E230FadResponses,
	EventadminListTicketTiersF22A78FfData,
	EventadminListTicketTiersF22A78FfResponses,
	EventadminRemoveTags067Beb24Data,
	EventadminRemoveTags067Beb24Responses,
	EventadminUpdateEventC76E56C4Data,
	EventadminUpdateEventC76E56C4Errors,
	EventadminUpdateEventC76E56C4Responses,
	EventadminUpdateEventStatus9F7A2771Data,
	EventadminUpdateEventStatus9F7A2771Responses,
	EventadminUpdateEventToken4E026BbaData,
	EventadminUpdateEventToken4E026BbaResponses,
	EventadminUpdateTicketTier89Acd336Data,
	EventadminUpdateTicketTier89Acd336Responses,
	EventadminUploadCoverArt4645Aff2Data,
	EventadminUploadCoverArt4645Aff2Responses,
	EventadminUploadLogo4032F42dData,
	EventadminUploadLogo4032F42dResponses,
	EventClaimInvitation57Ce6780Data,
	EventClaimInvitation57Ce6780Errors,
	EventClaimInvitation57Ce6780Responses,
	EventDeleteInvitationRequest8B93D7FbData,
	EventDeleteInvitationRequest8B93D7FbResponses,
	EventGetEvent52Cb96A6Data,
	EventGetEvent52Cb96A6Responses,
	EventGetEventAttendees85A87EcfData,
	EventGetEventAttendees85A87EcfResponses,
	EventGetEventBySlugsD1F8Cd68Data,
	EventGetEventBySlugsD1F8Cd68Responses,
	EventGetMyEventStatus60C8F2A8Data,
	EventGetMyEventStatus60C8F2A8Responses,
	EventGetQuestionnaireEc0B9CbaData,
	EventGetQuestionnaireEc0B9CbaResponses,
	EventListEventsEa2Cdd26Data,
	EventListEventsEa2Cdd26Responses,
	EventListResourcesE350B61fData,
	EventListResourcesE350B61fResponses,
	EventListTiers45E629C7Data,
	EventListTiers45E629C7Responses,
	EventListUserInvitationRequests94A7F154Data,
	EventListUserInvitationRequests94A7F154Responses,
	EventRequestInvitation21B61345Data,
	EventRequestInvitation21B61345Errors,
	EventRequestInvitation21B61345Responses,
	EventRsvpEvent39Db14AaData,
	EventRsvpEvent39Db14AaErrors,
	EventRsvpEvent39Db14AaResponses,
	EventseriesadminAddTags71F15752Data,
	EventseriesadminAddTags71F15752Responses,
	EventseriesadminClearTags08B0E3DaData,
	EventseriesadminClearTags08B0E3DaResponses,
	EventseriesadminDeleteCoverArtFa9Daba7Data,
	EventseriesadminDeleteCoverArtFa9Daba7Responses,
	EventseriesadminDeleteEventSeries1431Bd51Data,
	EventseriesadminDeleteEventSeries1431Bd51Responses,
	EventseriesadminDeleteLogoFbfbfa67Data,
	EventseriesadminDeleteLogoFbfbfa67Responses,
	EventseriesadminRemoveTags44D1Aca4Data,
	EventseriesadminRemoveTags44D1Aca4Responses,
	EventseriesadminUpdateEventSeries18F45D43Data,
	EventseriesadminUpdateEventSeries18F45D43Errors,
	EventseriesadminUpdateEventSeries18F45D43Responses,
	EventseriesadminUploadCoverArtF194C004Data,
	EventseriesadminUploadCoverArtF194C004Responses,
	EventseriesadminUploadLogo5D9Cf647Data,
	EventseriesadminUploadLogo5D9Cf647Responses,
	EventseriesGetEventSeriesA0296AdeData,
	EventseriesGetEventSeriesA0296AdeResponses,
	EventseriesGetEventSeriesBySlugsB41402E7Data,
	EventseriesGetEventSeriesBySlugsB41402E7Responses,
	EventseriesListEventSeriesB1312244Data,
	EventseriesListEventSeriesB1312244Responses,
	EventseriesListResources01160A1bData,
	EventseriesListResources01160A1bResponses,
	EventSubmitQuestionnaireA79B6AedData,
	EventSubmitQuestionnaireA79B6AedErrors,
	EventSubmitQuestionnaireA79B6AedResponses,
	EventTicketCheckoutEb2E95A2Data,
	EventTicketCheckoutEb2E95A2Errors,
	EventTicketCheckoutEb2E95A2Responses,
	EventTicketPwycCheckoutB71A13BcData,
	EventTicketPwycCheckoutB71A13BcErrors,
	EventTicketPwycCheckoutB71A13BcResponses,
	OrganizationadminAddStaff7A792649Data,
	OrganizationadminAddStaff7A792649Responses,
	OrganizationadminAddTagsF1A6E2B8Data,
	OrganizationadminAddTagsF1A6E2B8Responses,
	OrganizationadminApproveMembershipRequestFe4098C5Data,
	OrganizationadminApproveMembershipRequestFe4098C5Responses,
	OrganizationadminClearTags151A779eData,
	OrganizationadminClearTags151A779eResponses,
	OrganizationadminCreateEvent34Bb3767Data,
	OrganizationadminCreateEvent34Bb3767Errors,
	OrganizationadminCreateEvent34Bb3767Responses,
	OrganizationadminCreateEventSeries370Cde92Data,
	OrganizationadminCreateEventSeries370Cde92Errors,
	OrganizationadminCreateEventSeries370Cde92Responses,
	OrganizationadminCreateOrganizationToken12Ccf793Data,
	OrganizationadminCreateOrganizationToken12Ccf793Responses,
	OrganizationadminCreateResource886B8B6bData,
	OrganizationadminCreateResource886B8B6bResponses,
	OrganizationadminDeleteCoverArt233E7Ea5Data,
	OrganizationadminDeleteCoverArt233E7Ea5Responses,
	OrganizationadminDeleteLogo1B9F1732Data,
	OrganizationadminDeleteLogo1B9F1732Responses,
	OrganizationadminDeleteOrganizationToken5E8794C1Data,
	OrganizationadminDeleteOrganizationToken5E8794C1Responses,
	OrganizationadminDeleteResourceEdc38488Data,
	OrganizationadminDeleteResourceEdc38488Responses,
	OrganizationadminGetResource0B578FedData,
	OrganizationadminGetResource0B578FedResponses,
	OrganizationadminListMembers7B1E70C1Data,
	OrganizationadminListMembers7B1E70C1Responses,
	OrganizationadminListMembershipRequests2243567eData,
	OrganizationadminListMembershipRequests2243567eResponses,
	OrganizationadminListOrganizationTokens6B8Dff04Data,
	OrganizationadminListOrganizationTokens6B8Dff04Responses,
	OrganizationadminListResources09C4014cData,
	OrganizationadminListResources09C4014cResponses,
	OrganizationadminListStaff61169368Data,
	OrganizationadminListStaff61169368Responses,
	OrganizationadminRejectMembershipRequestF35B5140Data,
	OrganizationadminRejectMembershipRequestF35B5140Responses,
	OrganizationadminRemoveMemberCd6F873dData,
	OrganizationadminRemoveMemberCd6F873dResponses,
	OrganizationadminRemoveStaffC2C202D6Data,
	OrganizationadminRemoveStaffC2C202D6Responses,
	OrganizationadminRemoveTags1A3F0D85Data,
	OrganizationadminRemoveTags1A3F0D85Responses,
	OrganizationadminStripeAccountVerify5F8B8939Data,
	OrganizationadminStripeAccountVerify5F8B8939Responses,
	OrganizationadminStripeConnect94583CddData,
	OrganizationadminStripeConnect94583CddResponses,
	OrganizationadminUpdateOrganization8Fa516C5Data,
	OrganizationadminUpdateOrganization8Fa516C5Responses,
	OrganizationadminUpdateOrganizationToken26D7Bd12Data,
	OrganizationadminUpdateOrganizationToken26D7Bd12Responses,
	OrganizationadminUpdateResourceD287Ea6bData,
	OrganizationadminUpdateResourceD287Ea6bResponses,
	OrganizationadminUpdateStaffPermissionsDc54C58aData,
	OrganizationadminUpdateStaffPermissionsDc54C58aResponses,
	OrganizationadminUploadCoverArt0D3D28FeData,
	OrganizationadminUploadCoverArt0D3D28FeResponses,
	OrganizationadminUploadLogoBa52546fData,
	OrganizationadminUploadLogoBa52546fResponses,
	OrganizationClaimInvitationAf0F7792Data,
	OrganizationClaimInvitationAf0F7792Errors,
	OrganizationClaimInvitationAf0F7792Responses,
	OrganizationCreateMembershipRequestB44F63B2Data,
	OrganizationCreateMembershipRequestB44F63B2Responses,
	OrganizationGetOrganization0C15999cData,
	OrganizationGetOrganization0C15999cResponses,
	OrganizationListOrganizationsF55Af24dData,
	OrganizationListOrganizationsF55Af24dResponses,
	OrganizationListResources5Fba5A4eData,
	OrganizationListResources5Fba5A4eResponses,
	OtpDisableOtpFbd639E1Data,
	OtpDisableOtpFbd639E1Responses,
	OtpEnableOtpEe2F44F6Data,
	OtpEnableOtpEe2F44F6Responses,
	OtpSetupOtp6Dc1Fd42Data,
	OtpSetupOtp6Dc1Fd42Responses,
	PermissionMyPermissions3063E764Data,
	PermissionMyPermissions3063E764Responses,
	PotluckClaimPotluckItem3705Ca2fData,
	PotluckClaimPotluckItem3705Ca2fResponses,
	PotluckCreatePotluckItemDbfc56B8Data,
	PotluckCreatePotluckItemDbfc56B8Responses,
	PotluckDeletePotluckItem8356C3DdData,
	PotluckDeletePotluckItem8356C3DdResponses,
	PotluckListPotluckItems9A619D11Data,
	PotluckListPotluckItems9A619D11Responses,
	PotluckUnclaimPotluckItemB315A98cData,
	PotluckUnclaimPotluckItemB315A98cResponses,
	PotluckUpdatePotluckItem91D4634fData,
	PotluckUpdatePotluckItem91D4634fResponses,
	QuestionnaireCreateFtQuestion395Ea652Data,
	QuestionnaireCreateFtQuestion395Ea652Responses,
	QuestionnaireCreateMcOptionE3300FbdData,
	QuestionnaireCreateMcOptionE3300FbdResponses,
	QuestionnaireCreateMcQuestionB4627C77Data,
	QuestionnaireCreateMcQuestionB4627C77Responses,
	QuestionnaireCreateOrgQuestionnaire72673964Data,
	QuestionnaireCreateOrgQuestionnaire72673964Errors,
	QuestionnaireCreateOrgQuestionnaire72673964Responses,
	QuestionnaireCreateSectionBb771469Data,
	QuestionnaireCreateSectionBb771469Responses,
	QuestionnaireEvaluateSubmission61E05A39Data,
	QuestionnaireEvaluateSubmission61E05A39Errors,
	QuestionnaireEvaluateSubmission61E05A39Responses,
	QuestionnaireGetOrgQuestionnaire7133B504Data,
	QuestionnaireGetOrgQuestionnaire7133B504Responses,
	QuestionnaireGetSubmissionDetail5Fa20F07Data,
	QuestionnaireGetSubmissionDetail5Fa20F07Responses,
	QuestionnaireListOrgQuestionnaires8Dccc8C4Data,
	QuestionnaireListOrgQuestionnaires8Dccc8C4Responses,
	QuestionnaireListSubmissionsE077D0C2Data,
	QuestionnaireListSubmissionsE077D0C2Responses,
	QuestionnaireUpdateFtQuestion73Bb630aData,
	QuestionnaireUpdateFtQuestion73Bb630aResponses,
	QuestionnaireUpdateMcOption29C9B269Data,
	QuestionnaireUpdateMcOption29C9B269Responses,
	QuestionnaireUpdateMcQuestion2340D094Data,
	QuestionnaireUpdateMcQuestion2340D094Responses,
	QuestionnaireUpdateSection53E0A326Data,
	QuestionnaireUpdateSection53E0A326Responses,
	StripewebhookHandleWebhook450C34B3Data,
	StripewebhookHandleWebhook450C34B3Responses,
	TagListTagsA9Fbe54bData,
	TagListTagsA9Fbe54bResponses,
	TokenRefreshData,
	TokenRefreshResponses,
	UserpreferencesGetEventPreferencesAc8Ed02fData,
	UserpreferencesGetEventPreferencesAc8Ed02fResponses,
	UserpreferencesGetEventSeriesPreferencesD8Faf3F3Data,
	UserpreferencesGetEventSeriesPreferencesD8Faf3F3Responses,
	UserpreferencesGetGeneralPreferencesE8E4312cData,
	UserpreferencesGetGeneralPreferencesE8E4312cResponses,
	UserpreferencesGetOrganizationPreferences8F69Cbe4Data,
	UserpreferencesGetOrganizationPreferences8F69Cbe4Responses,
	UserpreferencesUpdateEventPreferences8029709bData,
	UserpreferencesUpdateEventPreferences8029709bResponses,
	UserpreferencesUpdateEventSeriesPreferencesD69Bed43Data,
	UserpreferencesUpdateEventSeriesPreferencesD69Bed43Responses,
	UserpreferencesUpdateGlobalPreferencesCd08A3E4Data,
	UserpreferencesUpdateGlobalPreferencesCd08A3E4Responses,
	UserpreferencesUpdateOrganizationPreferences2D5A4E68Data,
	UserpreferencesUpdateOrganizationPreferences2D5A4E68Responses
} from './types.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = Options2<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Version
 *
 * Get the API version.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiVersion = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiVersionData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiVersionResponses, unknown, ThrowOnError>({
		url: '/api/version',
		...options
	});
};

/**
 * Healthcheck
 *
 * Check the health of the API.
 *
 * Args:
 * request: The incoming HTTP request.
 *
 * Returns:
 * The response status code and message.
 */
export const apiApiHealthcheck = <ThrowOnError extends boolean = false>(
	options?: Options<ApiApiHealthcheckData, ThrowOnError>
) => {
	return (options?.client ?? client).get<ApiApiHealthcheckResponses, unknown, ThrowOnError>({
		url: '/api/healthcheck',
		...options
	});
};

/**
 * Obtain Token
 *
 * Authenticate with email and password to obtain JWT access/refresh tokens.
 *
 * For users without 2FA: Returns standard JWT token pair for immediate access.
 * For users with TOTP enabled: Returns a temporary token that must be exchanged for
 * a full token pair via POST /auth/token/pair/otp along with the TOTP code.
 * Users registered via Google SSO must use POST /auth/google/login instead.
 */
export const authObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainToken88Ed2E9eData, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthObtainToken88Ed2E9eResponses, unknown, ThrowOnError>({
		url: '/api/auth/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Refresh Token
 */
export const tokenRefresh = <ThrowOnError extends boolean = false>(
	options: Options<TokenRefreshData, ThrowOnError>
) => {
	return (options.client ?? client).post<TokenRefreshResponses, unknown, ThrowOnError>({
		url: '/api/auth/refresh',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Demo Obtain Token
 *
 * Create and authenticate a demo user account (demo mode only).
 *
 * Automatically creates a user account with the provided credentials if it doesn't exist,
 * then returns JWT tokens. Only available when DEMO_MODE is enabled in settings.
 * Email must end with @example.com.
 */
export const authDemoObtainToken = <ThrowOnError extends boolean = false>(
	options: Options<AuthDemoObtainToken88063011Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthDemoObtainToken88063011Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/demo/token/pair',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Obtain Token With Otp
 *
 * Complete 2FA authentication by exchanging temporary token and TOTP code for JWT tokens.
 *
 * Call this after POST /auth/token/pair returns a temporary token for a 2FA-enabled user.
 * Validates the TOTP code from the user's authenticator app and returns a standard JWT token
 * pair on success. Returns 401 if the TOTP code is invalid.
 */
export const authObtainTokenWithOtp = <ThrowOnError extends boolean = false>(
	options: Options<AuthObtainTokenWithOtpFbeaece9Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AuthObtainTokenWithOtpFbeaece9Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/auth/token/pair/otp',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Google Login
 *
 * Authenticate or register via Google SSO using a Google ID token.
 *
 * Verifies the Google ID token, creates a new user if needed, and returns JWT tokens.
 * For existing Google SSO users, this is the only valid login method - they cannot
 * use password-based authentication.
 */
export const authGoogleLogin = <ThrowOnError extends boolean = false>(
	options: Options<AuthGoogleLogin236F3339Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AuthGoogleLogin236F3339Responses, unknown, ThrowOnError>({
		url: '/api/auth/google/login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Setup Otp
 *
 * Get the TOTP provisioning URI to configure an authenticator app.
 *
 * Returns a URI (often as QR code) to scan with authenticator apps like Google Authenticator
 * or Authy. Returns 400 if 2FA is already enabled. After scanning, verify the setup with
 * POST /otp/verify to activate 2FA.
 */
export const otpSetupOtp = <ThrowOnError extends boolean = false>(
	options?: Options<OtpSetupOtp6Dc1Fd42Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<OtpSetupOtp6Dc1Fd42Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/setup',
		...options
	});
};

/**
 * Enable Otp
 *
 * Activate 2FA by verifying the TOTP code from the authenticator app.
 *
 * Call this after GET /otp/setup with a code from your authenticator app to confirm
 * it's configured correctly. On success, activates 2FA for the account. Future logins
 * will require the TOTP code via POST /auth/token/pair/otp. Returns 403 if code is invalid.
 */
export const otpEnableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpEnableOtpEe2F44F6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpEnableOtpEe2F44F6Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Disable Otp
 *
 * Deactivate 2FA after verifying the current TOTP code.
 *
 * Requires the current TOTP code to prevent unauthorized disabling. After disabling,
 * login will only require email and password via POST /auth/token/pair. Returns 403
 * if the TOTP code is invalid.
 */
export const otpDisableOtp = <ThrowOnError extends boolean = false>(
	options: Options<OtpDisableOtpFbd639E1Data, ThrowOnError>
) => {
	return (options.client ?? client).post<OtpDisableOtpFbd639E1Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/otp/disable',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Export Data
 *
 * Request a GDPR-compliant export of all personal data.
 *
 * Initiates an asynchronous export of all user data including profile, events, tickets,
 * and submissions. The export will be emailed to the user when ready. Rate-limited to
 * prevent abuse.
 */
export const accountExportData = <ThrowOnError extends boolean = false>(
	options?: Options<AccountExportData72410158Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountExportData72410158Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/export-data',
		...options
	});
};

/**
 * Me
 *
 * Retrieve the authenticated user's profile information.
 *
 * Returns complete user profile including email, name, location preferences, and 2FA status.
 * Use this to display user info in the UI or verify authentication status.
 */
export const accountMe = <ThrowOnError extends boolean = false>(
	options?: Options<AccountMeC03A3462Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<AccountMeC03A3462Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options
	});
};

/**
 * Update Profile
 *
 * Update the authenticated user's profile information.
 *
 * Allows updating name, location preferences, and other profile fields. Only provided
 * fields are updated. Returns the updated user profile.
 */
export const accountUpdateProfile = <ThrowOnError extends boolean = false>(
	options: Options<AccountUpdateProfile668A42C3Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		AccountUpdateProfile668A42C3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/me',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Register
 *
 * Create a new user account with email and password.
 *
 * Creates a new account and sends a verification email. The account is created but not
 * fully active until email is verified via POST /account/verify. If an unverified account
 * with the same email exists, resends the verification email. Returns 400 if a verified
 * account already exists.
 */
export const accountRegister = <ThrowOnError extends boolean = false>(
	options: Options<AccountRegister1202Fd12Data, ThrowOnError>
) => {
	return (options.client ?? client).post<AccountRegister1202Fd12Responses, unknown, ThrowOnError>({
		url: '/api/account/register',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Verify Email
 *
 * Verify email address using the token from the verification email.
 *
 * Call this with the token received via email after registration. On success, activates
 * the account and returns the verified user profile along with JWT tokens for immediate login.
 * The verification token is single-use and expires after a set period.
 */
export const accountVerifyEmail = <ThrowOnError extends boolean = false>(
	options: Options<AccountVerifyEmail3Ecbc3AeData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountVerifyEmail3Ecbc3AeResponses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/verify',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Resend Verification Email
 *
 * Resend the email verification link to the authenticated user.
 *
 * Use this if the original verification email was lost or expired. Returns 400 if the
 * email is already verified. Requires authentication with the unverified account's JWT.
 */
export const accountResendVerificationEmail = <ThrowOnError extends boolean = false>(
	options?: Options<AccountResendVerificationEmailF2B745F7Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountResendVerificationEmailF2B745F7Responses,
		AccountResendVerificationEmailF2B745F7Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/verify-resend',
		...options
	});
};

/**
 * Delete Account Request
 *
 * Initiate GDPR-compliant account deletion by sending confirmation email.
 *
 * Sends an email with a deletion confirmation link. The account is not deleted until
 * the user confirms via POST /account/delete-confirm with the token from the email.
 * This two-step process prevents accidental deletions.
 */
export const accountDeleteAccountRequest = <ThrowOnError extends boolean = false>(
	options?: Options<AccountDeleteAccountRequestBbfca3DbData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AccountDeleteAccountRequestBbfca3DbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/account/delete-request',
		...options
	});
};

/**
 * Delete Account Confirm
 *
 * Permanently delete the account using the confirmation token from email.
 *
 * Call this with the token received via email after POST /account/delete-request.
 * This action is irreversible and deletes all user data. The deletion token is
 * single-use and expires after a set period.
 */
export const accountDeleteAccountConfirm = <ThrowOnError extends boolean = false>(
	options: Options<AccountDeleteAccountConfirm932Fddf4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountDeleteAccountConfirm932Fddf4Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/delete-confirm',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password Request
 *
 * Request a password reset by email.
 *
 * Sends a password reset link to the provided email if an account exists. Always returns
 * a success message to prevent user enumeration attacks. Google SSO users cannot use this
 * endpoint. After receiving the email, use POST /account/password/reset with the token.
 */
export const accountResetPasswordRequest = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordRequest6C35B041Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordRequest6C35B041Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset-request',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Reset Password
 *
 * Reset password using the token from the password reset email.
 *
 * Call this with the token received via email after POST /account/password/reset-request.
 * The new password must meet security requirements. The reset token is single-use and
 * expires after a set period. After reset, the user must login again with the new password.
 */
export const accountResetPassword = <ThrowOnError extends boolean = false>(
	options: Options<AccountResetPasswordA5Dd0182Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		AccountResetPasswordA5Dd0182Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/account/password/reset',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Dashboard Organizations
 *
 * View organizations for your dashboard filtered by your relationship to them.
 *
 * Filter by: organizations you own, are staff of, are a member of, or have pending requests to.
 * Shows only organizations you have permission to view. Use this to display "My Organizations"
 * sections in the UI.
 */
export const dashboardDashboardOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardOrganizationsDc29417eData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardOrganizationsDc29417eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/organizations',
		...options
	});
};

/**
 * Dashboard Events
 *
 * View upcoming events for your dashboard filtered by your relationship to them.
 *
 * Filter by: events you're organizing, attending (RSVP'd or have tickets), invited to, or have
 * requested invitations to. Only shows future events you have permission to view. Use this to
 * display "My Events" sections in the UI.
 */
export const dashboardDashboardEvents = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEvents5Fe1Ef87Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEvents5Fe1Ef87Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/events',
		...options
	});
};

/**
 * Dashboard Event Series
 *
 * View event series for your dashboard filtered by your relationship to them.
 *
 * Filter by: series you're organizing or series you're attending events in. Shows only
 * series you have permission to view. Use this to display "My Series" sections in the UI.
 */
export const dashboardDashboardEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardEventSeriesB82A9A39Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardEventSeriesB82A9A39Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/event_series',
		...options
	});
};

/**
 * Dashboard Invitations
 *
 * View your pending event invitations.
 *
 * Returns invitations you've received but not yet acted on, sorted by event date (soonest first).
 * Use this to display a "Pending Invitations" section prompting users to RSVP or purchase tickets.
 */
export const dashboardDashboardInvitations = <ThrowOnError extends boolean = false>(
	options?: Options<DashboardDashboardInvitations21454Ea3Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		DashboardDashboardInvitations21454Ea3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/dashboard/invitations',
		...options
	});
};

/**
 * List Organizations
 *
 * Browse and search organizations visible to the current user.
 *
 * Results are filtered by visibility settings and user memberships. By default orders by
 * 'distance' (nearest first based on user location). Can also sort alphabetically by 'name'
 * or reverse with '-name'. Supports text search and filtering.
 */
export const organizationListOrganizations = <ThrowOnError extends boolean = false>(
	options?: Options<OrganizationListOrganizationsF55Af24dData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		OrganizationListOrganizationsF55Af24dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/',
		...options
	});
};

/**
 * Get Organization
 *
 * Retrieve organization details using its unique slug.
 *
 * Returns full organization information including description, location, member count, and
 * settings. Use this to display the organization profile page.
 */
export const organizationGetOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationGetOrganization0C15999cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationGetOrganization0C15999cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this organization and marked for display on organization page.
 *
 * Returns documents, links, or media files provided by organization admins. Resources may
 * be public or restricted to members only. Supports filtering by type and text search.
 */
export const organizationListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationListResources5Fba5A4eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationListResources5Fba5A4eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/resources',
		...options
	});
};

/**
 * Create Membership Request
 *
 * Submit a request to become a member of this organization.
 *
 * Creates a membership request that organization admins can approve or reject. Being a
 * member may be required to access certain members-only events. Returns the created
 * request for tracking status.
 */
export const organizationCreateMembershipRequest = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationCreateMembershipRequestB44F63B2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationCreateMembershipRequestB44F63B2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/{slug}/membership-requests',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an organization membership invitation using a token from invitation link.
 *
 * Creates an OrganizationMember record, granting you member status. Members may have
 * access to members-only events and resources. Returns the organization on success,
 * or 400 if the token is invalid/expired.
 */
export const organizationClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationClaimInvitationAf0F7792Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationClaimInvitationAf0F7792Responses,
		OrganizationClaimInvitationAf0F7792Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organizations/claim-invitation/{token}',
		...options
	});
};

/**
 * Update Organization
 *
 * Update organization by slug.
 */
export const organizationadminUpdateOrganization = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateOrganization8Fa516C5Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganization8Fa516C5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Stripe Connect
 *
 * Get a link to onboard the organization to Stripe.
 */
export const organizationadminStripeConnect = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeConnect94583CddData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeConnect94583CddResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/connect',
		...options
	});
};

/**
 * Stripe Account Verify
 *
 * Get the organization's Stripe account status.
 */
export const organizationadminStripeAccountVerify = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminStripeAccountVerify5F8B8939Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminStripeAccountVerify5F8B8939Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/stripe/account/verify',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to organization.
 */
export const organizationadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadLogoBa52546fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadLogoBa52546fResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to organization.
 */
export const organizationadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUploadCoverArt0D3D28FeData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminUploadCoverArt0D3D28FeResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from organization.
 */
export const organizationadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteLogo1B9F1732Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteLogo1B9F1732Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from organization.
 */
export const organizationadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteCoverArt233E7Ea5Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteCoverArt233E7Ea5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/delete-cover-art',
		...options
	});
};

/**
 * Create Event Series
 *
 * Create a new event series.
 */
export const organizationadminCreateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEventSeries370Cde92Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEventSeries370Cde92Responses,
		OrganizationadminCreateEventSeries370Cde92Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event-series',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Event
 *
 * Create a new event.
 */
export const organizationadminCreateEvent = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateEvent34Bb3767Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateEvent34Bb3767Responses,
		OrganizationadminCreateEvent34Bb3767Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/create-event',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Organization Tokens
 *
 * List all tokens for an organization that the user has admin rights for.
 */
export const organizationadminListOrganizationTokens = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListOrganizationTokens6B8Dff04Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListOrganizationTokens6B8Dff04Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tokens',
		...options
	});
};

/**
 * Create Organization Token
 *
 * Create a new token for an organization.
 */
export const organizationadminCreateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminCreateOrganizationToken12Ccf793Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateOrganizationToken12Ccf793Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Organization Token
 *
 * Delete an organization token.
 */
export const organizationadminDeleteOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminDeleteOrganizationToken5E8794C1Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteOrganizationToken5E8794C1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options
	});
};

/**
 * Update Organization Token
 *
 * Update an organization token.
 */
export const organizationadminUpdateOrganizationToken = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateOrganizationToken26D7Bd12Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateOrganizationToken26D7Bd12Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Membership Requests
 *
 * List all membership requests for an organization.
 */
export const organizationadminListMembershipRequests = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminListMembershipRequests2243567eData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembershipRequests2243567eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests',
		...options
	});
};

/**
 * Approve Membership Request
 *
 * Approve a membership request.
 */
export const organizationadminApproveMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminApproveMembershipRequestFe4098C5Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminApproveMembershipRequestFe4098C5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/approve',
		...options
	});
};

/**
 * Reject Membership Request
 *
 * Reject a membership request.
 */
export const organizationadminRejectMembershipRequest = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminRejectMembershipRequestF35B5140Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRejectMembershipRequestF35B5140Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/membership-requests/{request_id}/reject',
		...options
	});
};

/**
 * List Resources
 *
 * List all resources for a specific organization.
 */
export const organizationadminListResources = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListResources09C4014cData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListResources09C4014cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options
	});
};

/**
 * Create Resource
 *
 * Create a new resource for the organization.
 */
export const organizationadminCreateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminCreateResource886B8B6bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminCreateResource886B8B6bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Resource
 *
 * Delete a resource from the organization.
 */
export const organizationadminDeleteResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminDeleteResourceEdc38488Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminDeleteResourceEdc38488Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Get Resource
 *
 * Retrieve a specific resource for the organization.
 */
export const organizationadminGetResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminGetResource0B578FedData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminGetResource0B578FedResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options
	});
};

/**
 * Update Resource
 *
 * Update a resource for the organization.
 */
export const organizationadminUpdateResource = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminUpdateResourceD287Ea6bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateResourceD287Ea6bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/resources/{resource_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Members
 *
 * List all members of an organization.
 */
export const organizationadminListMembers = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListMembers7B1E70C1Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListMembers7B1E70C1Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members',
		...options
	});
};

/**
 * Remove Member
 *
 * Remove a member from an organization.
 */
export const organizationadminRemoveMember = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveMemberCd6F873dData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveMemberCd6F873dResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/members/{user_id}',
		...options
	});
};

/**
 * List Staff
 *
 * List all staff of an organization.
 */
export const organizationadminListStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminListStaff61169368Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		OrganizationadminListStaff61169368Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff',
		...options
	});
};

/**
 * Remove Staff
 *
 * Remove a staff member from an organization.
 */
export const organizationadminRemoveStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveStaffC2C202D6Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminRemoveStaffC2C202D6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options
	});
};

/**
 * Add Staff
 *
 * Add a staff member to an organization.
 */
export const organizationadminAddStaff = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddStaff7A792649Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddStaff7A792649Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Staff Permissions
 *
 * Update a staff member's permissions.
 */
export const organizationadminUpdateStaffPermissions = <
	ThrowOnError extends boolean = false
>(
	options: Options<OrganizationadminUpdateStaffPermissionsDc54C58aData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		OrganizationadminUpdateStaffPermissionsDc54C58aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/staff/{user_id}/permissions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Clear Tags
 *
 * Clear akk tags from the organization.
 */
export const organizationadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminClearTags151A779eData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		OrganizationadminClearTags151A779eResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const organizationadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminAddTagsF1A6E2B8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminAddTagsF1A6E2B8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const organizationadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<OrganizationadminRemoveTags1A3F0D85Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		OrganizationadminRemoveTags1A3F0D85Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/organization-admin/{slug}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Events
 *
 * Browse and search events visible to the current user.
 *
 * Results are filtered by visibility rules (public/private), event status, and user permissions.
 * By default shows only upcoming events; set include_past=true to see past events.
 * Ordering: 'distance' (default) shows nearest events based on user location, 'start' shows
 * soonest first, '-start' shows latest first. Supports filtering by organization, series,
 * tags, and text search.
 */
export const eventListEvents = <ThrowOnError extends boolean = false>(
	options?: Options<EventListEventsEa2Cdd26Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<EventListEventsEa2Cdd26Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/',
		...options
	});
};

/**
 * Claim Invitation
 *
 * Accept an event invitation using a token from an invitation link or email.
 *
 * Creates an EventInvitation record for the user, granting access to the event.
 * Invitations can bypass certain eligibility requirements like membership, capacity limits,
 * and RSVP deadlines. Returns the event on success, or 400 if the token is invalid/expired.
 */
export const eventClaimInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventClaimInvitation57Ce6780Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventClaimInvitation57Ce6780Responses,
		EventClaimInvitation57Ce6780Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/claim-invitation/{token}',
		...options
	});
};

/**
 * Get Event Attendees
 *
 * Get the list of confirmed attendees for this event.
 *
 * Returns users who have RSVPed 'yes' or have active tickets. Visibility is controlled by
 * event settings - attendee lists may be hidden from regular attendees. Organization staff
 * and event creators always have access.
 */
export const eventGetEventAttendees = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventAttendees85A87EcfData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventAttendees85A87EcfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/attendee-list',
		...options
	});
};

/**
 * Get My Event Status
 *
 * Check the authenticated user's current status and eligibility for an event.
 *
 * Returns either the user's RSVP/ticket status if they've already joined, or an eligibility
 * check result explaining what steps are needed to attend. The eligibility check validates:
 * event status, RSVP deadline, invitations, organization membership, required questionnaires,
 * capacity limits, and ticket availability. Use this to determine which action to show users
 * (RSVP button, buy ticket, fill questionnaire, etc.).
 */
export const eventGetMyEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventGetMyEventStatus60C8F2A8Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetMyEventStatus60C8F2A8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/my-status',
		...options
	});
};

/**
 * Request Invitation
 *
 * Submit a request to be invited to a private or invite-only event.
 *
 * Creates an invitation request that event organizers can approve or reject. Include an
 * optional message explaining why you want to attend. Returns 400 if you've already
 * submitted a request for this event. Check GET /{event_id}/my-status to see if you
 * need an invitation.
 */
export const eventRequestInvitation = <ThrowOnError extends boolean = false>(
	options: Options<EventRequestInvitation21B61345Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRequestInvitation21B61345Responses,
		EventRequestInvitation21B61345Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/request-invitation',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Resources
 *
 * Get supplementary resources attached to this event.
 *
 * Returns resources like documents, links, or media files provided by event organizers.
 * Resources may be public or restricted to attendees only. Supports filtering by type
 * (file, link, etc.) and text search.
 */
export const eventListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventListResourcesE350B61fData, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListResourcesE350B61fResponses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/events/{event_id}/resources',
			...options
		}
	);
};

/**
 * Delete Invitation Request
 *
 * Cancel a pending invitation request.
 *
 * Withdraws your invitation request for an event. Only works for your own requests
 * that haven't been decided yet. Returns 404 if the request doesn't exist or doesn't
 * belong to you.
 */
export const eventDeleteInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventDeleteInvitationRequest8B93D7FbData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventDeleteInvitationRequest8B93D7FbResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/invitation-request/{request_id}',
		...options
	});
};

/**
 * List User Invitation Requests
 *
 * View your invitation requests across all events.
 *
 * Returns your invitation requests with their current status (pending/approved/rejected).
 * Filter by event_id to see requests for a specific event, or by status to see approved/
 * rejected requests. Use this to track which events you've requested access to.
 */
export const eventListUserInvitationRequests = <ThrowOnError extends boolean = false>(
	options?: Options<EventListUserInvitationRequests94A7F154Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventListUserInvitationRequests94A7F154Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/me/pending_invitation_requests',
		...options
	});
};

/**
 * Get Event By Slugs
 *
 * Retrieve event details using human-readable organization and event slugs.
 *
 * Use this for clean URLs like /events/tech-meetup/monthly-session. Returns 404 if
 * the event doesn't exist or you don't have permission to view it.
 */
export const eventGetEventBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEventBySlugsD1F8Cd68Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetEventBySlugsD1F8Cd68Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{org_slug}/{event_slug}',
		...options
	});
};

/**
 * Get Event
 *
 * Retrieve full event details by ID.
 *
 * Returns comprehensive event information including description, location, times, organization,
 * ticket tiers, and visibility settings. Use this to display the event detail page.
 */
export const eventGetEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventGetEvent52Cb96A6Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventGetEvent52Cb96A6Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}',
		...options
	});
};

/**
 * Rsvp Event
 *
 * RSVP to a non-ticketed event (answer: 'yes', 'no', or 'maybe').
 *
 * Only works for events where requires_ticket=false. Runs full eligibility check including
 * event status, RSVP deadline, invitations, membership requirements, required questionnaires,
 * and capacity limits. Returns RSVP record on success. On failure, returns eligibility details
 * explaining what's blocking you and what next_step to take (e.g., complete questionnaire,
 * request invitation).
 */
export const eventRsvpEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventRsvpEvent39Db14AaData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventRsvpEvent39Db14AaResponses,
		EventRsvpEvent39Db14AaErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/rsvp/{answer}',
		...options
	});
};

/**
 * List Tiers
 *
 * Get all ticket tiers available for purchase at this event.
 *
 * Returns ticket types with pricing, availability, and sales windows. Filters tiers based
 * on user eligibility - you'll only see tiers you're allowed to purchase. Check visibility
 * settings and sales_start_at/sales_end_at to determine which are currently on sale.
 */
export const eventListTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventListTiers45E629C7Data, ThrowOnError>
) => {
	return (options.client ?? client).get<EventListTiers45E629C7Responses, unknown, ThrowOnError>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/tiers',
		...options
	});
};

/**
 * Ticket Checkout
 *
 * Purchase a fixed-price event ticket.
 *
 * Runs eligibility checks before allowing purchase. For online payment: returns Stripe
 * checkout URL to redirect user for payment. For free/offline/at-the-door tickets: creates
 * ticket immediately and returns it. Cannot be used for pay-what-you-can (PWYC) tiers -
 * use POST /{event_id}/tickets/{tier_id}/checkout/pwyc instead. On eligibility failure,
 * returns 400 with eligibility details explaining what's blocking you and what next_step
 * to take (e.g., complete questionnaire, request invitation, wait for tickets to go on sale).
 */
export const eventTicketCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketCheckoutEb2E95A2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketCheckoutEb2E95A2Responses,
		EventTicketCheckoutEb2E95A2Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout',
		...options
	});
};

/**
 * Ticket Pwyc Checkout
 *
 * Purchase a pay-what-you-can (PWYC) ticket with a user-specified amount.
 *
 * Only works for ticket tiers with price_type=PWYC. Validates the amount is within the
 * tier's min/max bounds. Returns Stripe checkout URL for online payment, or creates ticket
 * immediately for free/offline payment methods. Returns 400 for non-PWYC tiers, if amount
 * is out of bounds, or on eligibility failure (with eligibility details explaining what's
 * blocking you and what next_step to take).
 */
export const eventTicketPwycCheckout = <ThrowOnError extends boolean = false>(
	options: Options<EventTicketPwycCheckoutB71A13BcData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventTicketPwycCheckoutB71A13BcResponses,
		EventTicketPwycCheckoutB71A13BcErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/tickets/{tier_id}/checkout/pwyc',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Questionnaire
 *
 * Retrieve a questionnaire required for event admission.
 *
 * Returns the questionnaire structure with all sections and questions. Questions may be
 * shuffled based on questionnaire settings. Use this to display the form that users must
 * complete before accessing the event.
 */
export const eventGetQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventGetQuestionnaireEc0B9CbaData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventGetQuestionnaireEc0B9CbaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}',
		...options
	});
};

/**
 * Submit Questionnaire
 *
 * Submit answers to an event admission questionnaire.
 *
 * Validates all required questions are answered. If submission status is 'ready', triggers
 * automatic evaluation (may use LLM for free-text answers). Depending on the questionnaire's
 * evaluation_mode (automatic/manual/hybrid), results may be immediate or pending staff review.
 * Passing the questionnaire may be required before you can RSVP or purchase tickets.
 */
export const eventSubmitQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<EventSubmitQuestionnaireA79B6AedData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventSubmitQuestionnaireA79B6AedResponses,
		EventSubmitQuestionnaireA79B6AedErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/questionnaire/{questionnaire_id}/submit',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Event Token
 *
 * Delete an event token.
 */
export const eventadminDeleteEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteEventToken76Df8B22Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteEventToken76Df8B22Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options
	});
};

/**
 * Update Event Token
 *
 * Update an event token.
 */
export const eventadminUpdateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventToken4E026BbaData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventToken4E026BbaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token/{token_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Event Tokens
 *
 * List all event tokens.
 */
export const eventadminListEventTokens = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventTokens0B778889Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventTokens0B778889Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tokens',
		...options
	});
};

/**
 * Create Event Token
 *
 * Create a new event token.
 */
export const eventadminCreateEventToken = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateEventToken0A7723D4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateEventToken0A7723D4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/token',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Decide Invitation Request
 *
 * Request an invitation to an event.
 */
export const eventadminDecideInvitationRequest = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDecideInvitationRequest31F5Def6Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminDecideInvitationRequest31F5Def6Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation-request/{request_id}/{decision}',
		...options
	});
};

/**
 * List Event Invitation Requests
 *
 * List all pending invitation requests for the current user.
 */
export const eventadminListEventInvitationRequests = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListEventInvitationRequestsE8668Db5Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListEventInvitationRequestsE8668Db5Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitation_requests',
		...options
	});
};

/**
 * Update Event
 *
 * Update event by ID.
 */
export const eventadminUpdateEvent = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventC76E56C4Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateEventC76E56C4Responses,
		EventadminUpdateEventC76E56C4Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Event Status
 *
 * Update event status to the specified value.
 */
export const eventadminUpdateEventStatus = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateEventStatus9F7A2771Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUpdateEventStatus9F7A2771Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/actions/update-status/{status}',
		...options
	});
};

/**
 * Upload Logo
 *
 * Upload logo to event.
 */
export const eventadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadLogo4032F42dData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadLogo4032F42dResponses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art to event.
 */
export const eventadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUploadCoverArt4645Aff2Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminUploadCoverArt4645Aff2Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event.
 */
export const eventadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteLogoC8394081Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteLogoC8394081Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event.
 */
export const eventadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteCoverArt9A000Bb8Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteCoverArt9A000Bb8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminClearTagsB1B9B1F8Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminClearTagsB1B9B1F8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add one or more tags to the organization.
 */
export const eventadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminAddTags3D112A61Data, ThrowOnError>
) => {
	return (options.client ?? client).post<EventadminAddTags3D112A61Responses, unknown, ThrowOnError>(
		{
			security: [
				{
					scheme: 'bearer',
					type: 'http'
				}
			],
			url: '/api/event-admin/{event_id}/tags',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options.headers
			}
		}
	);
};

/**
 * Remove Tags
 *
 * Remove one or more tags from the organization.
 */
export const eventadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventadminRemoveTags067Beb24Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminRemoveTags067Beb24Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Ticket Tiers
 *
 * List all ticket tiers for an event.
 */
export const eventadminListTicketTiers = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListTicketTiersF22A78FfData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListTicketTiersF22A78FfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tiers',
		...options
	});
};

/**
 * Create Ticket Tier
 *
 * Create a new ticket tier for an event.
 */
export const eventadminCreateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateTicketTierE35Baf6cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateTicketTierE35Baf6cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Ticket Tier
 *
 * Delete a ticket tier.
 *
 * Note this might raise a 400 if ticket with this tier where already bought.
 */
export const eventadminDeleteTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteTicketTier783A7CacData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteTicketTier783A7CacResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options
	});
};

/**
 * Update Ticket Tier
 *
 * Update a ticket tier.
 */
export const eventadminUpdateTicketTier = <ThrowOnError extends boolean = false>(
	options: Options<EventadminUpdateTicketTier89Acd336Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventadminUpdateTicketTier89Acd336Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/ticket-tier/{tier_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Tickets
 *
 * List all pending tickets for offline and at-the-door payment methods.
 */
export const eventadminListPendingTickets = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingTickets6E230FadData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingTickets6E230FadResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-tickets',
		...options
	});
};

/**
 * Confirm Ticket Payment
 *
 * Confirm payment for a pending offline ticket and activate it.
 */
export const eventadminConfirmTicketPayment = <ThrowOnError extends boolean = false>(
	options: Options<EventadminConfirmTicketPaymentBff639AfData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminConfirmTicketPaymentBff639AfResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/tickets/{ticket_id}/confirm-payment',
		...options
	});
};

/**
 * Check In Ticket
 *
 * Check in an attendee by scanning their ticket.
 */
export const eventadminCheckInTicket = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCheckInTicket249Df1DeData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCheckInTicket249Df1DeResponses,
		EventadminCheckInTicket249Df1DeErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/check-in',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Invitations
 *
 * List all invitations for registered users.
 */
export const eventadminListInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListInvitations7782F2A0Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListInvitations7782F2A0Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options
	});
};

/**
 * Create Invitations
 *
 * Create direct invitations for users by email addresses.
 */
export const eventadminCreateInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminCreateInvitations98A90F9bData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventadminCreateInvitations98A90F9bResponses,
		EventadminCreateInvitations98A90F9bErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Pending Invitations
 *
 * List all pending invitations for unregistered users.
 */
export const eventadminListPendingInvitations = <ThrowOnError extends boolean = false>(
	options: Options<EventadminListPendingInvitations671C5E67Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventadminListPendingInvitations671C5E67Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/pending-invitations',
		...options
	});
};

/**
 * Delete Invitation Endpoint
 *
 * Delete an invitation (registered or pending).
 */
export const eventadminDeleteInvitationEndpoint = <ThrowOnError extends boolean = false>(
	options: Options<EventadminDeleteInvitationEndpointE5A439AcData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventadminDeleteInvitationEndpointE5A439AcResponses,
		EventadminDeleteInvitationEndpointE5A439AcErrors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-admin/{event_id}/invitations/{invitation_type}/{invitation_id}',
		...options
	});
};

/**
 * My Permissions
 *
 * Get a user's permission map, per organization.
 */
export const permissionMyPermissions = <ThrowOnError extends boolean = false>(
	options?: Options<PermissionMyPermissions3063E764Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		PermissionMyPermissions3063E764Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/permissions/my-permissions',
		...options
	});
};

/**
 * List Event Series
 *
 * Browse event series (recurring event collections) visible to the current user.
 *
 * Event series group related recurring events (e.g., "Monthly Tech Meetup"). Results are
 * filtered by visibility and permissions. Supports filtering by organization and text search.
 */
export const eventseriesListEventSeries = <ThrowOnError extends boolean = false>(
	options?: Options<EventseriesListEventSeriesB1312244Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		EventseriesListEventSeriesB1312244Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/',
		...options
	});
};

/**
 * Get Event Series By Slugs
 *
 * Retrieve event series details using human-readable organization and series slugs.
 *
 * Use this for clean URLs like /event-series/tech-meetup/monthly-sessions. Returns 404
 * if the series doesn't exist or you don't have permission to view it.
 */
export const eventseriesGetEventSeriesBySlugs = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesBySlugsB41402E7Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesBySlugsB41402E7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{org_slug}/{series_slug}',
		...options
	});
};

/**
 * Get Event Series
 *
 * Retrieve full event series details by ID.
 *
 * Returns series information including description, organization, and settings. Use this
 * to display the series profile page and list related events.
 */
export const eventseriesGetEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesGetEventSeriesA0296AdeData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesGetEventSeriesA0296AdeResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}',
		...options
	});
};

/**
 * List Resources
 *
 * Get resources attached to this event series.
 *
 * Returns documents, links, or media files that apply to all events in the series.
 * Resources may be public or restricted based on visibility settings. Supports filtering
 * by type and text search.
 */
export const eventseriesListResources = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesListResources01160A1bData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		EventseriesListResources01160A1bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series/{series_id}/resources',
		...options
	});
};

/**
 * Delete Event Series
 *
 * Permanently delete an event series (admin only).
 *
 * Removes the series. Events in the series are not deleted but become standalone.
 * Requires 'delete_event_series' permission (typically organization owners only).
 */
export const eventseriesadminDeleteEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteEventSeries1431Bd51Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteEventSeries1431Bd51Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options
	});
};

/**
 * Update Event Series
 *
 * Update event series details (admin only).
 *
 * Modify series name, description, or settings. Requires 'edit_event_series' permission
 * (organization staff/owners). Changes apply to the series but not individual events.
 */
export const eventseriesadminUpdateEventSeries = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUpdateEventSeries18F45D43Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		EventseriesadminUpdateEventSeries18F45D43Responses,
		EventseriesadminUpdateEventSeries18F45D43Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Upload Logo
 *
 * Upload a logo image for the event series (admin only).
 *
 * Replaces the existing logo. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadLogo5D9Cf647Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadLogo5D9Cf647Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-logo',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Upload Cover Art
 *
 * Upload cover art/banner image for the event series (admin only).
 *
 * Replaces the existing cover art. File is scanned for malware before saving. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminUploadCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminUploadCoverArtF194C004Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminUploadCoverArtF194C004Responses,
		unknown,
		ThrowOnError
	>({
		...formDataBodySerializer,
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/upload-cover-art',
		...options,
		headers: {
			'Content-Type': null,
			...options.headers
		}
	});
};

/**
 * Delete Logo
 *
 * Delete logo from event series (admin only).
 *
 * Removes the logo image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteLogo = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteLogoFbfbfa67Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteLogoFbfbfa67Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-logo',
		...options
	});
};

/**
 * Delete Cover Art
 *
 * Delete cover art from event series (admin only).
 *
 * Removes the cover art image. Requires 'edit_event_series' permission.
 */
export const eventseriesadminDeleteCoverArt = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminDeleteCoverArtFa9Daba7Data, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminDeleteCoverArtFa9Daba7Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/delete-cover-art',
		...options
	});
};

/**
 * Clear Tags
 *
 * Remove all tags from the event series (admin only).
 *
 * Clears all categorization tags. Requires 'edit_event_series' permission.
 */
export const eventseriesadminClearTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminClearTags08B0E3DaData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		EventseriesadminClearTags08B0E3DaResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options
	});
};

/**
 * Add Tags
 *
 * Add tags to categorize the event series (admin only).
 *
 * Tags help users discover series through filtering and search. Returns the updated tag list.
 * Requires 'edit_event_series' permission.
 */
export const eventseriesadminAddTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminAddTags71F15752Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminAddTags71F15752Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Remove Tags
 *
 * Remove specific tags from the event series (admin only).
 *
 * Removes only the specified tags, keeping others. Returns the updated tag list. Requires
 * 'edit_event_series' permission.
 */
export const eventseriesadminRemoveTags = <ThrowOnError extends boolean = false>(
	options: Options<EventseriesadminRemoveTags44D1Aca4Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		EventseriesadminRemoveTags44D1Aca4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/event-series-admin/{series_id}/tags/remove',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Potluck Items
 *
 * View all potluck items for this event.
 *
 * Returns items users can bring, with flags indicating if each item is assigned and if you
 * own it. Available when event.potluck_open=true. Use this to display what's needed and
 * what you've claimed.
 */
export const potluckListPotluckItems = <ThrowOnError extends boolean = false>(
	options: Options<PotluckListPotluckItems9A619D11Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		PotluckListPotluckItems9A619D11Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options
	});
};

/**
 * Create Potluck Item
 *
 * Add a new item to the event's potluck list.
 *
 * Specify item name, quantity, and optional notes. Attendees can claim items via
 * POST /{event_id}/potluck/{item_id}/claim. Requires permission to create potluck items.
 */
export const potluckCreatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckCreatePotluckItemDbfc56B8Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckCreatePotluckItemDbfc56B8Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Potluck Item
 *
 * Remove a potluck item from the event.
 *
 * Deletes the item even if it's been claimed. Requires permission to manage potluck items.
 */
export const potluckDeletePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckDeletePotluckItem8356C3DdData, ThrowOnError>
) => {
	return (options.client ?? client).delete<
		PotluckDeletePotluckItem8356C3DdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options
	});
};

/**
 * Update Potluck Item
 *
 * Update a potluck item's details.
 *
 * Modify item name, quantity, or notes. Requires permission to manage potluck items
 * (typically event organizers).
 */
export const potluckUpdatePotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUpdatePotluckItem91D4634fData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		PotluckUpdatePotluckItem91D4634fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Claim Potluck Item
 *
 * Claim a potluck item to bring to the event.
 *
 * Assigns the item to you. Returns 400 if already claimed by someone else. Use this when
 * you want to commit to bringing a specific item.
 */
export const potluckClaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckClaimPotluckItem3705Ca2fData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckClaimPotluckItem3705Ca2fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/claim',
		...options
	});
};

/**
 * Unclaim Potluck Item
 *
 * Release a potluck item you previously claimed.
 *
 * Makes the item available for others to claim. Returns 404 if the item isn't claimed
 * by you.
 */
export const potluckUnclaimPotluckItem = <ThrowOnError extends boolean = false>(
	options: Options<PotluckUnclaimPotluckItemB315A98cData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		PotluckUnclaimPotluckItemB315A98cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/events/{event_id}/potluck/{item_id}/unclaim',
		...options
	});
};

/**
 * List Org Questionnaires
 *
 * Browse questionnaires you have permission to view or manage.
 *
 * Returns questionnaires from organizations where you have staff/owner access. Use this to
 * find questionnaires to attach to events or review submissions.
 */
export const questionnaireListOrgQuestionnaires = <ThrowOnError extends boolean = false>(
	options?: Options<QuestionnaireListOrgQuestionnaires8Dccc8C4Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		QuestionnaireListOrgQuestionnaires8Dccc8C4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/',
		...options
	});
};

/**
 * Create Org Questionnaire
 *
 * Create a new admission questionnaire for an organization (admin only).
 *
 * Sets up an empty questionnaire structure. After creation, add sections and questions via
 * POST /questionnaires/{id}/sections and /multiple-choice-questions endpoints. Requires
 * 'create_questionnaire' permission (organization staff/owners).
 */
export const questionnaireCreateOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateOrgQuestionnaire72673964Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateOrgQuestionnaire72673964Responses,
		QuestionnaireCreateOrgQuestionnaire72673964Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{organization_id}/create-questionnaire',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Org Questionnaire
 *
 * Retrieve a questionnaire's details and structure (admin only).
 *
 * Returns the questionnaire with all sections, questions, and settings. Use this to view or
 * edit an existing questionnaire. Requires permission to manage the organization's questionnaires.
 */
export const questionnaireGetOrgQuestionnaire = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetOrgQuestionnaire7133B504Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetOrgQuestionnaire7133B504Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}',
		...options
	});
};

/**
 * Create Section
 *
 * Add a section to organize questions in the questionnaire (admin only).
 *
 * Sections group related questions. Specify section name and display order. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateSectionBb771469Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateSectionBb771469Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Section
 *
 * Update a questionnaire section's details (admin only).
 *
 * Modify section name or display order. Requires 'edit_questionnaire' permission.
 */
export const questionnaireUpdateSection = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateSection53E0A326Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateSection53E0A326Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/sections/{section_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Question
 *
 * Add a multiple-choice question to the questionnaire (admin only).
 *
 * Create a question with predefined answer options. After creation, add options via
 * POST /questionnaires/{id}/multiple-choice-questions/{question_id}/options. Requires
 * 'edit_questionnaire' permission.
 */
export const questionnaireCreateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcQuestionB4627C77Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcQuestionB4627C77Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Mc Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcQuestion2340D094Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcQuestion2340D094Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireCreateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateMcOptionE3300FbdData, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateMcOptionE3300FbdResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-questions/{question_id}/options',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Mc Option
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateMcOption = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateMcOption29C9B269Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateMcOption29C9B269Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/multiple-choice-options/{option_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Ft Question
 *
 * Add a free-text question to the questionnaire (admin only).
 *
 * Create an open-ended question for text responses. Can be auto-evaluated by LLM based on
 * scoring criteria. Requires 'edit_questionnaire' permission.
 */
export const questionnaireCreateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireCreateFtQuestion395Ea652Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireCreateFtQuestion395Ea652Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Ft Question
 *
 * Create a multiple choice question.
 */
export const questionnaireUpdateFtQuestion = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireUpdateFtQuestion73Bb630aData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		QuestionnaireUpdateFtQuestion73Bb630aResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/free-text-questions/{question_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * List Submissions
 *
 * View user submissions for this questionnaire (admin only).
 *
 * Returns submitted questionnaires ready for review. Use this to see who has applied for
 * event access and their responses. Requires 'evaluate_questionnaire' permission.
 */
export const questionnaireListSubmissions = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireListSubmissionsE077D0C2Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireListSubmissionsE077D0C2Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions',
		...options
	});
};

/**
 * Get Submission Detail
 *
 * View detailed answers for a specific submission (admin only).
 *
 * Returns all questions and the user's answers, plus automatic evaluation results if available.
 * Use this to review a submission before manual approval/rejection. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireGetSubmissionDetail = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireGetSubmissionDetail5Fa20F07Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		QuestionnaireGetSubmissionDetail5Fa20F07Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}',
		...options
	});
};

/**
 * Evaluate Submission
 *
 * Manually approve or reject a questionnaire submission (admin only).
 *
 * Overrides automatic evaluation or provides decision for manual-review questionnaires.
 * Approved users can then RSVP or purchase tickets for the event. Requires
 * 'evaluate_questionnaire' permission.
 */
export const questionnaireEvaluateSubmission = <ThrowOnError extends boolean = false>(
	options: Options<QuestionnaireEvaluateSubmission61E05A39Data, ThrowOnError>
) => {
	return (options.client ?? client).post<
		QuestionnaireEvaluateSubmission61E05A39Responses,
		QuestionnaireEvaluateSubmission61E05A39Errors,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/questionnaires/{org_questionnaire_id}/submissions/{submission_id}/evaluate',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get General Preferences
 *
 * Get your global preferences that apply across all organizations and events.
 *
 * Returns default notification and privacy settings. These serve as defaults that can be
 * overridden at organization, series, or event level.
 */
export const userpreferencesGetGeneralPreferences = <ThrowOnError extends boolean = false>(
	options?: Options<UserpreferencesGetGeneralPreferencesE8E4312cData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		UserpreferencesGetGeneralPreferencesE8E4312cResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options
	});
};

/**
 * Update Global Preferences
 *
 * Update your global preference defaults.
 *
 * Modify notification and privacy settings. Set overwrite_children=true to cascade changes
 * to all organization/series/event-level preferences, overriding custom settings.
 */
export const userpreferencesUpdateGlobalPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateGlobalPreferencesCd08A3E4Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateGlobalPreferencesCd08A3E4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/general',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Organization Preferences
 *
 * Get your preferences for a specific organization.
 *
 * Returns organization-level overrides for notifications and privacy. Falls back to global
 * preferences if not customized.
 */
export const userpreferencesGetOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetOrganizationPreferences8F69Cbe4Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetOrganizationPreferences8F69Cbe4Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options
	});
};

/**
 * Update Organization Preferences
 *
 * Update preferences for a specific organization.
 *
 * Overrides global defaults for this organization. Set overwrite_children=true to cascade
 * changes to all series/event-level preferences within this organization.
 */
export const userpreferencesUpdateOrganizationPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateOrganizationPreferences2D5A4E68Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateOrganizationPreferences2D5A4E68Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/organization/{organization_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Series Preferences
 *
 * Get your preferences for a specific event series.
 *
 * Returns series-level overrides for notifications. Falls back to organization or global
 * preferences if not customized.
 */
export const userpreferencesGetEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesGetEventSeriesPreferencesD8Faf3F3Data, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventSeriesPreferencesD8Faf3F3Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options
	});
};

/**
 * Update Event Series Preferences
 *
 * Update preferences for a specific event series.
 *
 * Overrides organization/global defaults for this series. Set overwrite_children=true to
 * cascade changes to all individual event preferences within this series.
 */
export const userpreferencesUpdateEventSeriesPreferences = <
	ThrowOnError extends boolean = false
>(
	options: Options<UserpreferencesUpdateEventSeriesPreferencesD69Bed43Data, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventSeriesPreferencesD69Bed43Responses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event-series/{series_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Get Event Preferences
 *
 * Get your preferences for a specific event.
 *
 * Returns event-level overrides for notifications. Falls back to series, organization, or
 * global preferences if not customized.
 */
export const userpreferencesGetEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesGetEventPreferencesAc8Ed02fData, ThrowOnError>
) => {
	return (options.client ?? client).get<
		UserpreferencesGetEventPreferencesAc8Ed02fResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options
	});
};

/**
 * Update Event Preferences
 *
 * Update preferences for a specific event.
 *
 * Overrides series/organization/global defaults for this event. The most specific preference
 * level always takes precedence.
 */
export const userpreferencesUpdateEventPreferences = <ThrowOnError extends boolean = false>(
	options: Options<UserpreferencesUpdateEventPreferences8029709bData, ThrowOnError>
) => {
	return (options.client ?? client).put<
		UserpreferencesUpdateEventPreferences8029709bResponses,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: 'bearer',
				type: 'http'
			}
		],
		url: '/api/preferences/event/{event_id}',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Handle Webhook
 *
 * Process Stripe webhook events for payment processing.
 *
 * Handles payment confirmations, failures, and refunds. Verifies webhook signature for
 * security. This endpoint is called by Stripe, not by clients directly.
 */
export const stripewebhookHandleWebhook = <ThrowOnError extends boolean = false>(
	options?: Options<StripewebhookHandleWebhook450C34B3Data, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		StripewebhookHandleWebhook450C34B3Responses,
		unknown,
		ThrowOnError
	>({
		url: '/api/stripe/webhook',
		...options
	});
};

/**
 * List Tags
 *
 * Browse and search all available tags in the system.
 *
 * Tags are used to categorize organizations, events, and series. Supports autocomplete via
 * the 'search' query parameter (e.g., /api/tags/?search=tech). Use this to populate tag
 * selection dropdowns or filters.
 */
export const tagListTags = <ThrowOnError extends boolean = false>(
	options?: Options<TagListTagsA9Fbe54bData, ThrowOnError>
) => {
	return (options?.client ?? client).get<TagListTagsA9Fbe54bResponses, unknown, ThrowOnError>({
		url: '/api/tags/',
		...options
	});
};

/**
 * List Cities
 *
 * Search and browse cities from the global database.
 *
 * Supports filtering by country and searching by city name. Use the 'search' parameter
 * for autocomplete functionality. Useful for setting user location preferences or
 * filtering events by location.
 */
export const cityListCities = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCities0D393970Data, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCities0D393970Responses, unknown, ThrowOnError>({
		url: '/api/cities/',
		...options
	});
};

/**
 * List Countries
 *
 * Get a list of all countries with cities in the database.
 *
 * Returns country names for filtering cities. Use this to populate country
 * selection dropdowns in location pickers.
 */
export const cityListCountries = <ThrowOnError extends boolean = false>(
	options?: Options<CityListCountries1C8A632dData, ThrowOnError>
) => {
	return (options?.client ?? client).get<CityListCountries1C8A632dResponses, unknown, ThrowOnError>(
		{
			url: '/api/cities/countries',
			...options
		}
	);
};

/**
 * Get City
 *
 * Retrieve detailed information for a specific city by ID.
 *
 * Returns city details including name, coordinates, and country. Use this to
 * get full city information after selecting from a search result.
 */
export const cityGetCity = <ThrowOnError extends boolean = false>(
	options: Options<CityGetCity0C6F31D6Data, ThrowOnError>
) => {
	return (options.client ?? client).get<CityGetCity0C6F31D6Responses, unknown, ThrowOnError>({
		url: '/api/cities/{city_id}',
		...options
	});
};
